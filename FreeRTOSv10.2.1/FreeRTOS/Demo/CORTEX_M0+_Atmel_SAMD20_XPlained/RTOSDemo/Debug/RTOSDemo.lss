
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d98  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00003d98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000409c  20000434  000041cc  00020434  2**2
                  ALLOC
  3 .stack        00002000  200044d0  00008268  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023f5e  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030cd  00000000  00000000  00044413  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000302f  00000000  00000000  000474e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008e0  00000000  00000000  0004a50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007d0  00000000  00000000  0004adef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005cd8  00000000  00000000  0004b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e524  00000000  00000000  00051297  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000521f3  00000000  00000000  0005f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f94  00000000  00000000  000b19b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 64 00 20 65 38 00 00 e9 38 00 00 41 38 00 00     .d. e8...8..A8..
	...
      2c:	e9 38 00 00 00 00 00 00 00 00 00 00 c1 05 00 00     .8..............
      3c:	09 06 00 00 e9 38 00 00 e9 38 00 00 e9 38 00 00     .....8...8...8..
      4c:	e9 38 00 00 e9 38 00 00 e9 38 00 00 e9 38 00 00     .8...8...8...8..
      5c:	31 28 00 00 49 28 00 00 61 28 00 00 79 28 00 00     1(..I(..a(..y(..
      6c:	91 28 00 00 a9 28 00 00 e9 38 00 00 e9 38 00 00     .(...(...8...8..
      7c:	e9 38 00 00 e9 38 00 00 e9 38 00 00 e9 38 00 00     .8...8...8...8..
      8c:	e9 38 00 00 e9 38 00 00 e9 38 00 00 e9 38 00 00     .8...8...8...8..
      9c:	e9 38 00 00                                         .8..

000000a0 <__do_global_dtors_aux>:
      a0:	b510      	push	{r4, lr}
      a2:	4c06      	ldr	r4, [pc, #24]	; (bc <__do_global_dtors_aux+0x1c>)
      a4:	7823      	ldrb	r3, [r4, #0]
      a6:	2b00      	cmp	r3, #0
      a8:	d107      	bne.n	ba <__do_global_dtors_aux+0x1a>
      aa:	4b05      	ldr	r3, [pc, #20]	; (c0 <__do_global_dtors_aux+0x20>)
      ac:	2b00      	cmp	r3, #0
      ae:	d002      	beq.n	b6 <__do_global_dtors_aux+0x16>
      b0:	4804      	ldr	r0, [pc, #16]	; (c4 <__do_global_dtors_aux+0x24>)
      b2:	e000      	b.n	b6 <__do_global_dtors_aux+0x16>
      b4:	bf00      	nop
      b6:	2301      	movs	r3, #1
      b8:	7023      	strb	r3, [r4, #0]
      ba:	bd10      	pop	{r4, pc}
      bc:	20000434 	.word	0x20000434
      c0:	00000000 	.word	0x00000000
      c4:	00003d98 	.word	0x00003d98

000000c8 <frame_dummy>:
      c8:	4b08      	ldr	r3, [pc, #32]	; (ec <frame_dummy+0x24>)
      ca:	b510      	push	{r4, lr}
      cc:	2b00      	cmp	r3, #0
      ce:	d003      	beq.n	d8 <frame_dummy+0x10>
      d0:	4907      	ldr	r1, [pc, #28]	; (f0 <frame_dummy+0x28>)
      d2:	4808      	ldr	r0, [pc, #32]	; (f4 <frame_dummy+0x2c>)
      d4:	e000      	b.n	d8 <frame_dummy+0x10>
      d6:	bf00      	nop
      d8:	4807      	ldr	r0, [pc, #28]	; (f8 <frame_dummy+0x30>)
      da:	6803      	ldr	r3, [r0, #0]
      dc:	2b00      	cmp	r3, #0
      de:	d100      	bne.n	e2 <frame_dummy+0x1a>
      e0:	bd10      	pop	{r4, pc}
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <frame_dummy+0x34>)
      e4:	2b00      	cmp	r3, #0
      e6:	d0fb      	beq.n	e0 <frame_dummy+0x18>
      e8:	4798      	blx	r3
      ea:	e7f9      	b.n	e0 <frame_dummy+0x18>
      ec:	00000000 	.word	0x00000000
      f0:	20000438 	.word	0x20000438
      f4:	00003d98 	.word	0x00003d98
      f8:	00003d98 	.word	0x00003d98
      fc:	00000000 	.word	0x00000000

00000100 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     100:	b580      	push	{r7, lr}
     102:	b084      	sub	sp, #16
     104:	af00      	add	r7, sp, #0
     106:	0002      	movs	r2, r0
     108:	1dfb      	adds	r3, r7, #7
     10a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     10c:	230f      	movs	r3, #15
     10e:	18fb      	adds	r3, r7, r3
     110:	1dfa      	adds	r2, r7, #7
     112:	7812      	ldrb	r2, [r2, #0]
     114:	09d2      	lsrs	r2, r2, #7
     116:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     118:	230e      	movs	r3, #14
     11a:	18fb      	adds	r3, r7, r3
     11c:	1dfa      	adds	r2, r7, #7
     11e:	7812      	ldrb	r2, [r2, #0]
     120:	0952      	lsrs	r2, r2, #5
     122:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     124:	4b0d      	ldr	r3, [pc, #52]	; (15c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     126:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     128:	230f      	movs	r3, #15
     12a:	18fb      	adds	r3, r7, r3
     12c:	781b      	ldrb	r3, [r3, #0]
     12e:	2b00      	cmp	r3, #0
     130:	d10f      	bne.n	152 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     132:	230f      	movs	r3, #15
     134:	18fb      	adds	r3, r7, r3
     136:	781b      	ldrb	r3, [r3, #0]
     138:	009b      	lsls	r3, r3, #2
     13a:	2210      	movs	r2, #16
     13c:	4694      	mov	ip, r2
     13e:	44bc      	add	ip, r7
     140:	4463      	add	r3, ip
     142:	3b08      	subs	r3, #8
     144:	681a      	ldr	r2, [r3, #0]
     146:	230e      	movs	r3, #14
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	01db      	lsls	r3, r3, #7
     14e:	18d3      	adds	r3, r2, r3
     150:	e000      	b.n	154 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	}
}
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b004      	add	sp, #16
     15a:	bd80      	pop	{r7, pc}
     15c:	41004400 	.word	0x41004400

00000160 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
     166:	0002      	movs	r2, r0
     168:	1dfb      	adds	r3, r7, #7
     16a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     16c:	1dfb      	adds	r3, r7, #7
     16e:	781b      	ldrb	r3, [r3, #0]
     170:	0018      	movs	r0, r3
     172:	4b03      	ldr	r3, [pc, #12]	; (180 <port_get_group_from_gpio_pin+0x20>)
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
}
     178:	0018      	movs	r0, r3
     17a:	46bd      	mov	sp, r7
     17c:	b002      	add	sp, #8
     17e:	bd80      	pop	{r7, pc}
     180:	00000101 	.word	0x00000101

00000184 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	0002      	movs	r2, r0
     18c:	1dfb      	adds	r3, r7, #7
     18e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     190:	1dfb      	adds	r3, r7, #7
     192:	781b      	ldrb	r3, [r3, #0]
     194:	0018      	movs	r0, r3
     196:	4b09      	ldr	r3, [pc, #36]	; (1bc <port_pin_toggle_output_level+0x38>)
     198:	4798      	blx	r3
     19a:	0003      	movs	r3, r0
     19c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     19e:	1dfb      	adds	r3, r7, #7
     1a0:	781b      	ldrb	r3, [r3, #0]
     1a2:	221f      	movs	r2, #31
     1a4:	4013      	ands	r3, r2
     1a6:	2201      	movs	r2, #1
     1a8:	409a      	lsls	r2, r3
     1aa:	0013      	movs	r3, r2
     1ac:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	68ba      	ldr	r2, [r7, #8]
     1b2:	61da      	str	r2, [r3, #28]
}
     1b4:	46c0      	nop			; (mov r8, r8)
     1b6:	46bd      	mov	sp, r7
     1b8:	b004      	add	sp, #16
     1ba:	bd80      	pop	{r7, pc}
     1bc:	00000161 	.word	0x00000161

000001c0 <main_blinky>:
static QueueHandle_t xQueue = NULL;

/*-----------------------------------------------------------*/

void main_blinky( void )
{
     1c0:	b590      	push	{r4, r7, lr}
     1c2:	b083      	sub	sp, #12
     1c4:	af02      	add	r7, sp, #8
	/* Create the queue. */
	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
     1c6:	2200      	movs	r2, #0
     1c8:	2104      	movs	r1, #4
     1ca:	2001      	movs	r0, #1
     1cc:	4b10      	ldr	r3, [pc, #64]	; (210 <main_blinky+0x50>)
     1ce:	4798      	blx	r3
     1d0:	0002      	movs	r2, r0
     1d2:	4b10      	ldr	r3, [pc, #64]	; (214 <main_blinky+0x54>)
     1d4:	601a      	str	r2, [r3, #0]

	if( xQueue != NULL )
     1d6:	4b0f      	ldr	r3, [pc, #60]	; (214 <main_blinky+0x54>)
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	2b00      	cmp	r3, #0
     1dc:	d016      	beq.n	20c <main_blinky+0x4c>
	{
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvQueueReceiveTask,					/* The function that implements the task. */
     1de:	490e      	ldr	r1, [pc, #56]	; (218 <main_blinky+0x58>)
     1e0:	480e      	ldr	r0, [pc, #56]	; (21c <main_blinky+0x5c>)
     1e2:	2300      	movs	r3, #0
     1e4:	9301      	str	r3, [sp, #4]
     1e6:	2302      	movs	r3, #2
     1e8:	9300      	str	r3, [sp, #0]
     1ea:	2322      	movs	r3, #34	; 0x22
     1ec:	2246      	movs	r2, #70	; 0x46
     1ee:	4c0c      	ldr	r4, [pc, #48]	; (220 <main_blinky+0x60>)
     1f0:	47a0      	blx	r4
					configMINIMAL_STACK_SIZE, 				/* The size of the stack to allocate to the task. */
					( void * ) mainQUEUE_RECEIVE_PARAMETER, /* The parameter passed to the task - just to check the functionality. */
					mainQUEUE_RECEIVE_TASK_PRIORITY, 		/* The priority assigned to the task. */
					NULL );									/* The task handle is not required, so NULL is passed. */

		xTaskCreate( prvQueueSendTask, "TX", configMINIMAL_STACK_SIZE, ( void * ) mainQUEUE_SEND_PARAMETER, mainQUEUE_SEND_TASK_PRIORITY, NULL );
     1f2:	4a0c      	ldr	r2, [pc, #48]	; (224 <main_blinky+0x64>)
     1f4:	490c      	ldr	r1, [pc, #48]	; (228 <main_blinky+0x68>)
     1f6:	480d      	ldr	r0, [pc, #52]	; (22c <main_blinky+0x6c>)
     1f8:	2300      	movs	r3, #0
     1fa:	9301      	str	r3, [sp, #4]
     1fc:	2301      	movs	r3, #1
     1fe:	9300      	str	r3, [sp, #0]
     200:	0013      	movs	r3, r2
     202:	2246      	movs	r2, #70	; 0x46
     204:	4c06      	ldr	r4, [pc, #24]	; (220 <main_blinky+0x60>)
     206:	47a0      	blx	r4

		/* Start the tasks and timer running. */
		vTaskStartScheduler();
     208:	4b09      	ldr	r3, [pc, #36]	; (230 <main_blinky+0x70>)
     20a:	4798      	blx	r3
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	for( ;; );
     20c:	e7fe      	b.n	20c <main_blinky+0x4c>
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00000ac1 	.word	0x00000ac1
     214:	20000450 	.word	0x20000450
     218:	00003cc0 	.word	0x00003cc0
     21c:	00000289 	.word	0x00000289
     220:	00001435 	.word	0x00001435
     224:	00001111 	.word	0x00001111
     228:	00003cc4 	.word	0x00003cc4
     22c:	00000235 	.word	0x00000235
     230:	000017a5 	.word	0x000017a5

00000234 <prvQueueSendTask>:
}
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
     234:	b590      	push	{r4, r7, lr}
     236:	b085      	sub	sp, #20
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
TickType_t xNextWakeTime;
const unsigned long ulValueToSend = 100UL;
     23c:	2364      	movs	r3, #100	; 0x64
     23e:	60bb      	str	r3, [r7, #8]

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_SEND_PARAMETER );
     240:	687b      	ldr	r3, [r7, #4]
     242:	4a0c      	ldr	r2, [pc, #48]	; (274 <prvQueueSendTask+0x40>)
     244:	4293      	cmp	r3, r2
     246:	d001      	beq.n	24c <prvQueueSendTask+0x18>
     248:	b672      	cpsid	i
     24a:	e7fe      	b.n	24a <prvQueueSendTask+0x16>

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
     24c:	4b0a      	ldr	r3, [pc, #40]	; (278 <prvQueueSendTask+0x44>)
     24e:	4798      	blx	r3
     250:	0003      	movs	r3, r0
     252:	60fb      	str	r3, [r7, #12]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time. */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
     254:	230c      	movs	r3, #12
     256:	18fb      	adds	r3, r7, r3
     258:	2164      	movs	r1, #100	; 0x64
     25a:	0018      	movs	r0, r3
     25c:	4b07      	ldr	r3, [pc, #28]	; (27c <prvQueueSendTask+0x48>)
     25e:	4798      	blx	r3

		/* Send to the queue - causing the queue receive task to unblock and
		toggle the LED.  0 is used as the block time so the sending operation
		will not block - it shouldn't need to block as the queue should always
		be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0U );
     260:	4b07      	ldr	r3, [pc, #28]	; (280 <prvQueueSendTask+0x4c>)
     262:	6818      	ldr	r0, [r3, #0]
     264:	2308      	movs	r3, #8
     266:	18f9      	adds	r1, r7, r3
     268:	2300      	movs	r3, #0
     26a:	2200      	movs	r2, #0
     26c:	4c05      	ldr	r4, [pc, #20]	; (284 <prvQueueSendTask+0x50>)
     26e:	47a0      	blx	r4
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
     270:	e7f0      	b.n	254 <prvQueueSendTask+0x20>
     272:	46c0      	nop			; (mov r8, r8)
     274:	00001111 	.word	0x00001111
     278:	0000197d 	.word	0x0000197d
     27c:	000016dd 	.word	0x000016dd
     280:	20000450 	.word	0x20000450
     284:	00000b89 	.word	0x00000b89

00000288 <prvQueueReceiveTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
     288:	b580      	push	{r7, lr}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
unsigned long ulReceivedValue;

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_RECEIVE_PARAMETER );
     290:	687b      	ldr	r3, [r7, #4]
     292:	2b22      	cmp	r3, #34	; 0x22
     294:	d001      	beq.n	29a <prvQueueReceiveTask+0x12>
     296:	b672      	cpsid	i
     298:	e7fe      	b.n	298 <prvQueueReceiveTask+0x10>
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h. */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
     29a:	4b09      	ldr	r3, [pc, #36]	; (2c0 <prvQueueReceiveTask+0x38>)
     29c:	6818      	ldr	r0, [r3, #0]
     29e:	2301      	movs	r3, #1
     2a0:	425a      	negs	r2, r3
     2a2:	230c      	movs	r3, #12
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	0019      	movs	r1, r3
     2a8:	4b06      	ldr	r3, [pc, #24]	; (2c4 <prvQueueReceiveTask+0x3c>)
     2aa:	4798      	blx	r3

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, toggle the LED. */
		if( ulReceivedValue == 100UL )
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	2b64      	cmp	r3, #100	; 0x64
     2b0:	d1f3      	bne.n	29a <prvQueueReceiveTask+0x12>
		{
			/* Toggle the LED. */
			port_pin_toggle_output_level( LED_0_PIN );
     2b2:	200e      	movs	r0, #14
     2b4:	4b04      	ldr	r3, [pc, #16]	; (2c8 <prvQueueReceiveTask+0x40>)
     2b6:	4798      	blx	r3
			ulReceivedValue = 0U;
     2b8:	2300      	movs	r3, #0
     2ba:	60fb      	str	r3, [r7, #12]
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
     2bc:	e7ed      	b.n	29a <prvQueueReceiveTask+0x12>
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	20000450 	.word	0x20000450
     2c4:	00000e9d 	.word	0x00000e9d
     2c8:	00000185 	.word	0x00000185

000002cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b082      	sub	sp, #8
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	3308      	adds	r3, #8
     2d8:	001a      	movs	r2, r3
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	2201      	movs	r2, #1
     2e2:	4252      	negs	r2, r2
     2e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	3308      	adds	r3, #8
     2ea:	001a      	movs	r2, r3
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	3308      	adds	r3, #8
     2f4:	001a      	movs	r2, r3
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	2200      	movs	r2, #0
     2fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     300:	46c0      	nop			; (mov r8, r8)
     302:	46bd      	mov	sp, r7
     304:	b002      	add	sp, #8
     306:	bd80      	pop	{r7, pc}

00000308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     308:	b580      	push	{r7, lr}
     30a:	b082      	sub	sp, #8
     30c:	af00      	add	r7, sp, #0
     30e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     310:	687b      	ldr	r3, [r7, #4]
     312:	2200      	movs	r2, #0
     314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     316:	46c0      	nop			; (mov r8, r8)
     318:	46bd      	mov	sp, r7
     31a:	b002      	add	sp, #8
     31c:	bd80      	pop	{r7, pc}

0000031e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     31e:	b580      	push	{r7, lr}
     320:	b084      	sub	sp, #16
     322:	af00      	add	r7, sp, #0
     324:	6078      	str	r0, [r7, #4]
     326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     328:	687b      	ldr	r3, [r7, #4]
     32a:	685b      	ldr	r3, [r3, #4]
     32c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     32e:	683b      	ldr	r3, [r7, #0]
     330:	68fa      	ldr	r2, [r7, #12]
     332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     334:	68fb      	ldr	r3, [r7, #12]
     336:	689a      	ldr	r2, [r3, #8]
     338:	683b      	ldr	r3, [r7, #0]
     33a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     33c:	68fb      	ldr	r3, [r7, #12]
     33e:	689b      	ldr	r3, [r3, #8]
     340:	683a      	ldr	r2, [r7, #0]
     342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     344:	68fb      	ldr	r3, [r7, #12]
     346:	683a      	ldr	r2, [r7, #0]
     348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     34a:	683b      	ldr	r3, [r7, #0]
     34c:	687a      	ldr	r2, [r7, #4]
     34e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     350:	687b      	ldr	r3, [r7, #4]
     352:	681b      	ldr	r3, [r3, #0]
     354:	1c5a      	adds	r2, r3, #1
     356:	687b      	ldr	r3, [r7, #4]
     358:	601a      	str	r2, [r3, #0]
}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	46bd      	mov	sp, r7
     35e:	b004      	add	sp, #16
     360:	bd80      	pop	{r7, pc}

00000362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     362:	b580      	push	{r7, lr}
     364:	b084      	sub	sp, #16
     366:	af00      	add	r7, sp, #0
     368:	6078      	str	r0, [r7, #4]
     36a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     36c:	683b      	ldr	r3, [r7, #0]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     372:	68bb      	ldr	r3, [r7, #8]
     374:	3301      	adds	r3, #1
     376:	d103      	bne.n	380 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     378:	687b      	ldr	r3, [r7, #4]
     37a:	691b      	ldr	r3, [r3, #16]
     37c:	60fb      	str	r3, [r7, #12]
     37e:	e00c      	b.n	39a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     380:	687b      	ldr	r3, [r7, #4]
     382:	3308      	adds	r3, #8
     384:	60fb      	str	r3, [r7, #12]
     386:	e002      	b.n	38e <vListInsert+0x2c>
     388:	68fb      	ldr	r3, [r7, #12]
     38a:	685b      	ldr	r3, [r3, #4]
     38c:	60fb      	str	r3, [r7, #12]
     38e:	68fb      	ldr	r3, [r7, #12]
     390:	685b      	ldr	r3, [r3, #4]
     392:	681a      	ldr	r2, [r3, #0]
     394:	68bb      	ldr	r3, [r7, #8]
     396:	429a      	cmp	r2, r3
     398:	d9f6      	bls.n	388 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     39a:	68fb      	ldr	r3, [r7, #12]
     39c:	685a      	ldr	r2, [r3, #4]
     39e:	683b      	ldr	r3, [r7, #0]
     3a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	685b      	ldr	r3, [r3, #4]
     3a6:	683a      	ldr	r2, [r7, #0]
     3a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     3aa:	683b      	ldr	r3, [r7, #0]
     3ac:	68fa      	ldr	r2, [r7, #12]
     3ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     3b0:	68fb      	ldr	r3, [r7, #12]
     3b2:	683a      	ldr	r2, [r7, #0]
     3b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     3b6:	683b      	ldr	r3, [r7, #0]
     3b8:	687a      	ldr	r2, [r7, #4]
     3ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	1c5a      	adds	r2, r3, #1
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	601a      	str	r2, [r3, #0]
}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	46bd      	mov	sp, r7
     3ca:	b004      	add	sp, #16
     3cc:	bd80      	pop	{r7, pc}

000003ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3ce:	b580      	push	{r7, lr}
     3d0:	b084      	sub	sp, #16
     3d2:	af00      	add	r7, sp, #0
     3d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	691b      	ldr	r3, [r3, #16]
     3da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	685b      	ldr	r3, [r3, #4]
     3e0:	687a      	ldr	r2, [r7, #4]
     3e2:	6892      	ldr	r2, [r2, #8]
     3e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	689b      	ldr	r3, [r3, #8]
     3ea:	687a      	ldr	r2, [r7, #4]
     3ec:	6852      	ldr	r2, [r2, #4]
     3ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3f0:	68fb      	ldr	r3, [r7, #12]
     3f2:	685a      	ldr	r2, [r3, #4]
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	429a      	cmp	r2, r3
     3f8:	d103      	bne.n	402 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	689a      	ldr	r2, [r3, #8]
     3fe:	68fb      	ldr	r3, [r7, #12]
     400:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     402:	687b      	ldr	r3, [r7, #4]
     404:	2200      	movs	r2, #0
     406:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     408:	68fb      	ldr	r3, [r7, #12]
     40a:	681b      	ldr	r3, [r3, #0]
     40c:	1e5a      	subs	r2, r3, #1
     40e:	68fb      	ldr	r3, [r7, #12]
     410:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     412:	68fb      	ldr	r3, [r7, #12]
     414:	681b      	ldr	r3, [r3, #0]
}
     416:	0018      	movs	r0, r3
     418:	46bd      	mov	sp, r7
     41a:	b004      	add	sp, #16
     41c:	bd80      	pop	{r7, pc}
	...

00000420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     420:	b580      	push	{r7, lr}
     422:	b084      	sub	sp, #16
     424:	af00      	add	r7, sp, #0
     426:	60f8      	str	r0, [r7, #12]
     428:	60b9      	str	r1, [r7, #8]
     42a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     42c:	68fb      	ldr	r3, [r7, #12]
     42e:	3b04      	subs	r3, #4
     430:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     432:	68fb      	ldr	r3, [r7, #12]
     434:	2280      	movs	r2, #128	; 0x80
     436:	0452      	lsls	r2, r2, #17
     438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     43a:	68fb      	ldr	r3, [r7, #12]
     43c:	3b04      	subs	r3, #4
     43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     440:	68ba      	ldr	r2, [r7, #8]
     442:	68fb      	ldr	r3, [r7, #12]
     444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     446:	68fb      	ldr	r3, [r7, #12]
     448:	3b04      	subs	r3, #4
     44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     44c:	4a08      	ldr	r2, [pc, #32]	; (470 <pxPortInitialiseStack+0x50>)
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     452:	68fb      	ldr	r3, [r7, #12]
     454:	3b14      	subs	r3, #20
     456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     458:	687a      	ldr	r2, [r7, #4]
     45a:	68fb      	ldr	r3, [r7, #12]
     45c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     45e:	68fb      	ldr	r3, [r7, #12]
     460:	3b20      	subs	r3, #32
     462:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     464:	68fb      	ldr	r3, [r7, #12]
}
     466:	0018      	movs	r0, r3
     468:	46bd      	mov	sp, r7
     46a:	b004      	add	sp, #16
     46c:	bd80      	pop	{r7, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	00000475 	.word	0x00000475

00000474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     474:	b580      	push	{r7, lr}
     476:	b082      	sub	sp, #8
     478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
     47a:	2300      	movs	r3, #0
     47c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     47e:	4b07      	ldr	r3, [pc, #28]	; (49c <prvTaskExitError+0x28>)
     480:	681b      	ldr	r3, [r3, #0]
     482:	3301      	adds	r3, #1
     484:	d001      	beq.n	48a <prvTaskExitError+0x16>
     486:	b672      	cpsid	i
     488:	e7fe      	b.n	488 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
     48a:	b672      	cpsid	i
	while( ulDummy == 0 )
     48c:	46c0      	nop			; (mov r8, r8)
     48e:	687b      	ldr	r3, [r7, #4]
     490:	2b00      	cmp	r3, #0
     492:	d0fc      	beq.n	48e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     494:	46c0      	nop			; (mov r8, r8)
     496:	46bd      	mov	sp, r7
     498:	b002      	add	sp, #8
     49a:	bd80      	pop	{r7, pc}
     49c:	20000000 	.word	0x20000000

000004a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     4a0:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <pxCurrentTCBConst2>)
     4a2:	6813      	ldr	r3, [r2, #0]
     4a4:	6818      	ldr	r0, [r3, #0]
     4a6:	3020      	adds	r0, #32
     4a8:	f380 8809 	msr	PSP, r0
     4ac:	2002      	movs	r0, #2
     4ae:	f380 8814 	msr	CONTROL, r0
     4b2:	f3bf 8f6f 	isb	sy
     4b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     4b8:	46ae      	mov	lr, r5
     4ba:	bc08      	pop	{r3}
     4bc:	bc04      	pop	{r2}
     4be:	b662      	cpsie	i
     4c0:	4718      	bx	r3
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	46c0      	nop			; (mov r8, r8)
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	46c0      	nop			; (mov r8, r8)
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	46c0      	nop			; (mov r8, r8)
     4ce:	46c0      	nop			; (mov r8, r8)

000004d0 <pxCurrentTCBConst2>:
     4d0:	200042ec 	.word	0x200042ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
     4d4:	46c0      	nop			; (mov r8, r8)
     4d6:	46c0      	nop			; (mov r8, r8)

000004d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     4d8:	b580      	push	{r7, lr}
     4da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     4dc:	4b0e      	ldr	r3, [pc, #56]	; (518 <xPortStartScheduler+0x40>)
     4de:	4a0e      	ldr	r2, [pc, #56]	; (518 <xPortStartScheduler+0x40>)
     4e0:	6812      	ldr	r2, [r2, #0]
     4e2:	21ff      	movs	r1, #255	; 0xff
     4e4:	0409      	lsls	r1, r1, #16
     4e6:	430a      	orrs	r2, r1
     4e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     4ea:	4b0b      	ldr	r3, [pc, #44]	; (518 <xPortStartScheduler+0x40>)
     4ec:	4a0a      	ldr	r2, [pc, #40]	; (518 <xPortStartScheduler+0x40>)
     4ee:	6812      	ldr	r2, [r2, #0]
     4f0:	21ff      	movs	r1, #255	; 0xff
     4f2:	0609      	lsls	r1, r1, #24
     4f4:	430a      	orrs	r2, r1
     4f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     4f8:	4b08      	ldr	r3, [pc, #32]	; (51c <xPortStartScheduler+0x44>)
     4fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     4fc:	4b08      	ldr	r3, [pc, #32]	; (520 <xPortStartScheduler+0x48>)
     4fe:	2200      	movs	r2, #0
     500:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     502:	4b08      	ldr	r3, [pc, #32]	; (524 <xPortStartScheduler+0x4c>)
     504:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
     506:	4b08      	ldr	r3, [pc, #32]	; (528 <xPortStartScheduler+0x50>)
     508:	4798      	blx	r3
	prvTaskExitError();
     50a:	4b08      	ldr	r3, [pc, #32]	; (52c <xPortStartScheduler+0x54>)
     50c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
     50e:	2300      	movs	r3, #0
}
     510:	0018      	movs	r0, r3
     512:	46bd      	mov	sp, r7
     514:	bd80      	pop	{r7, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	e000ed20 	.word	0xe000ed20
     51c:	00000649 	.word	0x00000649
     520:	20000000 	.word	0x20000000
     524:	000004a1 	.word	0x000004a1
     528:	00001b39 	.word	0x00001b39
     52c:	00000475 	.word	0x00000475

00000530 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
     530:	b580      	push	{r7, lr}
     532:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <vPortYield+0x1c>)
     536:	2280      	movs	r2, #128	; 0x80
     538:	0552      	lsls	r2, r2, #21
     53a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
     53c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     540:	f3bf 8f6f 	isb	sy
}
     544:	46c0      	nop			; (mov r8, r8)
     546:	46bd      	mov	sp, r7
     548:	bd80      	pop	{r7, pc}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	e000ed04 	.word	0xe000ed04

00000550 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     550:	b580      	push	{r7, lr}
     552:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
     554:	b672      	cpsid	i
    uxCriticalNesting++;
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <vPortEnterCritical+0x20>)
     558:	681b      	ldr	r3, [r3, #0]
     55a:	1c5a      	adds	r2, r3, #1
     55c:	4b04      	ldr	r3, [pc, #16]	; (570 <vPortEnterCritical+0x20>)
     55e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     560:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     564:	f3bf 8f6f 	isb	sy
}
     568:	46c0      	nop			; (mov r8, r8)
     56a:	46bd      	mov	sp, r7
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	20000000 	.word	0x20000000

00000574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     574:	b580      	push	{r7, lr}
     576:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
     578:	4b09      	ldr	r3, [pc, #36]	; (5a0 <vPortExitCritical+0x2c>)
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	2b00      	cmp	r3, #0
     57e:	d101      	bne.n	584 <vPortExitCritical+0x10>
     580:	b672      	cpsid	i
     582:	e7fe      	b.n	582 <vPortExitCritical+0xe>
    uxCriticalNesting--;
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <vPortExitCritical+0x2c>)
     586:	681b      	ldr	r3, [r3, #0]
     588:	1e5a      	subs	r2, r3, #1
     58a:	4b05      	ldr	r3, [pc, #20]	; (5a0 <vPortExitCritical+0x2c>)
     58c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
     58e:	4b04      	ldr	r3, [pc, #16]	; (5a0 <vPortExitCritical+0x2c>)
     590:	681b      	ldr	r3, [r3, #0]
     592:	2b00      	cmp	r3, #0
     594:	d100      	bne.n	598 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
     596:	b662      	cpsie	i
    }
}
     598:	46c0      	nop			; (mov r8, r8)
     59a:	46bd      	mov	sp, r7
     59c:	bd80      	pop	{r7, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	20000000 	.word	0x20000000

000005a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     5a4:	f3ef 8010 	mrs	r0, PRIMASK
     5a8:	b672      	cpsid	i
     5aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
     5ac:	46c0      	nop			; (mov r8, r8)
     5ae:	0018      	movs	r0, r3

000005b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
     5b0:	f380 8810 	msr	PRIMASK, r0
     5b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
     5b6:	46c0      	nop			; (mov r8, r8)
	...

000005c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     5c0:	f3ef 8009 	mrs	r0, PSP
     5c4:	4b0e      	ldr	r3, [pc, #56]	; (600 <pxCurrentTCBConst>)
     5c6:	681a      	ldr	r2, [r3, #0]
     5c8:	3820      	subs	r0, #32
     5ca:	6010      	str	r0, [r2, #0]
     5cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     5ce:	4644      	mov	r4, r8
     5d0:	464d      	mov	r5, r9
     5d2:	4656      	mov	r6, sl
     5d4:	465f      	mov	r7, fp
     5d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     5d8:	b508      	push	{r3, lr}
     5da:	b672      	cpsid	i
     5dc:	f001 faac 	bl	1b38 <vTaskSwitchContext>
     5e0:	b662      	cpsie	i
     5e2:	bc0c      	pop	{r2, r3}
     5e4:	6811      	ldr	r1, [r2, #0]
     5e6:	6808      	ldr	r0, [r1, #0]
     5e8:	3010      	adds	r0, #16
     5ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5ec:	46a0      	mov	r8, r4
     5ee:	46a9      	mov	r9, r5
     5f0:	46b2      	mov	sl, r6
     5f2:	46bb      	mov	fp, r7
     5f4:	f380 8809 	msr	PSP, r0
     5f8:	3820      	subs	r0, #32
     5fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5fc:	4718      	bx	r3
     5fe:	46c0      	nop			; (mov r8, r8)

00000600 <pxCurrentTCBConst>:
     600:	200042ec 	.word	0x200042ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
     604:	46c0      	nop			; (mov r8, r8)
     606:	46c0      	nop			; (mov r8, r8)

00000608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <SysTick_Handler+0x30>)
     610:	4798      	blx	r3
     612:	0003      	movs	r3, r0
     614:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     616:	4b09      	ldr	r3, [pc, #36]	; (63c <SysTick_Handler+0x34>)
     618:	4798      	blx	r3
     61a:	1e03      	subs	r3, r0, #0
     61c:	d003      	beq.n	626 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     61e:	4b08      	ldr	r3, [pc, #32]	; (640 <SysTick_Handler+0x38>)
     620:	2280      	movs	r2, #128	; 0x80
     622:	0552      	lsls	r2, r2, #21
     624:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     626:	687b      	ldr	r3, [r7, #4]
     628:	0018      	movs	r0, r3
     62a:	4b06      	ldr	r3, [pc, #24]	; (644 <SysTick_Handler+0x3c>)
     62c:	4798      	blx	r3
}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	46bd      	mov	sp, r7
     632:	b002      	add	sp, #8
     634:	bd80      	pop	{r7, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	000005a5 	.word	0x000005a5
     63c:	000019b9 	.word	0x000019b9
     640:	e000ed04 	.word	0xe000ed04
     644:	000005b1 	.word	0x000005b1

00000648 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     648:	b5b0      	push	{r4, r5, r7, lr}
     64a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     64c:	4b0b      	ldr	r3, [pc, #44]	; (67c <prvSetupTimerInterrupt+0x34>)
     64e:	2200      	movs	r2, #0
     650:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     652:	4b0b      	ldr	r3, [pc, #44]	; (680 <prvSetupTimerInterrupt+0x38>)
     654:	2200      	movs	r2, #0
     656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     658:	4c0a      	ldr	r4, [pc, #40]	; (684 <prvSetupTimerInterrupt+0x3c>)
     65a:	2007      	movs	r0, #7
     65c:	4b0a      	ldr	r3, [pc, #40]	; (688 <prvSetupTimerInterrupt+0x40>)
     65e:	4798      	blx	r3
     660:	4b0a      	ldr	r3, [pc, #40]	; (68c <prvSetupTimerInterrupt+0x44>)
     662:	22fa      	movs	r2, #250	; 0xfa
     664:	0051      	lsls	r1, r2, #1
     666:	4798      	blx	r3
     668:	0003      	movs	r3, r0
     66a:	3b01      	subs	r3, #1
     66c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     66e:	4b03      	ldr	r3, [pc, #12]	; (67c <prvSetupTimerInterrupt+0x34>)
     670:	2207      	movs	r2, #7
     672:	601a      	str	r2, [r3, #0]
}
     674:	46c0      	nop			; (mov r8, r8)
     676:	46bd      	mov	sp, r7
     678:	bdb0      	pop	{r4, r5, r7, pc}
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	e000e010 	.word	0xe000e010
     680:	e000e018 	.word	0xe000e018
     684:	e000e014 	.word	0xe000e014
     688:	00002e45 	.word	0x00002e45
     68c:	000038f1 	.word	0x000038f1

00000690 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     690:	b580      	push	{r7, lr}
     692:	b086      	sub	sp, #24
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     698:	2300      	movs	r3, #0
     69a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
     69c:	4b4c      	ldr	r3, [pc, #304]	; (7d0 <pvPortMalloc+0x140>)
     69e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     6a0:	4b4c      	ldr	r3, [pc, #304]	; (7d4 <pvPortMalloc+0x144>)
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	2b00      	cmp	r3, #0
     6a6:	d101      	bne.n	6ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
     6a8:	4b4b      	ldr	r3, [pc, #300]	; (7d8 <pvPortMalloc+0x148>)
     6aa:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     6ac:	4b4b      	ldr	r3, [pc, #300]	; (7dc <pvPortMalloc+0x14c>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	687a      	ldr	r2, [r7, #4]
     6b2:	4013      	ands	r3, r2
     6b4:	d000      	beq.n	6b8 <pvPortMalloc+0x28>
     6b6:	e079      	b.n	7ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d012      	beq.n	6e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
     6be:	2208      	movs	r2, #8
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	189b      	adds	r3, r3, r2
     6c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	2207      	movs	r2, #7
     6ca:	4013      	ands	r3, r2
     6cc:	d00a      	beq.n	6e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	2207      	movs	r2, #7
     6d2:	4393      	bics	r3, r2
     6d4:	3308      	adds	r3, #8
     6d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	2207      	movs	r2, #7
     6dc:	4013      	ands	r3, r2
     6de:	d001      	beq.n	6e4 <pvPortMalloc+0x54>
     6e0:	b672      	cpsid	i
     6e2:	e7fe      	b.n	6e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	2b00      	cmp	r3, #0
     6e8:	d060      	beq.n	7ac <pvPortMalloc+0x11c>
     6ea:	4b3d      	ldr	r3, [pc, #244]	; (7e0 <pvPortMalloc+0x150>)
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	687a      	ldr	r2, [r7, #4]
     6f0:	429a      	cmp	r2, r3
     6f2:	d85b      	bhi.n	7ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     6f4:	4b3b      	ldr	r3, [pc, #236]	; (7e4 <pvPortMalloc+0x154>)
     6f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
     6f8:	4b3a      	ldr	r3, [pc, #232]	; (7e4 <pvPortMalloc+0x154>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6fe:	e004      	b.n	70a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
     700:	697b      	ldr	r3, [r7, #20]
     702:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
     704:	697b      	ldr	r3, [r7, #20]
     706:	681b      	ldr	r3, [r3, #0]
     708:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     70a:	697b      	ldr	r3, [r7, #20]
     70c:	685a      	ldr	r2, [r3, #4]
     70e:	687b      	ldr	r3, [r7, #4]
     710:	429a      	cmp	r2, r3
     712:	d203      	bcs.n	71c <pvPortMalloc+0x8c>
     714:	697b      	ldr	r3, [r7, #20]
     716:	681b      	ldr	r3, [r3, #0]
     718:	2b00      	cmp	r3, #0
     71a:	d1f1      	bne.n	700 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     71c:	4b2d      	ldr	r3, [pc, #180]	; (7d4 <pvPortMalloc+0x144>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	697a      	ldr	r2, [r7, #20]
     722:	429a      	cmp	r2, r3
     724:	d042      	beq.n	7ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     726:	693b      	ldr	r3, [r7, #16]
     728:	681b      	ldr	r3, [r3, #0]
     72a:	2208      	movs	r2, #8
     72c:	189b      	adds	r3, r3, r2
     72e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     730:	697b      	ldr	r3, [r7, #20]
     732:	681a      	ldr	r2, [r3, #0]
     734:	693b      	ldr	r3, [r7, #16]
     736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     738:	697b      	ldr	r3, [r7, #20]
     73a:	685a      	ldr	r2, [r3, #4]
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	1ad2      	subs	r2, r2, r3
     740:	2308      	movs	r3, #8
     742:	005b      	lsls	r3, r3, #1
     744:	429a      	cmp	r2, r3
     746:	d916      	bls.n	776 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     748:	697a      	ldr	r2, [r7, #20]
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	18d3      	adds	r3, r2, r3
     74e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
     750:	68bb      	ldr	r3, [r7, #8]
     752:	2207      	movs	r2, #7
     754:	4013      	ands	r3, r2
     756:	d001      	beq.n	75c <pvPortMalloc+0xcc>
     758:	b672      	cpsid	i
     75a:	e7fe      	b.n	75a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     75c:	697b      	ldr	r3, [r7, #20]
     75e:	685a      	ldr	r2, [r3, #4]
     760:	687b      	ldr	r3, [r7, #4]
     762:	1ad2      	subs	r2, r2, r3
     764:	68bb      	ldr	r3, [r7, #8]
     766:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
     768:	697b      	ldr	r3, [r7, #20]
     76a:	687a      	ldr	r2, [r7, #4]
     76c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     76e:	68bb      	ldr	r3, [r7, #8]
     770:	0018      	movs	r0, r3
     772:	4b1d      	ldr	r3, [pc, #116]	; (7e8 <pvPortMalloc+0x158>)
     774:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     776:	4b1a      	ldr	r3, [pc, #104]	; (7e0 <pvPortMalloc+0x150>)
     778:	681a      	ldr	r2, [r3, #0]
     77a:	697b      	ldr	r3, [r7, #20]
     77c:	685b      	ldr	r3, [r3, #4]
     77e:	1ad2      	subs	r2, r2, r3
     780:	4b17      	ldr	r3, [pc, #92]	; (7e0 <pvPortMalloc+0x150>)
     782:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     784:	4b16      	ldr	r3, [pc, #88]	; (7e0 <pvPortMalloc+0x150>)
     786:	681a      	ldr	r2, [r3, #0]
     788:	4b18      	ldr	r3, [pc, #96]	; (7ec <pvPortMalloc+0x15c>)
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	429a      	cmp	r2, r3
     78e:	d203      	bcs.n	798 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     790:	4b13      	ldr	r3, [pc, #76]	; (7e0 <pvPortMalloc+0x150>)
     792:	681a      	ldr	r2, [r3, #0]
     794:	4b15      	ldr	r3, [pc, #84]	; (7ec <pvPortMalloc+0x15c>)
     796:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     798:	697b      	ldr	r3, [r7, #20]
     79a:	685a      	ldr	r2, [r3, #4]
     79c:	4b0f      	ldr	r3, [pc, #60]	; (7dc <pvPortMalloc+0x14c>)
     79e:	681b      	ldr	r3, [r3, #0]
     7a0:	431a      	orrs	r2, r3
     7a2:	697b      	ldr	r3, [r7, #20]
     7a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
     7a6:	697b      	ldr	r3, [r7, #20]
     7a8:	2200      	movs	r2, #0
     7aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     7ac:	4b10      	ldr	r3, [pc, #64]	; (7f0 <pvPortMalloc+0x160>)
     7ae:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d101      	bne.n	7ba <pvPortMalloc+0x12a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     7b6:	4b0f      	ldr	r3, [pc, #60]	; (7f4 <pvPortMalloc+0x164>)
     7b8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
     7ba:	68fb      	ldr	r3, [r7, #12]
     7bc:	2207      	movs	r2, #7
     7be:	4013      	ands	r3, r2
     7c0:	d001      	beq.n	7c6 <pvPortMalloc+0x136>
     7c2:	b672      	cpsid	i
     7c4:	e7fe      	b.n	7c4 <pvPortMalloc+0x134>
	return pvReturn;
     7c6:	68fb      	ldr	r3, [r7, #12]
}
     7c8:	0018      	movs	r0, r3
     7ca:	46bd      	mov	sp, r7
     7cc:	b006      	add	sp, #24
     7ce:	bd80      	pop	{r7, pc}
     7d0:	00001831 	.word	0x00001831
     7d4:	200042dc 	.word	0x200042dc
     7d8:	00000895 	.word	0x00000895
     7dc:	200042e8 	.word	0x200042e8
     7e0:	200042e0 	.word	0x200042e0
     7e4:	200042d4 	.word	0x200042d4
     7e8:	00000955 	.word	0x00000955
     7ec:	200042e4 	.word	0x200042e4
     7f0:	00001849 	.word	0x00001849
     7f4:	000028f1 	.word	0x000028f1

000007f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
     800:	687b      	ldr	r3, [r7, #4]
     802:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
     804:	687b      	ldr	r3, [r7, #4]
     806:	2b00      	cmp	r3, #0
     808:	d035      	beq.n	876 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
     80a:	2308      	movs	r3, #8
     80c:	425b      	negs	r3, r3
     80e:	68fa      	ldr	r2, [r7, #12]
     810:	18d3      	adds	r3, r2, r3
     812:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
     814:	68fb      	ldr	r3, [r7, #12]
     816:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
     818:	68bb      	ldr	r3, [r7, #8]
     81a:	685a      	ldr	r2, [r3, #4]
     81c:	4b18      	ldr	r3, [pc, #96]	; (880 <vPortFree+0x88>)
     81e:	681b      	ldr	r3, [r3, #0]
     820:	4013      	ands	r3, r2
     822:	d101      	bne.n	828 <vPortFree+0x30>
     824:	b672      	cpsid	i
     826:	e7fe      	b.n	826 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
     828:	68bb      	ldr	r3, [r7, #8]
     82a:	681b      	ldr	r3, [r3, #0]
     82c:	2b00      	cmp	r3, #0
     82e:	d001      	beq.n	834 <vPortFree+0x3c>
     830:	b672      	cpsid	i
     832:	e7fe      	b.n	832 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     834:	68bb      	ldr	r3, [r7, #8]
     836:	685a      	ldr	r2, [r3, #4]
     838:	4b11      	ldr	r3, [pc, #68]	; (880 <vPortFree+0x88>)
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	4013      	ands	r3, r2
     83e:	d01a      	beq.n	876 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     840:	68bb      	ldr	r3, [r7, #8]
     842:	681b      	ldr	r3, [r3, #0]
     844:	2b00      	cmp	r3, #0
     846:	d116      	bne.n	876 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     848:	68bb      	ldr	r3, [r7, #8]
     84a:	685a      	ldr	r2, [r3, #4]
     84c:	4b0c      	ldr	r3, [pc, #48]	; (880 <vPortFree+0x88>)
     84e:	681b      	ldr	r3, [r3, #0]
     850:	43db      	mvns	r3, r3
     852:	401a      	ands	r2, r3
     854:	68bb      	ldr	r3, [r7, #8]
     856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
     858:	4b0a      	ldr	r3, [pc, #40]	; (884 <vPortFree+0x8c>)
     85a:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     85c:	68bb      	ldr	r3, [r7, #8]
     85e:	685a      	ldr	r2, [r3, #4]
     860:	4b09      	ldr	r3, [pc, #36]	; (888 <vPortFree+0x90>)
     862:	681b      	ldr	r3, [r3, #0]
     864:	18d2      	adds	r2, r2, r3
     866:	4b08      	ldr	r3, [pc, #32]	; (888 <vPortFree+0x90>)
     868:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     86a:	68bb      	ldr	r3, [r7, #8]
     86c:	0018      	movs	r0, r3
     86e:	4b07      	ldr	r3, [pc, #28]	; (88c <vPortFree+0x94>)
     870:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
     872:	4b07      	ldr	r3, [pc, #28]	; (890 <vPortFree+0x98>)
     874:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     876:	46c0      	nop			; (mov r8, r8)
     878:	46bd      	mov	sp, r7
     87a:	b004      	add	sp, #16
     87c:	bd80      	pop	{r7, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	200042e8 	.word	0x200042e8
     884:	00001831 	.word	0x00001831
     888:	200042e0 	.word	0x200042e0
     88c:	00000955 	.word	0x00000955
     890:	00001849 	.word	0x00001849

00000894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     894:	b580      	push	{r7, lr}
     896:	b084      	sub	sp, #16
     898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
     89a:	23fa      	movs	r3, #250	; 0xfa
     89c:	019b      	lsls	r3, r3, #6
     89e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
     8a0:	4b26      	ldr	r3, [pc, #152]	; (93c <prvHeapInit+0xa8>)
     8a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
     8a4:	68fb      	ldr	r3, [r7, #12]
     8a6:	2207      	movs	r2, #7
     8a8:	4013      	ands	r3, r2
     8aa:	d00c      	beq.n	8c6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
     8ac:	68fb      	ldr	r3, [r7, #12]
     8ae:	3307      	adds	r3, #7
     8b0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	2207      	movs	r2, #7
     8b6:	4393      	bics	r3, r2
     8b8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
     8ba:	68ba      	ldr	r2, [r7, #8]
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	1ad2      	subs	r2, r2, r3
     8c0:	4b1e      	ldr	r3, [pc, #120]	; (93c <prvHeapInit+0xa8>)
     8c2:	18d3      	adds	r3, r2, r3
     8c4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
     8c6:	68fb      	ldr	r3, [r7, #12]
     8c8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8ca:	4b1d      	ldr	r3, [pc, #116]	; (940 <prvHeapInit+0xac>)
     8cc:	687a      	ldr	r2, [r7, #4]
     8ce:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
     8d0:	4b1b      	ldr	r3, [pc, #108]	; (940 <prvHeapInit+0xac>)
     8d2:	2200      	movs	r2, #0
     8d4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     8d6:	687a      	ldr	r2, [r7, #4]
     8d8:	68bb      	ldr	r3, [r7, #8]
     8da:	18d3      	adds	r3, r2, r3
     8dc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
     8de:	2208      	movs	r2, #8
     8e0:	68fb      	ldr	r3, [r7, #12]
     8e2:	1a9b      	subs	r3, r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
     8e6:	68fb      	ldr	r3, [r7, #12]
     8e8:	2207      	movs	r2, #7
     8ea:	4393      	bics	r3, r2
     8ec:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	4b14      	ldr	r3, [pc, #80]	; (944 <prvHeapInit+0xb0>)
     8f2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
     8f4:	4b13      	ldr	r3, [pc, #76]	; (944 <prvHeapInit+0xb0>)
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	2200      	movs	r2, #0
     8fa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
     8fc:	4b11      	ldr	r3, [pc, #68]	; (944 <prvHeapInit+0xb0>)
     8fe:	681b      	ldr	r3, [r3, #0]
     900:	2200      	movs	r2, #0
     902:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     904:	687b      	ldr	r3, [r7, #4]
     906:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     908:	683b      	ldr	r3, [r7, #0]
     90a:	68fa      	ldr	r2, [r7, #12]
     90c:	1ad2      	subs	r2, r2, r3
     90e:	683b      	ldr	r3, [r7, #0]
     910:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     912:	4b0c      	ldr	r3, [pc, #48]	; (944 <prvHeapInit+0xb0>)
     914:	681a      	ldr	r2, [r3, #0]
     916:	683b      	ldr	r3, [r7, #0]
     918:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     91a:	683b      	ldr	r3, [r7, #0]
     91c:	685a      	ldr	r2, [r3, #4]
     91e:	4b0a      	ldr	r3, [pc, #40]	; (948 <prvHeapInit+0xb4>)
     920:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     922:	683b      	ldr	r3, [r7, #0]
     924:	685a      	ldr	r2, [r3, #4]
     926:	4b09      	ldr	r3, [pc, #36]	; (94c <prvHeapInit+0xb8>)
     928:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     92a:	4b09      	ldr	r3, [pc, #36]	; (950 <prvHeapInit+0xbc>)
     92c:	2280      	movs	r2, #128	; 0x80
     92e:	0612      	lsls	r2, r2, #24
     930:	601a      	str	r2, [r3, #0]
}
     932:	46c0      	nop			; (mov r8, r8)
     934:	46bd      	mov	sp, r7
     936:	b004      	add	sp, #16
     938:	bd80      	pop	{r7, pc}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	20000454 	.word	0x20000454
     940:	200042d4 	.word	0x200042d4
     944:	200042dc 	.word	0x200042dc
     948:	200042e4 	.word	0x200042e4
     94c:	200042e0 	.word	0x200042e0
     950:	200042e8 	.word	0x200042e8

00000954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     954:	b580      	push	{r7, lr}
     956:	b084      	sub	sp, #16
     958:	af00      	add	r7, sp, #0
     95a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     95c:	4b27      	ldr	r3, [pc, #156]	; (9fc <prvInsertBlockIntoFreeList+0xa8>)
     95e:	60fb      	str	r3, [r7, #12]
     960:	e002      	b.n	968 <prvInsertBlockIntoFreeList+0x14>
     962:	68fb      	ldr	r3, [r7, #12]
     964:	681b      	ldr	r3, [r3, #0]
     966:	60fb      	str	r3, [r7, #12]
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	681a      	ldr	r2, [r3, #0]
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	429a      	cmp	r2, r3
     970:	d3f7      	bcc.n	962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
     972:	68fb      	ldr	r3, [r7, #12]
     974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     976:	68fb      	ldr	r3, [r7, #12]
     978:	685b      	ldr	r3, [r3, #4]
     97a:	68ba      	ldr	r2, [r7, #8]
     97c:	18d2      	adds	r2, r2, r3
     97e:	687b      	ldr	r3, [r7, #4]
     980:	429a      	cmp	r2, r3
     982:	d108      	bne.n	996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     984:	68fb      	ldr	r3, [r7, #12]
     986:	685a      	ldr	r2, [r3, #4]
     988:	687b      	ldr	r3, [r7, #4]
     98a:	685b      	ldr	r3, [r3, #4]
     98c:	18d2      	adds	r2, r2, r3
     98e:	68fb      	ldr	r3, [r7, #12]
     990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
     992:	68fb      	ldr	r3, [r7, #12]
     994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
     996:	687b      	ldr	r3, [r7, #4]
     998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	685b      	ldr	r3, [r3, #4]
     99e:	68ba      	ldr	r2, [r7, #8]
     9a0:	18d2      	adds	r2, r2, r3
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	429a      	cmp	r2, r3
     9a8:	d118      	bne.n	9dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	681a      	ldr	r2, [r3, #0]
     9ae:	4b14      	ldr	r3, [pc, #80]	; (a00 <prvInsertBlockIntoFreeList+0xac>)
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	429a      	cmp	r2, r3
     9b4:	d00d      	beq.n	9d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	685a      	ldr	r2, [r3, #4]
     9ba:	68fb      	ldr	r3, [r7, #12]
     9bc:	681b      	ldr	r3, [r3, #0]
     9be:	685b      	ldr	r3, [r3, #4]
     9c0:	18d2      	adds	r2, r2, r3
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	681b      	ldr	r3, [r3, #0]
     9ca:	681a      	ldr	r2, [r3, #0]
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	601a      	str	r2, [r3, #0]
     9d0:	e008      	b.n	9e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9d2:	4b0b      	ldr	r3, [pc, #44]	; (a00 <prvInsertBlockIntoFreeList+0xac>)
     9d4:	681a      	ldr	r2, [r3, #0]
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	601a      	str	r2, [r3, #0]
     9da:	e003      	b.n	9e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	681a      	ldr	r2, [r3, #0]
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     9e4:	68fa      	ldr	r2, [r7, #12]
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	429a      	cmp	r2, r3
     9ea:	d002      	beq.n	9f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9ec:	68fb      	ldr	r3, [r7, #12]
     9ee:	687a      	ldr	r2, [r7, #4]
     9f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	46bd      	mov	sp, r7
     9f6:	b004      	add	sp, #16
     9f8:	bd80      	pop	{r7, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	200042d4 	.word	0x200042d4
     a00:	200042dc 	.word	0x200042dc

00000a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     a04:	b580      	push	{r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
     a12:	68fb      	ldr	r3, [r7, #12]
     a14:	2b00      	cmp	r3, #0
     a16:	d101      	bne.n	a1c <xQueueGenericReset+0x18>
     a18:	b672      	cpsid	i
     a1a:	e7fe      	b.n	a1a <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
     a1c:	4b23      	ldr	r3, [pc, #140]	; (aac <xQueueGenericReset+0xa8>)
     a1e:	4798      	blx	r3
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	681a      	ldr	r2, [r3, #0]
     a24:	68fb      	ldr	r3, [r7, #12]
     a26:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
     a28:	68fb      	ldr	r3, [r7, #12]
     a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a2c:	434b      	muls	r3, r1
     a2e:	18d2      	adds	r2, r2, r3
     a30:	68fb      	ldr	r3, [r7, #12]
     a32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	2200      	movs	r2, #0
     a38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     a3a:	68fb      	ldr	r3, [r7, #12]
     a3c:	681a      	ldr	r2, [r3, #0]
     a3e:	68fb      	ldr	r3, [r7, #12]
     a40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	681a      	ldr	r2, [r3, #0]
     a46:	68fb      	ldr	r3, [r7, #12]
     a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     a4a:	1e59      	subs	r1, r3, #1
     a4c:	68fb      	ldr	r3, [r7, #12]
     a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a50:	434b      	muls	r3, r1
     a52:	18d2      	adds	r2, r2, r3
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     a58:	68fb      	ldr	r3, [r7, #12]
     a5a:	2244      	movs	r2, #68	; 0x44
     a5c:	21ff      	movs	r1, #255	; 0xff
     a5e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	2245      	movs	r2, #69	; 0x45
     a64:	21ff      	movs	r1, #255	; 0xff
     a66:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
     a68:	683b      	ldr	r3, [r7, #0]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d10d      	bne.n	a8a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	691b      	ldr	r3, [r3, #16]
     a72:	2b00      	cmp	r3, #0
     a74:	d013      	beq.n	a9e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	3310      	adds	r3, #16
     a7a:	0018      	movs	r0, r3
     a7c:	4b0c      	ldr	r3, [pc, #48]	; (ab0 <xQueueGenericReset+0xac>)
     a7e:	4798      	blx	r3
     a80:	1e03      	subs	r3, r0, #0
     a82:	d00c      	beq.n	a9e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
     a84:	4b0b      	ldr	r3, [pc, #44]	; (ab4 <xQueueGenericReset+0xb0>)
     a86:	4798      	blx	r3
     a88:	e009      	b.n	a9e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     a8a:	68fb      	ldr	r3, [r7, #12]
     a8c:	3310      	adds	r3, #16
     a8e:	0018      	movs	r0, r3
     a90:	4b09      	ldr	r3, [pc, #36]	; (ab8 <xQueueGenericReset+0xb4>)
     a92:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	3324      	adds	r3, #36	; 0x24
     a98:	0018      	movs	r0, r3
     a9a:	4b07      	ldr	r3, [pc, #28]	; (ab8 <xQueueGenericReset+0xb4>)
     a9c:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
     a9e:	4b07      	ldr	r3, [pc, #28]	; (abc <xQueueGenericReset+0xb8>)
     aa0:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
     aa2:	2301      	movs	r3, #1
}
     aa4:	0018      	movs	r0, r3
     aa6:	46bd      	mov	sp, r7
     aa8:	b004      	add	sp, #16
     aaa:	bd80      	pop	{r7, pc}
     aac:	00000551 	.word	0x00000551
     ab0:	00001d05 	.word	0x00001d05
     ab4:	00000531 	.word	0x00000531
     ab8:	000002cd 	.word	0x000002cd
     abc:	00000575 	.word	0x00000575

00000ac0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     ac0:	b590      	push	{r4, r7, lr}
     ac2:	b08b      	sub	sp, #44	; 0x2c
     ac4:	af02      	add	r7, sp, #8
     ac6:	60f8      	str	r0, [r7, #12]
     ac8:	60b9      	str	r1, [r7, #8]
     aca:	1dfb      	adds	r3, r7, #7
     acc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     ace:	68fb      	ldr	r3, [r7, #12]
     ad0:	2b00      	cmp	r3, #0
     ad2:	d101      	bne.n	ad8 <xQueueGenericCreate+0x18>
     ad4:	b672      	cpsid	i
     ad6:	e7fe      	b.n	ad6 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
     ad8:	68bb      	ldr	r3, [r7, #8]
     ada:	2b00      	cmp	r3, #0
     adc:	d102      	bne.n	ae4 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     ade:	2300      	movs	r3, #0
     ae0:	61fb      	str	r3, [r7, #28]
     ae2:	e003      	b.n	aec <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ae4:	68fb      	ldr	r3, [r7, #12]
     ae6:	68ba      	ldr	r2, [r7, #8]
     ae8:	4353      	muls	r3, r2
     aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
     aec:	69fb      	ldr	r3, [r7, #28]
     aee:	3354      	adds	r3, #84	; 0x54
     af0:	0018      	movs	r0, r3
     af2:	4b0d      	ldr	r3, [pc, #52]	; (b28 <xQueueGenericCreate+0x68>)
     af4:	4798      	blx	r3
     af6:	0003      	movs	r3, r0
     af8:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
     afa:	69bb      	ldr	r3, [r7, #24]
     afc:	2b00      	cmp	r3, #0
     afe:	d00e      	beq.n	b1e <xQueueGenericCreate+0x5e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
     b00:	69bb      	ldr	r3, [r7, #24]
     b02:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
     b04:	697b      	ldr	r3, [r7, #20]
     b06:	3354      	adds	r3, #84	; 0x54
     b08:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
     b0a:	1dfb      	adds	r3, r7, #7
     b0c:	781c      	ldrb	r4, [r3, #0]
     b0e:	697a      	ldr	r2, [r7, #20]
     b10:	68b9      	ldr	r1, [r7, #8]
     b12:	68f8      	ldr	r0, [r7, #12]
     b14:	69bb      	ldr	r3, [r7, #24]
     b16:	9300      	str	r3, [sp, #0]
     b18:	0023      	movs	r3, r4
     b1a:	4c04      	ldr	r4, [pc, #16]	; (b2c <xQueueGenericCreate+0x6c>)
     b1c:	47a0      	blx	r4
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
     b1e:	69bb      	ldr	r3, [r7, #24]
	}
     b20:	0018      	movs	r0, r3
     b22:	46bd      	mov	sp, r7
     b24:	b009      	add	sp, #36	; 0x24
     b26:	bd90      	pop	{r4, r7, pc}
     b28:	00000691 	.word	0x00000691
     b2c:	00000b31 	.word	0x00000b31

00000b30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
     b30:	b580      	push	{r7, lr}
     b32:	b084      	sub	sp, #16
     b34:	af00      	add	r7, sp, #0
     b36:	60f8      	str	r0, [r7, #12]
     b38:	60b9      	str	r1, [r7, #8]
     b3a:	607a      	str	r2, [r7, #4]
     b3c:	001a      	movs	r2, r3
     b3e:	1cfb      	adds	r3, r7, #3
     b40:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     b42:	68bb      	ldr	r3, [r7, #8]
     b44:	2b00      	cmp	r3, #0
     b46:	d103      	bne.n	b50 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     b48:	69bb      	ldr	r3, [r7, #24]
     b4a:	69ba      	ldr	r2, [r7, #24]
     b4c:	601a      	str	r2, [r3, #0]
     b4e:	e002      	b.n	b56 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     b50:	69bb      	ldr	r3, [r7, #24]
     b52:	687a      	ldr	r2, [r7, #4]
     b54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     b56:	69bb      	ldr	r3, [r7, #24]
     b58:	68fa      	ldr	r2, [r7, #12]
     b5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     b5c:	69bb      	ldr	r3, [r7, #24]
     b5e:	68ba      	ldr	r2, [r7, #8]
     b60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     b62:	69bb      	ldr	r3, [r7, #24]
     b64:	2101      	movs	r1, #1
     b66:	0018      	movs	r0, r3
     b68:	4b06      	ldr	r3, [pc, #24]	; (b84 <prvInitialiseNewQueue+0x54>)
     b6a:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
     b6c:	69bb      	ldr	r3, [r7, #24]
     b6e:	1cfa      	adds	r2, r7, #3
     b70:	2150      	movs	r1, #80	; 0x50
     b72:	7812      	ldrb	r2, [r2, #0]
     b74:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
     b76:	69bb      	ldr	r3, [r7, #24]
     b78:	2200      	movs	r2, #0
     b7a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
     b7c:	46c0      	nop			; (mov r8, r8)
     b7e:	46bd      	mov	sp, r7
     b80:	b004      	add	sp, #16
     b82:	bd80      	pop	{r7, pc}
     b84:	00000a05 	.word	0x00000a05

00000b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     b88:	b580      	push	{r7, lr}
     b8a:	b08a      	sub	sp, #40	; 0x28
     b8c:	af00      	add	r7, sp, #0
     b8e:	60f8      	str	r0, [r7, #12]
     b90:	60b9      	str	r1, [r7, #8]
     b92:	607a      	str	r2, [r7, #4]
     b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     b96:	2300      	movs	r3, #0
     b98:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
     b9e:	6a3b      	ldr	r3, [r7, #32]
     ba0:	2b00      	cmp	r3, #0
     ba2:	d101      	bne.n	ba8 <xQueueGenericSend+0x20>
     ba4:	b672      	cpsid	i
     ba6:	e7fe      	b.n	ba6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     ba8:	68bb      	ldr	r3, [r7, #8]
     baa:	2b00      	cmp	r3, #0
     bac:	d103      	bne.n	bb6 <xQueueGenericSend+0x2e>
     bae:	6a3b      	ldr	r3, [r7, #32]
     bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     bb2:	2b00      	cmp	r3, #0
     bb4:	d101      	bne.n	bba <xQueueGenericSend+0x32>
     bb6:	2301      	movs	r3, #1
     bb8:	e000      	b.n	bbc <xQueueGenericSend+0x34>
     bba:	2300      	movs	r3, #0
     bbc:	2b00      	cmp	r3, #0
     bbe:	d101      	bne.n	bc4 <xQueueGenericSend+0x3c>
     bc0:	b672      	cpsid	i
     bc2:	e7fe      	b.n	bc2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     bc4:	683b      	ldr	r3, [r7, #0]
     bc6:	2b02      	cmp	r3, #2
     bc8:	d103      	bne.n	bd2 <xQueueGenericSend+0x4a>
     bca:	6a3b      	ldr	r3, [r7, #32]
     bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     bce:	2b01      	cmp	r3, #1
     bd0:	d101      	bne.n	bd6 <xQueueGenericSend+0x4e>
     bd2:	2301      	movs	r3, #1
     bd4:	e000      	b.n	bd8 <xQueueGenericSend+0x50>
     bd6:	2300      	movs	r3, #0
     bd8:	2b00      	cmp	r3, #0
     bda:	d101      	bne.n	be0 <xQueueGenericSend+0x58>
     bdc:	b672      	cpsid	i
     bde:	e7fe      	b.n	bde <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     be0:	4b58      	ldr	r3, [pc, #352]	; (d44 <xQueueGenericSend+0x1bc>)
     be2:	4798      	blx	r3
     be4:	1e03      	subs	r3, r0, #0
     be6:	d102      	bne.n	bee <xQueueGenericSend+0x66>
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	2b00      	cmp	r3, #0
     bec:	d101      	bne.n	bf2 <xQueueGenericSend+0x6a>
     bee:	2301      	movs	r3, #1
     bf0:	e000      	b.n	bf4 <xQueueGenericSend+0x6c>
     bf2:	2300      	movs	r3, #0
     bf4:	2b00      	cmp	r3, #0
     bf6:	d101      	bne.n	bfc <xQueueGenericSend+0x74>
     bf8:	b672      	cpsid	i
     bfa:	e7fe      	b.n	bfa <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     bfc:	4b52      	ldr	r3, [pc, #328]	; (d48 <xQueueGenericSend+0x1c0>)
     bfe:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     c00:	6a3b      	ldr	r3, [r7, #32]
     c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     c04:	6a3b      	ldr	r3, [r7, #32]
     c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     c08:	429a      	cmp	r2, r3
     c0a:	d302      	bcc.n	c12 <xQueueGenericSend+0x8a>
     c0c:	683b      	ldr	r3, [r7, #0]
     c0e:	2b02      	cmp	r3, #2
     c10:	d136      	bne.n	c80 <xQueueGenericSend+0xf8>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
     c12:	6a3b      	ldr	r3, [r7, #32]
     c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     c16:	61fb      	str	r3, [r7, #28]

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     c18:	683a      	ldr	r2, [r7, #0]
     c1a:	68b9      	ldr	r1, [r7, #8]
     c1c:	6a3b      	ldr	r3, [r7, #32]
     c1e:	0018      	movs	r0, r3
     c20:	4b4a      	ldr	r3, [pc, #296]	; (d4c <xQueueGenericSend+0x1c4>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	61bb      	str	r3, [r7, #24]

					if( pxQueue->pxQueueSetContainer != NULL )
     c28:	6a3b      	ldr	r3, [r7, #32]
     c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     c2c:	2b00      	cmp	r3, #0
     c2e:	d010      	beq.n	c52 <xQueueGenericSend+0xca>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
     c30:	683b      	ldr	r3, [r7, #0]
     c32:	2b02      	cmp	r3, #2
     c34:	d102      	bne.n	c3c <xQueueGenericSend+0xb4>
     c36:	69fb      	ldr	r3, [r7, #28]
     c38:	2b00      	cmp	r3, #0
     c3a:	d11d      	bne.n	c78 <xQueueGenericSend+0xf0>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     c3c:	683a      	ldr	r2, [r7, #0]
     c3e:	6a3b      	ldr	r3, [r7, #32]
     c40:	0011      	movs	r1, r2
     c42:	0018      	movs	r0, r3
     c44:	4b42      	ldr	r3, [pc, #264]	; (d50 <xQueueGenericSend+0x1c8>)
     c46:	4798      	blx	r3
     c48:	1e03      	subs	r3, r0, #0
     c4a:	d015      	beq.n	c78 <xQueueGenericSend+0xf0>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
     c4c:	4b41      	ldr	r3, [pc, #260]	; (d54 <xQueueGenericSend+0x1cc>)
     c4e:	4798      	blx	r3
     c50:	e012      	b.n	c78 <xQueueGenericSend+0xf0>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     c52:	6a3b      	ldr	r3, [r7, #32]
     c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <xQueueGenericSend+0xe6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     c5a:	6a3b      	ldr	r3, [r7, #32]
     c5c:	3324      	adds	r3, #36	; 0x24
     c5e:	0018      	movs	r0, r3
     c60:	4b3d      	ldr	r3, [pc, #244]	; (d58 <xQueueGenericSend+0x1d0>)
     c62:	4798      	blx	r3
     c64:	1e03      	subs	r3, r0, #0
     c66:	d007      	beq.n	c78 <xQueueGenericSend+0xf0>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
     c68:	4b3a      	ldr	r3, [pc, #232]	; (d54 <xQueueGenericSend+0x1cc>)
     c6a:	4798      	blx	r3
     c6c:	e004      	b.n	c78 <xQueueGenericSend+0xf0>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
     c6e:	69bb      	ldr	r3, [r7, #24]
     c70:	2b00      	cmp	r3, #0
     c72:	d001      	beq.n	c78 <xQueueGenericSend+0xf0>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
     c74:	4b37      	ldr	r3, [pc, #220]	; (d54 <xQueueGenericSend+0x1cc>)
     c76:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     c78:	4b38      	ldr	r3, [pc, #224]	; (d5c <xQueueGenericSend+0x1d4>)
     c7a:	4798      	blx	r3
				return pdPASS;
     c7c:	2301      	movs	r3, #1
     c7e:	e05c      	b.n	d3a <xQueueGenericSend+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	2b00      	cmp	r3, #0
     c84:	d103      	bne.n	c8e <xQueueGenericSend+0x106>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     c86:	4b35      	ldr	r3, [pc, #212]	; (d5c <xQueueGenericSend+0x1d4>)
     c88:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     c8a:	2300      	movs	r3, #0
     c8c:	e055      	b.n	d3a <xQueueGenericSend+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
     c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c90:	2b00      	cmp	r3, #0
     c92:	d106      	bne.n	ca2 <xQueueGenericSend+0x11a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
     c94:	2310      	movs	r3, #16
     c96:	18fb      	adds	r3, r7, r3
     c98:	0018      	movs	r0, r3
     c9a:	4b31      	ldr	r3, [pc, #196]	; (d60 <xQueueGenericSend+0x1d8>)
     c9c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     c9e:	2301      	movs	r3, #1
     ca0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     ca2:	4b2e      	ldr	r3, [pc, #184]	; (d5c <xQueueGenericSend+0x1d4>)
     ca4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     ca6:	4b2f      	ldr	r3, [pc, #188]	; (d64 <xQueueGenericSend+0x1dc>)
     ca8:	4798      	blx	r3
		prvLockQueue( pxQueue );
     caa:	4b27      	ldr	r3, [pc, #156]	; (d48 <xQueueGenericSend+0x1c0>)
     cac:	4798      	blx	r3
     cae:	6a3b      	ldr	r3, [r7, #32]
     cb0:	2244      	movs	r2, #68	; 0x44
     cb2:	5c9b      	ldrb	r3, [r3, r2]
     cb4:	b25b      	sxtb	r3, r3
     cb6:	3301      	adds	r3, #1
     cb8:	d103      	bne.n	cc2 <xQueueGenericSend+0x13a>
     cba:	6a3b      	ldr	r3, [r7, #32]
     cbc:	2244      	movs	r2, #68	; 0x44
     cbe:	2100      	movs	r1, #0
     cc0:	5499      	strb	r1, [r3, r2]
     cc2:	6a3b      	ldr	r3, [r7, #32]
     cc4:	2245      	movs	r2, #69	; 0x45
     cc6:	5c9b      	ldrb	r3, [r3, r2]
     cc8:	b25b      	sxtb	r3, r3
     cca:	3301      	adds	r3, #1
     ccc:	d103      	bne.n	cd6 <xQueueGenericSend+0x14e>
     cce:	6a3b      	ldr	r3, [r7, #32]
     cd0:	2245      	movs	r2, #69	; 0x45
     cd2:	2100      	movs	r1, #0
     cd4:	5499      	strb	r1, [r3, r2]
     cd6:	4b21      	ldr	r3, [pc, #132]	; (d5c <xQueueGenericSend+0x1d4>)
     cd8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     cda:	1d3a      	adds	r2, r7, #4
     cdc:	2310      	movs	r3, #16
     cde:	18fb      	adds	r3, r7, r3
     ce0:	0011      	movs	r1, r2
     ce2:	0018      	movs	r0, r3
     ce4:	4b20      	ldr	r3, [pc, #128]	; (d68 <xQueueGenericSend+0x1e0>)
     ce6:	4798      	blx	r3
     ce8:	1e03      	subs	r3, r0, #0
     cea:	d11f      	bne.n	d2c <xQueueGenericSend+0x1a4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     cec:	6a3b      	ldr	r3, [r7, #32]
     cee:	0018      	movs	r0, r3
     cf0:	4b1e      	ldr	r3, [pc, #120]	; (d6c <xQueueGenericSend+0x1e4>)
     cf2:	4798      	blx	r3
     cf4:	1e03      	subs	r3, r0, #0
     cf6:	d012      	beq.n	d1e <xQueueGenericSend+0x196>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     cf8:	6a3b      	ldr	r3, [r7, #32]
     cfa:	3310      	adds	r3, #16
     cfc:	687a      	ldr	r2, [r7, #4]
     cfe:	0011      	movs	r1, r2
     d00:	0018      	movs	r0, r3
     d02:	4b1b      	ldr	r3, [pc, #108]	; (d70 <xQueueGenericSend+0x1e8>)
     d04:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     d06:	6a3b      	ldr	r3, [r7, #32]
     d08:	0018      	movs	r0, r3
     d0a:	4b1a      	ldr	r3, [pc, #104]	; (d74 <xQueueGenericSend+0x1ec>)
     d0c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     d0e:	4b1a      	ldr	r3, [pc, #104]	; (d78 <xQueueGenericSend+0x1f0>)
     d10:	4798      	blx	r3
     d12:	1e03      	subs	r3, r0, #0
     d14:	d000      	beq.n	d18 <xQueueGenericSend+0x190>
     d16:	e771      	b.n	bfc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
     d18:	4b0e      	ldr	r3, [pc, #56]	; (d54 <xQueueGenericSend+0x1cc>)
     d1a:	4798      	blx	r3
     d1c:	e76e      	b.n	bfc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     d1e:	6a3b      	ldr	r3, [r7, #32]
     d20:	0018      	movs	r0, r3
     d22:	4b14      	ldr	r3, [pc, #80]	; (d74 <xQueueGenericSend+0x1ec>)
     d24:	4798      	blx	r3
				( void ) xTaskResumeAll();
     d26:	4b14      	ldr	r3, [pc, #80]	; (d78 <xQueueGenericSend+0x1f0>)
     d28:	4798      	blx	r3
     d2a:	e767      	b.n	bfc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     d2c:	6a3b      	ldr	r3, [r7, #32]
     d2e:	0018      	movs	r0, r3
     d30:	4b10      	ldr	r3, [pc, #64]	; (d74 <xQueueGenericSend+0x1ec>)
     d32:	4798      	blx	r3
			( void ) xTaskResumeAll();
     d34:	4b10      	ldr	r3, [pc, #64]	; (d78 <xQueueGenericSend+0x1f0>)
     d36:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     d38:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
     d3a:	0018      	movs	r0, r3
     d3c:	46bd      	mov	sp, r7
     d3e:	b00a      	add	sp, #40	; 0x28
     d40:	bd80      	pop	{r7, pc}
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	00002031 	.word	0x00002031
     d48:	00000551 	.word	0x00000551
     d4c:	0000103d 	.word	0x0000103d
     d50:	00001391 	.word	0x00001391
     d54:	00000531 	.word	0x00000531
     d58:	00001d05 	.word	0x00001d05
     d5c:	00000575 	.word	0x00000575
     d60:	00001dc5 	.word	0x00001dc5
     d64:	00001831 	.word	0x00001831
     d68:	00001ded 	.word	0x00001ded
     d6c:	00001291 	.word	0x00001291
     d70:	00001c6d 	.word	0x00001c6d
     d74:	0000116d 	.word	0x0000116d
     d78:	00001849 	.word	0x00001849

00000d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     d7c:	b580      	push	{r7, lr}
     d7e:	b088      	sub	sp, #32
     d80:	af00      	add	r7, sp, #0
     d82:	60f8      	str	r0, [r7, #12]
     d84:	60b9      	str	r1, [r7, #8]
     d86:	607a      	str	r2, [r7, #4]
     d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
     d8e:	69bb      	ldr	r3, [r7, #24]
     d90:	2b00      	cmp	r3, #0
     d92:	d101      	bne.n	d98 <xQueueGenericSendFromISR+0x1c>
     d94:	b672      	cpsid	i
     d96:	e7fe      	b.n	d96 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     d98:	68bb      	ldr	r3, [r7, #8]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d103      	bne.n	da6 <xQueueGenericSendFromISR+0x2a>
     d9e:	69bb      	ldr	r3, [r7, #24]
     da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     da2:	2b00      	cmp	r3, #0
     da4:	d101      	bne.n	daa <xQueueGenericSendFromISR+0x2e>
     da6:	2301      	movs	r3, #1
     da8:	e000      	b.n	dac <xQueueGenericSendFromISR+0x30>
     daa:	2300      	movs	r3, #0
     dac:	2b00      	cmp	r3, #0
     dae:	d101      	bne.n	db4 <xQueueGenericSendFromISR+0x38>
     db0:	b672      	cpsid	i
     db2:	e7fe      	b.n	db2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	2b02      	cmp	r3, #2
     db8:	d103      	bne.n	dc2 <xQueueGenericSendFromISR+0x46>
     dba:	69bb      	ldr	r3, [r7, #24]
     dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     dbe:	2b01      	cmp	r3, #1
     dc0:	d101      	bne.n	dc6 <xQueueGenericSendFromISR+0x4a>
     dc2:	2301      	movs	r3, #1
     dc4:	e000      	b.n	dc8 <xQueueGenericSendFromISR+0x4c>
     dc6:	2300      	movs	r3, #0
     dc8:	2b00      	cmp	r3, #0
     dca:	d101      	bne.n	dd0 <xQueueGenericSendFromISR+0x54>
     dcc:	b672      	cpsid	i
     dce:	e7fe      	b.n	dce <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     dd0:	4b2d      	ldr	r3, [pc, #180]	; (e88 <xQueueGenericSendFromISR+0x10c>)
     dd2:	4798      	blx	r3
     dd4:	0003      	movs	r3, r0
     dd6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     dd8:	69bb      	ldr	r3, [r7, #24]
     dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     ddc:	69bb      	ldr	r3, [r7, #24]
     dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     de0:	429a      	cmp	r2, r3
     de2:	d302      	bcc.n	dea <xQueueGenericSendFromISR+0x6e>
     de4:	683b      	ldr	r3, [r7, #0]
     de6:	2b02      	cmp	r3, #2
     de8:	d142      	bne.n	e70 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
     dea:	2313      	movs	r3, #19
     dec:	18fb      	adds	r3, r7, r3
     dee:	69ba      	ldr	r2, [r7, #24]
     df0:	2145      	movs	r1, #69	; 0x45
     df2:	5c52      	ldrb	r2, [r2, r1]
     df4:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     df6:	683a      	ldr	r2, [r7, #0]
     df8:	68b9      	ldr	r1, [r7, #8]
     dfa:	69bb      	ldr	r3, [r7, #24]
     dfc:	0018      	movs	r0, r3
     dfe:	4b23      	ldr	r3, [pc, #140]	; (e8c <xQueueGenericSendFromISR+0x110>)
     e00:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
     e02:	2313      	movs	r3, #19
     e04:	18fb      	adds	r3, r7, r3
     e06:	781b      	ldrb	r3, [r3, #0]
     e08:	b25b      	sxtb	r3, r3
     e0a:	3301      	adds	r3, #1
     e0c:	d124      	bne.n	e58 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     e0e:	69bb      	ldr	r3, [r7, #24]
     e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     e12:	2b00      	cmp	r3, #0
     e14:	d00e      	beq.n	e34 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     e16:	683a      	ldr	r2, [r7, #0]
     e18:	69bb      	ldr	r3, [r7, #24]
     e1a:	0011      	movs	r1, r2
     e1c:	0018      	movs	r0, r3
     e1e:	4b1c      	ldr	r3, [pc, #112]	; (e90 <xQueueGenericSendFromISR+0x114>)
     e20:	4798      	blx	r3
     e22:	1e03      	subs	r3, r0, #0
     e24:	d021      	beq.n	e6a <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	2b00      	cmp	r3, #0
     e2a:	d01e      	beq.n	e6a <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	2201      	movs	r2, #1
     e30:	601a      	str	r2, [r3, #0]
     e32:	e01a      	b.n	e6a <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e34:	69bb      	ldr	r3, [r7, #24]
     e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e38:	2b00      	cmp	r3, #0
     e3a:	d016      	beq.n	e6a <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e3c:	69bb      	ldr	r3, [r7, #24]
     e3e:	3324      	adds	r3, #36	; 0x24
     e40:	0018      	movs	r0, r3
     e42:	4b14      	ldr	r3, [pc, #80]	; (e94 <xQueueGenericSendFromISR+0x118>)
     e44:	4798      	blx	r3
     e46:	1e03      	subs	r3, r0, #0
     e48:	d00f      	beq.n	e6a <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d00c      	beq.n	e6a <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	2201      	movs	r2, #1
     e54:	601a      	str	r2, [r3, #0]
     e56:	e008      	b.n	e6a <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     e58:	2313      	movs	r3, #19
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	3301      	adds	r3, #1
     e60:	b2db      	uxtb	r3, r3
     e62:	b259      	sxtb	r1, r3
     e64:	69bb      	ldr	r3, [r7, #24]
     e66:	2245      	movs	r2, #69	; 0x45
     e68:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
     e6a:	2301      	movs	r3, #1
     e6c:	61fb      	str	r3, [r7, #28]
		{
     e6e:	e001      	b.n	e74 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     e70:	2300      	movs	r3, #0
     e72:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     e74:	697b      	ldr	r3, [r7, #20]
     e76:	0018      	movs	r0, r3
     e78:	4b07      	ldr	r3, [pc, #28]	; (e98 <xQueueGenericSendFromISR+0x11c>)
     e7a:	4798      	blx	r3

	return xReturn;
     e7c:	69fb      	ldr	r3, [r7, #28]
}
     e7e:	0018      	movs	r0, r3
     e80:	46bd      	mov	sp, r7
     e82:	b008      	add	sp, #32
     e84:	bd80      	pop	{r7, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	000005a5 	.word	0x000005a5
     e8c:	0000103d 	.word	0x0000103d
     e90:	00001391 	.word	0x00001391
     e94:	00001d05 	.word	0x00001d05
     e98:	000005b1 	.word	0x000005b1

00000e9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b08a      	sub	sp, #40	; 0x28
     ea0:	af00      	add	r7, sp, #0
     ea2:	60f8      	str	r0, [r7, #12]
     ea4:	60b9      	str	r1, [r7, #8]
     ea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
     ea8:	2300      	movs	r3, #0
     eaa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
     eb0:	6a3b      	ldr	r3, [r7, #32]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d101      	bne.n	eba <xQueueReceive+0x1e>
     eb6:	b672      	cpsid	i
     eb8:	e7fe      	b.n	eb8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     eba:	68bb      	ldr	r3, [r7, #8]
     ebc:	2b00      	cmp	r3, #0
     ebe:	d103      	bne.n	ec8 <xQueueReceive+0x2c>
     ec0:	6a3b      	ldr	r3, [r7, #32]
     ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     ec4:	2b00      	cmp	r3, #0
     ec6:	d101      	bne.n	ecc <xQueueReceive+0x30>
     ec8:	2301      	movs	r3, #1
     eca:	e000      	b.n	ece <xQueueReceive+0x32>
     ecc:	2300      	movs	r3, #0
     ece:	2b00      	cmp	r3, #0
     ed0:	d101      	bne.n	ed6 <xQueueReceive+0x3a>
     ed2:	b672      	cpsid	i
     ed4:	e7fe      	b.n	ed4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     ed6:	4b4c      	ldr	r3, [pc, #304]	; (1008 <xQueueReceive+0x16c>)
     ed8:	4798      	blx	r3
     eda:	1e03      	subs	r3, r0, #0
     edc:	d102      	bne.n	ee4 <xQueueReceive+0x48>
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d101      	bne.n	ee8 <xQueueReceive+0x4c>
     ee4:	2301      	movs	r3, #1
     ee6:	e000      	b.n	eea <xQueueReceive+0x4e>
     ee8:	2300      	movs	r3, #0
     eea:	2b00      	cmp	r3, #0
     eec:	d101      	bne.n	ef2 <xQueueReceive+0x56>
     eee:	b672      	cpsid	i
     ef0:	e7fe      	b.n	ef0 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     ef2:	4b46      	ldr	r3, [pc, #280]	; (100c <xQueueReceive+0x170>)
     ef4:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     ef6:	6a3b      	ldr	r3, [r7, #32]
     ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     efa:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     efc:	69fb      	ldr	r3, [r7, #28]
     efe:	2b00      	cmp	r3, #0
     f00:	d01a      	beq.n	f38 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     f02:	68ba      	ldr	r2, [r7, #8]
     f04:	6a3b      	ldr	r3, [r7, #32]
     f06:	0011      	movs	r1, r2
     f08:	0018      	movs	r0, r3
     f0a:	4b41      	ldr	r3, [pc, #260]	; (1010 <xQueueReceive+0x174>)
     f0c:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     f0e:	69fb      	ldr	r3, [r7, #28]
     f10:	1e5a      	subs	r2, r3, #1
     f12:	6a3b      	ldr	r3, [r7, #32]
     f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     f16:	6a3b      	ldr	r3, [r7, #32]
     f18:	691b      	ldr	r3, [r3, #16]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d008      	beq.n	f30 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     f1e:	6a3b      	ldr	r3, [r7, #32]
     f20:	3310      	adds	r3, #16
     f22:	0018      	movs	r0, r3
     f24:	4b3b      	ldr	r3, [pc, #236]	; (1014 <xQueueReceive+0x178>)
     f26:	4798      	blx	r3
     f28:	1e03      	subs	r3, r0, #0
     f2a:	d001      	beq.n	f30 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
     f2c:	4b3a      	ldr	r3, [pc, #232]	; (1018 <xQueueReceive+0x17c>)
     f2e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
     f30:	4b3a      	ldr	r3, [pc, #232]	; (101c <xQueueReceive+0x180>)
     f32:	4798      	blx	r3
				return pdPASS;
     f34:	2301      	movs	r3, #1
     f36:	e062      	b.n	ffe <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d103      	bne.n	f46 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     f3e:	4b37      	ldr	r3, [pc, #220]	; (101c <xQueueReceive+0x180>)
     f40:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     f42:	2300      	movs	r3, #0
     f44:	e05b      	b.n	ffe <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
     f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f48:	2b00      	cmp	r3, #0
     f4a:	d106      	bne.n	f5a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
     f4c:	2314      	movs	r3, #20
     f4e:	18fb      	adds	r3, r7, r3
     f50:	0018      	movs	r0, r3
     f52:	4b33      	ldr	r3, [pc, #204]	; (1020 <xQueueReceive+0x184>)
     f54:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     f56:	2301      	movs	r3, #1
     f58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     f5a:	4b30      	ldr	r3, [pc, #192]	; (101c <xQueueReceive+0x180>)
     f5c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     f5e:	4b31      	ldr	r3, [pc, #196]	; (1024 <xQueueReceive+0x188>)
     f60:	4798      	blx	r3
		prvLockQueue( pxQueue );
     f62:	4b2a      	ldr	r3, [pc, #168]	; (100c <xQueueReceive+0x170>)
     f64:	4798      	blx	r3
     f66:	6a3b      	ldr	r3, [r7, #32]
     f68:	2244      	movs	r2, #68	; 0x44
     f6a:	5c9b      	ldrb	r3, [r3, r2]
     f6c:	b25b      	sxtb	r3, r3
     f6e:	3301      	adds	r3, #1
     f70:	d103      	bne.n	f7a <xQueueReceive+0xde>
     f72:	6a3b      	ldr	r3, [r7, #32]
     f74:	2244      	movs	r2, #68	; 0x44
     f76:	2100      	movs	r1, #0
     f78:	5499      	strb	r1, [r3, r2]
     f7a:	6a3b      	ldr	r3, [r7, #32]
     f7c:	2245      	movs	r2, #69	; 0x45
     f7e:	5c9b      	ldrb	r3, [r3, r2]
     f80:	b25b      	sxtb	r3, r3
     f82:	3301      	adds	r3, #1
     f84:	d103      	bne.n	f8e <xQueueReceive+0xf2>
     f86:	6a3b      	ldr	r3, [r7, #32]
     f88:	2245      	movs	r2, #69	; 0x45
     f8a:	2100      	movs	r1, #0
     f8c:	5499      	strb	r1, [r3, r2]
     f8e:	4b23      	ldr	r3, [pc, #140]	; (101c <xQueueReceive+0x180>)
     f90:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f92:	1d3a      	adds	r2, r7, #4
     f94:	2314      	movs	r3, #20
     f96:	18fb      	adds	r3, r7, r3
     f98:	0011      	movs	r1, r2
     f9a:	0018      	movs	r0, r3
     f9c:	4b22      	ldr	r3, [pc, #136]	; (1028 <xQueueReceive+0x18c>)
     f9e:	4798      	blx	r3
     fa0:	1e03      	subs	r3, r0, #0
     fa2:	d11e      	bne.n	fe2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     fa4:	6a3b      	ldr	r3, [r7, #32]
     fa6:	0018      	movs	r0, r3
     fa8:	4b20      	ldr	r3, [pc, #128]	; (102c <xQueueReceive+0x190>)
     faa:	4798      	blx	r3
     fac:	1e03      	subs	r3, r0, #0
     fae:	d011      	beq.n	fd4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     fb0:	6a3b      	ldr	r3, [r7, #32]
     fb2:	3324      	adds	r3, #36	; 0x24
     fb4:	687a      	ldr	r2, [r7, #4]
     fb6:	0011      	movs	r1, r2
     fb8:	0018      	movs	r0, r3
     fba:	4b1d      	ldr	r3, [pc, #116]	; (1030 <xQueueReceive+0x194>)
     fbc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     fbe:	6a3b      	ldr	r3, [r7, #32]
     fc0:	0018      	movs	r0, r3
     fc2:	4b1c      	ldr	r3, [pc, #112]	; (1034 <xQueueReceive+0x198>)
     fc4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     fc6:	4b1c      	ldr	r3, [pc, #112]	; (1038 <xQueueReceive+0x19c>)
     fc8:	4798      	blx	r3
     fca:	1e03      	subs	r3, r0, #0
     fcc:	d191      	bne.n	ef2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <xQueueReceive+0x17c>)
     fd0:	4798      	blx	r3
     fd2:	e78e      	b.n	ef2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
     fd4:	6a3b      	ldr	r3, [r7, #32]
     fd6:	0018      	movs	r0, r3
     fd8:	4b16      	ldr	r3, [pc, #88]	; (1034 <xQueueReceive+0x198>)
     fda:	4798      	blx	r3
				( void ) xTaskResumeAll();
     fdc:	4b16      	ldr	r3, [pc, #88]	; (1038 <xQueueReceive+0x19c>)
     fde:	4798      	blx	r3
     fe0:	e787      	b.n	ef2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
     fe2:	6a3b      	ldr	r3, [r7, #32]
     fe4:	0018      	movs	r0, r3
     fe6:	4b13      	ldr	r3, [pc, #76]	; (1034 <xQueueReceive+0x198>)
     fe8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     fea:	4b13      	ldr	r3, [pc, #76]	; (1038 <xQueueReceive+0x19c>)
     fec:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     fee:	6a3b      	ldr	r3, [r7, #32]
     ff0:	0018      	movs	r0, r3
     ff2:	4b0e      	ldr	r3, [pc, #56]	; (102c <xQueueReceive+0x190>)
     ff4:	4798      	blx	r3
     ff6:	1e03      	subs	r3, r0, #0
     ff8:	d100      	bne.n	ffc <xQueueReceive+0x160>
     ffa:	e77a      	b.n	ef2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
     ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
     ffe:	0018      	movs	r0, r3
    1000:	46bd      	mov	sp, r7
    1002:	b00a      	add	sp, #40	; 0x28
    1004:	bd80      	pop	{r7, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00002031 	.word	0x00002031
    100c:	00000551 	.word	0x00000551
    1010:	0000111d 	.word	0x0000111d
    1014:	00001d05 	.word	0x00001d05
    1018:	00000531 	.word	0x00000531
    101c:	00000575 	.word	0x00000575
    1020:	00001dc5 	.word	0x00001dc5
    1024:	00001831 	.word	0x00001831
    1028:	00001ded 	.word	0x00001ded
    102c:	0000125d 	.word	0x0000125d
    1030:	00001c6d 	.word	0x00001c6d
    1034:	0000116d 	.word	0x0000116d
    1038:	00001849 	.word	0x00001849

0000103c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    103c:	b580      	push	{r7, lr}
    103e:	b086      	sub	sp, #24
    1040:	af00      	add	r7, sp, #0
    1042:	60f8      	str	r0, [r7, #12]
    1044:	60b9      	str	r1, [r7, #8]
    1046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    1048:	2300      	movs	r3, #0
    104a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1050:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1056:	2b00      	cmp	r3, #0
    1058:	d10e      	bne.n	1078 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	681b      	ldr	r3, [r3, #0]
    105e:	2b00      	cmp	r3, #0
    1060:	d14e      	bne.n	1100 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    1062:	68fb      	ldr	r3, [r7, #12]
    1064:	689b      	ldr	r3, [r3, #8]
    1066:	0018      	movs	r0, r3
    1068:	4b2a      	ldr	r3, [pc, #168]	; (1114 <prvCopyDataToQueue+0xd8>)
    106a:	4798      	blx	r3
    106c:	0003      	movs	r3, r0
    106e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
    1070:	68fb      	ldr	r3, [r7, #12]
    1072:	2200      	movs	r2, #0
    1074:	609a      	str	r2, [r3, #8]
    1076:	e043      	b.n	1100 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	2b00      	cmp	r3, #0
    107c:	d119      	bne.n	10b2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	6858      	ldr	r0, [r3, #4]
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1086:	68bb      	ldr	r3, [r7, #8]
    1088:	0019      	movs	r1, r3
    108a:	4b23      	ldr	r3, [pc, #140]	; (1118 <prvCopyDataToQueue+0xdc>)
    108c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	685a      	ldr	r2, [r3, #4]
    1092:	68fb      	ldr	r3, [r7, #12]
    1094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1096:	18d2      	adds	r2, r2, r3
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    109c:	68fb      	ldr	r3, [r7, #12]
    109e:	685a      	ldr	r2, [r3, #4]
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	689b      	ldr	r3, [r3, #8]
    10a4:	429a      	cmp	r2, r3
    10a6:	d32b      	bcc.n	1100 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    10a8:	68fb      	ldr	r3, [r7, #12]
    10aa:	681a      	ldr	r2, [r3, #0]
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	605a      	str	r2, [r3, #4]
    10b0:	e026      	b.n	1100 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	68d8      	ldr	r0, [r3, #12]
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    10ba:	68bb      	ldr	r3, [r7, #8]
    10bc:	0019      	movs	r1, r3
    10be:	4b16      	ldr	r3, [pc, #88]	; (1118 <prvCopyDataToQueue+0xdc>)
    10c0:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	68da      	ldr	r2, [r3, #12]
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    10ca:	425b      	negs	r3, r3
    10cc:	18d2      	adds	r2, r2, r3
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    10d2:	68fb      	ldr	r3, [r7, #12]
    10d4:	68da      	ldr	r2, [r3, #12]
    10d6:	68fb      	ldr	r3, [r7, #12]
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	429a      	cmp	r2, r3
    10dc:	d207      	bcs.n	10ee <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    10de:	68fb      	ldr	r3, [r7, #12]
    10e0:	689a      	ldr	r2, [r3, #8]
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    10e6:	425b      	negs	r3, r3
    10e8:	18d2      	adds	r2, r2, r3
    10ea:	68fb      	ldr	r3, [r7, #12]
    10ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	2b02      	cmp	r3, #2
    10f2:	d105      	bne.n	1100 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    10f4:	693b      	ldr	r3, [r7, #16]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d002      	beq.n	1100 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    10fa:	693b      	ldr	r3, [r7, #16]
    10fc:	3b01      	subs	r3, #1
    10fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    1100:	693b      	ldr	r3, [r7, #16]
    1102:	1c5a      	adds	r2, r3, #1
    1104:	68fb      	ldr	r3, [r7, #12]
    1106:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    1108:	697b      	ldr	r3, [r7, #20]
}
    110a:	0018      	movs	r0, r3
    110c:	46bd      	mov	sp, r7
    110e:	b006      	add	sp, #24
    1110:	bd80      	pop	{r7, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00002069 	.word	0x00002069
    1118:	00003a51 	.word	0x00003a51

0000111c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    111c:	b580      	push	{r7, lr}
    111e:	b082      	sub	sp, #8
    1120:	af00      	add	r7, sp, #0
    1122:	6078      	str	r0, [r7, #4]
    1124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    112a:	2b00      	cmp	r3, #0
    112c:	d018      	beq.n	1160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	68da      	ldr	r2, [r3, #12]
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1136:	18d2      	adds	r2, r2, r3
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    113c:	687b      	ldr	r3, [r7, #4]
    113e:	68da      	ldr	r2, [r3, #12]
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	689b      	ldr	r3, [r3, #8]
    1144:	429a      	cmp	r2, r3
    1146:	d303      	bcc.n	1150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1148:	687b      	ldr	r3, [r7, #4]
    114a:	681a      	ldr	r2, [r3, #0]
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	68d9      	ldr	r1, [r3, #12]
    1154:	687b      	ldr	r3, [r7, #4]
    1156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1158:	683b      	ldr	r3, [r7, #0]
    115a:	0018      	movs	r0, r3
    115c:	4b02      	ldr	r3, [pc, #8]	; (1168 <prvCopyDataFromQueue+0x4c>)
    115e:	4798      	blx	r3
	}
}
    1160:	46c0      	nop			; (mov r8, r8)
    1162:	46bd      	mov	sp, r7
    1164:	b002      	add	sp, #8
    1166:	bd80      	pop	{r7, pc}
    1168:	00003a51 	.word	0x00003a51

0000116c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    116c:	b580      	push	{r7, lr}
    116e:	b084      	sub	sp, #16
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1174:	4b34      	ldr	r3, [pc, #208]	; (1248 <prvUnlockQueue+0xdc>)
    1176:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1178:	230f      	movs	r3, #15
    117a:	18fb      	adds	r3, r7, r3
    117c:	687a      	ldr	r2, [r7, #4]
    117e:	2145      	movs	r1, #69	; 0x45
    1180:	5c52      	ldrb	r2, [r2, r1]
    1182:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1184:	e022      	b.n	11cc <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    118a:	2b00      	cmp	r3, #0
    118c:	d009      	beq.n	11a2 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	2100      	movs	r1, #0
    1192:	0018      	movs	r0, r3
    1194:	4b2d      	ldr	r3, [pc, #180]	; (124c <prvUnlockQueue+0xe0>)
    1196:	4798      	blx	r3
    1198:	1e03      	subs	r3, r0, #0
    119a:	d00f      	beq.n	11bc <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    119c:	4b2c      	ldr	r3, [pc, #176]	; (1250 <prvUnlockQueue+0xe4>)
    119e:	4798      	blx	r3
    11a0:	e00c      	b.n	11bc <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11a6:	2b00      	cmp	r3, #0
    11a8:	d017      	beq.n	11da <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	3324      	adds	r3, #36	; 0x24
    11ae:	0018      	movs	r0, r3
    11b0:	4b28      	ldr	r3, [pc, #160]	; (1254 <prvUnlockQueue+0xe8>)
    11b2:	4798      	blx	r3
    11b4:	1e03      	subs	r3, r0, #0
    11b6:	d001      	beq.n	11bc <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    11b8:	4b25      	ldr	r3, [pc, #148]	; (1250 <prvUnlockQueue+0xe4>)
    11ba:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    11bc:	230f      	movs	r3, #15
    11be:	18fb      	adds	r3, r7, r3
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	3b01      	subs	r3, #1
    11c4:	b2da      	uxtb	r2, r3
    11c6:	230f      	movs	r3, #15
    11c8:	18fb      	adds	r3, r7, r3
    11ca:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    11cc:	230f      	movs	r3, #15
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	781b      	ldrb	r3, [r3, #0]
    11d2:	b25b      	sxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	dcd6      	bgt.n	1186 <prvUnlockQueue+0x1a>
    11d8:	e000      	b.n	11dc <prvUnlockQueue+0x70>
						break;
    11da:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	2245      	movs	r2, #69	; 0x45
    11e0:	21ff      	movs	r1, #255	; 0xff
    11e2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    11e4:	4b1c      	ldr	r3, [pc, #112]	; (1258 <prvUnlockQueue+0xec>)
    11e6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    11e8:	4b17      	ldr	r3, [pc, #92]	; (1248 <prvUnlockQueue+0xdc>)
    11ea:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    11ec:	230e      	movs	r3, #14
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	687a      	ldr	r2, [r7, #4]
    11f2:	2144      	movs	r1, #68	; 0x44
    11f4:	5c52      	ldrb	r2, [r2, r1]
    11f6:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    11f8:	e014      	b.n	1224 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    11fa:	687b      	ldr	r3, [r7, #4]
    11fc:	691b      	ldr	r3, [r3, #16]
    11fe:	2b00      	cmp	r3, #0
    1200:	d017      	beq.n	1232 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	3310      	adds	r3, #16
    1206:	0018      	movs	r0, r3
    1208:	4b12      	ldr	r3, [pc, #72]	; (1254 <prvUnlockQueue+0xe8>)
    120a:	4798      	blx	r3
    120c:	1e03      	subs	r3, r0, #0
    120e:	d001      	beq.n	1214 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    1210:	4b0f      	ldr	r3, [pc, #60]	; (1250 <prvUnlockQueue+0xe4>)
    1212:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1214:	230e      	movs	r3, #14
    1216:	18fb      	adds	r3, r7, r3
    1218:	781b      	ldrb	r3, [r3, #0]
    121a:	3b01      	subs	r3, #1
    121c:	b2da      	uxtb	r2, r3
    121e:	230e      	movs	r3, #14
    1220:	18fb      	adds	r3, r7, r3
    1222:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1224:	230e      	movs	r3, #14
    1226:	18fb      	adds	r3, r7, r3
    1228:	781b      	ldrb	r3, [r3, #0]
    122a:	b25b      	sxtb	r3, r3
    122c:	2b00      	cmp	r3, #0
    122e:	dce4      	bgt.n	11fa <prvUnlockQueue+0x8e>
    1230:	e000      	b.n	1234 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    1232:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	2244      	movs	r2, #68	; 0x44
    1238:	21ff      	movs	r1, #255	; 0xff
    123a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    123c:	4b06      	ldr	r3, [pc, #24]	; (1258 <prvUnlockQueue+0xec>)
    123e:	4798      	blx	r3
}
    1240:	46c0      	nop			; (mov r8, r8)
    1242:	46bd      	mov	sp, r7
    1244:	b004      	add	sp, #16
    1246:	bd80      	pop	{r7, pc}
    1248:	00000551 	.word	0x00000551
    124c:	00001391 	.word	0x00001391
    1250:	00001e99 	.word	0x00001e99
    1254:	00001d05 	.word	0x00001d05
    1258:	00000575 	.word	0x00000575

0000125c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    125c:	b580      	push	{r7, lr}
    125e:	b084      	sub	sp, #16
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1264:	4b08      	ldr	r3, [pc, #32]	; (1288 <prvIsQueueEmpty+0x2c>)
    1266:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    126c:	2b00      	cmp	r3, #0
    126e:	d102      	bne.n	1276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    1270:	2301      	movs	r3, #1
    1272:	60fb      	str	r3, [r7, #12]
    1274:	e001      	b.n	127a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    1276:	2300      	movs	r3, #0
    1278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <prvIsQueueEmpty+0x30>)
    127c:	4798      	blx	r3

	return xReturn;
    127e:	68fb      	ldr	r3, [r7, #12]
}
    1280:	0018      	movs	r0, r3
    1282:	46bd      	mov	sp, r7
    1284:	b004      	add	sp, #16
    1286:	bd80      	pop	{r7, pc}
    1288:	00000551 	.word	0x00000551
    128c:	00000575 	.word	0x00000575

00001290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1290:	b580      	push	{r7, lr}
    1292:	b084      	sub	sp, #16
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1298:	4b09      	ldr	r3, [pc, #36]	; (12c0 <prvIsQueueFull+0x30>)
    129a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    12a4:	429a      	cmp	r2, r3
    12a6:	d102      	bne.n	12ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    12a8:	2301      	movs	r3, #1
    12aa:	60fb      	str	r3, [r7, #12]
    12ac:	e001      	b.n	12b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    12ae:	2300      	movs	r3, #0
    12b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    12b2:	4b04      	ldr	r3, [pc, #16]	; (12c4 <prvIsQueueFull+0x34>)
    12b4:	4798      	blx	r3

	return xReturn;
    12b6:	68fb      	ldr	r3, [r7, #12]
}
    12b8:	0018      	movs	r0, r3
    12ba:	46bd      	mov	sp, r7
    12bc:	b004      	add	sp, #16
    12be:	bd80      	pop	{r7, pc}
    12c0:	00000551 	.word	0x00000551
    12c4:	00000575 	.word	0x00000575

000012c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    12c8:	b580      	push	{r7, lr}
    12ca:	b084      	sub	sp, #16
    12cc:	af00      	add	r7, sp, #0
    12ce:	6078      	str	r0, [r7, #4]
    12d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    12d2:	2300      	movs	r3, #0
    12d4:	60fb      	str	r3, [r7, #12]
    12d6:	e015      	b.n	1304 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    12d8:	4b0e      	ldr	r3, [pc, #56]	; (1314 <vQueueAddToRegistry+0x4c>)
    12da:	68fa      	ldr	r2, [r7, #12]
    12dc:	00d2      	lsls	r2, r2, #3
    12de:	58d3      	ldr	r3, [r2, r3]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d10c      	bne.n	12fe <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    12e4:	4b0b      	ldr	r3, [pc, #44]	; (1314 <vQueueAddToRegistry+0x4c>)
    12e6:	68fa      	ldr	r2, [r7, #12]
    12e8:	00d2      	lsls	r2, r2, #3
    12ea:	6839      	ldr	r1, [r7, #0]
    12ec:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    12ee:	4a09      	ldr	r2, [pc, #36]	; (1314 <vQueueAddToRegistry+0x4c>)
    12f0:	68fb      	ldr	r3, [r7, #12]
    12f2:	00db      	lsls	r3, r3, #3
    12f4:	18d3      	adds	r3, r2, r3
    12f6:	3304      	adds	r3, #4
    12f8:	687a      	ldr	r2, [r7, #4]
    12fa:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    12fc:	e005      	b.n	130a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	3301      	adds	r3, #1
    1302:	60fb      	str	r3, [r7, #12]
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	2b07      	cmp	r3, #7
    1308:	d9e6      	bls.n	12d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	46bd      	mov	sp, r7
    130e:	b004      	add	sp, #16
    1310:	bd80      	pop	{r7, pc}
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	2000446c 	.word	0x2000446c

00001318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1318:	b580      	push	{r7, lr}
    131a:	b086      	sub	sp, #24
    131c:	af00      	add	r7, sp, #0
    131e:	60f8      	str	r0, [r7, #12]
    1320:	60b9      	str	r1, [r7, #8]
    1322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
    1324:	68fb      	ldr	r3, [r7, #12]
    1326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1328:	4b15      	ldr	r3, [pc, #84]	; (1380 <vQueueWaitForMessageRestricted+0x68>)
    132a:	4798      	blx	r3
    132c:	697b      	ldr	r3, [r7, #20]
    132e:	2244      	movs	r2, #68	; 0x44
    1330:	5c9b      	ldrb	r3, [r3, r2]
    1332:	b25b      	sxtb	r3, r3
    1334:	3301      	adds	r3, #1
    1336:	d103      	bne.n	1340 <vQueueWaitForMessageRestricted+0x28>
    1338:	697b      	ldr	r3, [r7, #20]
    133a:	2244      	movs	r2, #68	; 0x44
    133c:	2100      	movs	r1, #0
    133e:	5499      	strb	r1, [r3, r2]
    1340:	697b      	ldr	r3, [r7, #20]
    1342:	2245      	movs	r2, #69	; 0x45
    1344:	5c9b      	ldrb	r3, [r3, r2]
    1346:	b25b      	sxtb	r3, r3
    1348:	3301      	adds	r3, #1
    134a:	d103      	bne.n	1354 <vQueueWaitForMessageRestricted+0x3c>
    134c:	697b      	ldr	r3, [r7, #20]
    134e:	2245      	movs	r2, #69	; 0x45
    1350:	2100      	movs	r1, #0
    1352:	5499      	strb	r1, [r3, r2]
    1354:	4b0b      	ldr	r3, [pc, #44]	; (1384 <vQueueWaitForMessageRestricted+0x6c>)
    1356:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1358:	697b      	ldr	r3, [r7, #20]
    135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    135c:	2b00      	cmp	r3, #0
    135e:	d106      	bne.n	136e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1360:	697b      	ldr	r3, [r7, #20]
    1362:	3324      	adds	r3, #36	; 0x24
    1364:	687a      	ldr	r2, [r7, #4]
    1366:	68b9      	ldr	r1, [r7, #8]
    1368:	0018      	movs	r0, r3
    136a:	4b07      	ldr	r3, [pc, #28]	; (1388 <vQueueWaitForMessageRestricted+0x70>)
    136c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    136e:	697b      	ldr	r3, [r7, #20]
    1370:	0018      	movs	r0, r3
    1372:	4b06      	ldr	r3, [pc, #24]	; (138c <vQueueWaitForMessageRestricted+0x74>)
    1374:	4798      	blx	r3
	}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46bd      	mov	sp, r7
    137a:	b006      	add	sp, #24
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	00000551 	.word	0x00000551
    1384:	00000575 	.word	0x00000575
    1388:	00001cb1 	.word	0x00001cb1
    138c:	0000116d 	.word	0x0000116d

00001390 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1390:	b580      	push	{r7, lr}
    1392:	b086      	sub	sp, #24
    1394:	af00      	add	r7, sp, #0
    1396:	6078      	str	r0, [r7, #4]
    1398:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    139e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    13a0:	2300      	movs	r3, #0
    13a2:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    13a4:	693b      	ldr	r3, [r7, #16]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d101      	bne.n	13ae <prvNotifyQueueSetContainer+0x1e>
    13aa:	b672      	cpsid	i
    13ac:	e7fe      	b.n	13ac <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    13ae:	693b      	ldr	r3, [r7, #16]
    13b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    13b2:	693b      	ldr	r3, [r7, #16]
    13b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    13b6:	429a      	cmp	r2, r3
    13b8:	d301      	bcc.n	13be <prvNotifyQueueSetContainer+0x2e>
    13ba:	b672      	cpsid	i
    13bc:	e7fe      	b.n	13bc <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    13be:	693b      	ldr	r3, [r7, #16]
    13c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    13c2:	693b      	ldr	r3, [r7, #16]
    13c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    13c6:	429a      	cmp	r2, r3
    13c8:	d22a      	bcs.n	1420 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    13ca:	230f      	movs	r3, #15
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	693a      	ldr	r2, [r7, #16]
    13d0:	2145      	movs	r1, #69	; 0x45
    13d2:	5c52      	ldrb	r2, [r2, r1]
    13d4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    13d6:	683a      	ldr	r2, [r7, #0]
    13d8:	1d39      	adds	r1, r7, #4
    13da:	693b      	ldr	r3, [r7, #16]
    13dc:	0018      	movs	r0, r3
    13de:	4b13      	ldr	r3, [pc, #76]	; (142c <prvNotifyQueueSetContainer+0x9c>)
    13e0:	4798      	blx	r3
    13e2:	0003      	movs	r3, r0
    13e4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    13e6:	230f      	movs	r3, #15
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	b25b      	sxtb	r3, r3
    13ee:	3301      	adds	r3, #1
    13f0:	d10d      	bne.n	140e <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    13f2:	693b      	ldr	r3, [r7, #16]
    13f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13f6:	2b00      	cmp	r3, #0
    13f8:	d012      	beq.n	1420 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    13fa:	693b      	ldr	r3, [r7, #16]
    13fc:	3324      	adds	r3, #36	; 0x24
    13fe:	0018      	movs	r0, r3
    1400:	4b0b      	ldr	r3, [pc, #44]	; (1430 <prvNotifyQueueSetContainer+0xa0>)
    1402:	4798      	blx	r3
    1404:	1e03      	subs	r3, r0, #0
    1406:	d00b      	beq.n	1420 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    1408:	2301      	movs	r3, #1
    140a:	617b      	str	r3, [r7, #20]
    140c:	e008      	b.n	1420 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    140e:	230f      	movs	r3, #15
    1410:	18fb      	adds	r3, r7, r3
    1412:	781b      	ldrb	r3, [r3, #0]
    1414:	3301      	adds	r3, #1
    1416:	b2db      	uxtb	r3, r3
    1418:	b259      	sxtb	r1, r3
    141a:	693b      	ldr	r3, [r7, #16]
    141c:	2245      	movs	r2, #69	; 0x45
    141e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    1420:	697b      	ldr	r3, [r7, #20]
	}
    1422:	0018      	movs	r0, r3
    1424:	46bd      	mov	sp, r7
    1426:	b006      	add	sp, #24
    1428:	bd80      	pop	{r7, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	0000103d 	.word	0x0000103d
    1430:	00001d05 	.word	0x00001d05

00001434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    1434:	b590      	push	{r4, r7, lr}
    1436:	b08d      	sub	sp, #52	; 0x34
    1438:	af04      	add	r7, sp, #16
    143a:	60f8      	str	r0, [r7, #12]
    143c:	60b9      	str	r1, [r7, #8]
    143e:	603b      	str	r3, [r7, #0]
    1440:	1dbb      	adds	r3, r7, #6
    1442:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    1444:	1dbb      	adds	r3, r7, #6
    1446:	881b      	ldrh	r3, [r3, #0]
    1448:	009b      	lsls	r3, r3, #2
    144a:	0018      	movs	r0, r3
    144c:	4b1d      	ldr	r3, [pc, #116]	; (14c4 <xTaskCreate+0x90>)
    144e:	4798      	blx	r3
    1450:	0003      	movs	r3, r0
    1452:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    1454:	697b      	ldr	r3, [r7, #20]
    1456:	2b00      	cmp	r3, #0
    1458:	d010      	beq.n	147c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    145a:	2058      	movs	r0, #88	; 0x58
    145c:	4b19      	ldr	r3, [pc, #100]	; (14c4 <xTaskCreate+0x90>)
    145e:	4798      	blx	r3
    1460:	0003      	movs	r3, r0
    1462:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    1464:	69fb      	ldr	r3, [r7, #28]
    1466:	2b00      	cmp	r3, #0
    1468:	d003      	beq.n	1472 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    146a:	69fb      	ldr	r3, [r7, #28]
    146c:	697a      	ldr	r2, [r7, #20]
    146e:	631a      	str	r2, [r3, #48]	; 0x30
    1470:	e006      	b.n	1480 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1472:	697b      	ldr	r3, [r7, #20]
    1474:	0018      	movs	r0, r3
    1476:	4b14      	ldr	r3, [pc, #80]	; (14c8 <xTaskCreate+0x94>)
    1478:	4798      	blx	r3
    147a:	e001      	b.n	1480 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    147c:	2300      	movs	r3, #0
    147e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    1480:	69fb      	ldr	r3, [r7, #28]
    1482:	2b00      	cmp	r3, #0
    1484:	d016      	beq.n	14b4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    1486:	1dbb      	adds	r3, r7, #6
    1488:	881a      	ldrh	r2, [r3, #0]
    148a:	683c      	ldr	r4, [r7, #0]
    148c:	68b9      	ldr	r1, [r7, #8]
    148e:	68f8      	ldr	r0, [r7, #12]
    1490:	2300      	movs	r3, #0
    1492:	9303      	str	r3, [sp, #12]
    1494:	69fb      	ldr	r3, [r7, #28]
    1496:	9302      	str	r3, [sp, #8]
    1498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    149a:	9301      	str	r3, [sp, #4]
    149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    149e:	9300      	str	r3, [sp, #0]
    14a0:	0023      	movs	r3, r4
    14a2:	4c0a      	ldr	r4, [pc, #40]	; (14cc <xTaskCreate+0x98>)
    14a4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    14a6:	69fb      	ldr	r3, [r7, #28]
    14a8:	0018      	movs	r0, r3
    14aa:	4b09      	ldr	r3, [pc, #36]	; (14d0 <xTaskCreate+0x9c>)
    14ac:	4798      	blx	r3
			xReturn = pdPASS;
    14ae:	2301      	movs	r3, #1
    14b0:	61bb      	str	r3, [r7, #24]
    14b2:	e002      	b.n	14ba <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    14b4:	2301      	movs	r3, #1
    14b6:	425b      	negs	r3, r3
    14b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    14ba:	69bb      	ldr	r3, [r7, #24]
	}
    14bc:	0018      	movs	r0, r3
    14be:	46bd      	mov	sp, r7
    14c0:	b009      	add	sp, #36	; 0x24
    14c2:	bd90      	pop	{r4, r7, pc}
    14c4:	00000691 	.word	0x00000691
    14c8:	000007f9 	.word	0x000007f9
    14cc:	000014d5 	.word	0x000014d5
    14d0:	000015f9 	.word	0x000015f9

000014d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b086      	sub	sp, #24
    14d8:	af00      	add	r7, sp, #0
    14da:	60f8      	str	r0, [r7, #12]
    14dc:	60b9      	str	r1, [r7, #8]
    14de:	607a      	str	r2, [r7, #4]
    14e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    14e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    14e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	009b      	lsls	r3, r3, #2
    14ea:	001a      	movs	r2, r3
    14ec:	21a5      	movs	r1, #165	; 0xa5
    14ee:	4b3e      	ldr	r3, [pc, #248]	; (15e8 <prvInitialiseNewTask+0x114>)
    14f0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    14f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    14f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	493c      	ldr	r1, [pc, #240]	; (15ec <prvInitialiseNewTask+0x118>)
    14fa:	468c      	mov	ip, r1
    14fc:	4463      	add	r3, ip
    14fe:	009b      	lsls	r3, r3, #2
    1500:	18d3      	adds	r3, r2, r3
    1502:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    1504:	693b      	ldr	r3, [r7, #16]
    1506:	2207      	movs	r2, #7
    1508:	4393      	bics	r3, r2
    150a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    150c:	693b      	ldr	r3, [r7, #16]
    150e:	2207      	movs	r2, #7
    1510:	4013      	ands	r3, r2
    1512:	d001      	beq.n	1518 <prvInitialiseNewTask+0x44>
    1514:	b672      	cpsid	i
    1516:	e7fe      	b.n	1516 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    1518:	68bb      	ldr	r3, [r7, #8]
    151a:	2b00      	cmp	r3, #0
    151c:	d020      	beq.n	1560 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    151e:	2300      	movs	r3, #0
    1520:	617b      	str	r3, [r7, #20]
    1522:	e013      	b.n	154c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1524:	68ba      	ldr	r2, [r7, #8]
    1526:	697b      	ldr	r3, [r7, #20]
    1528:	18d3      	adds	r3, r2, r3
    152a:	7818      	ldrb	r0, [r3, #0]
    152c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    152e:	2134      	movs	r1, #52	; 0x34
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	18d3      	adds	r3, r2, r3
    1534:	185b      	adds	r3, r3, r1
    1536:	1c02      	adds	r2, r0, #0
    1538:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    153a:	68ba      	ldr	r2, [r7, #8]
    153c:	697b      	ldr	r3, [r7, #20]
    153e:	18d3      	adds	r3, r2, r3
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	2b00      	cmp	r3, #0
    1544:	d006      	beq.n	1554 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1546:	697b      	ldr	r3, [r7, #20]
    1548:	3301      	adds	r3, #1
    154a:	617b      	str	r3, [r7, #20]
    154c:	697b      	ldr	r3, [r7, #20]
    154e:	2b04      	cmp	r3, #4
    1550:	d9e8      	bls.n	1524 <prvInitialiseNewTask+0x50>
    1552:	e000      	b.n	1556 <prvInitialiseNewTask+0x82>
			{
				break;
    1554:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1556:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1558:	2238      	movs	r2, #56	; 0x38
    155a:	2100      	movs	r1, #0
    155c:	5499      	strb	r1, [r3, r2]
    155e:	e003      	b.n	1568 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    1560:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1562:	2234      	movs	r2, #52	; 0x34
    1564:	2100      	movs	r1, #0
    1566:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    1568:	6a3b      	ldr	r3, [r7, #32]
    156a:	2b04      	cmp	r3, #4
    156c:	d901      	bls.n	1572 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    156e:	2304      	movs	r3, #4
    1570:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    1572:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1574:	6a3a      	ldr	r2, [r7, #32]
    1576:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    1578:	6abb      	ldr	r3, [r7, #40]	; 0x28
    157a:	6a3a      	ldr	r2, [r7, #32]
    157c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1580:	2200      	movs	r2, #0
    1582:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1584:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1586:	3304      	adds	r3, #4
    1588:	0018      	movs	r0, r3
    158a:	4b19      	ldr	r3, [pc, #100]	; (15f0 <prvInitialiseNewTask+0x11c>)
    158c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1590:	3318      	adds	r3, #24
    1592:	0018      	movs	r0, r3
    1594:	4b16      	ldr	r3, [pc, #88]	; (15f0 <prvInitialiseNewTask+0x11c>)
    1596:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1598:	6abb      	ldr	r3, [r7, #40]	; 0x28
    159a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    159c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    159e:	6a3b      	ldr	r3, [r7, #32]
    15a0:	2205      	movs	r2, #5
    15a2:	1ad2      	subs	r2, r2, r3
    15a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    15a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    15ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
    15ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15b0:	2200      	movs	r2, #0
    15b2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    15b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15b6:	2200      	movs	r2, #0
    15b8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    15ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15bc:	2254      	movs	r2, #84	; 0x54
    15be:	2100      	movs	r1, #0
    15c0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    15c2:	683a      	ldr	r2, [r7, #0]
    15c4:	68f9      	ldr	r1, [r7, #12]
    15c6:	693b      	ldr	r3, [r7, #16]
    15c8:	0018      	movs	r0, r3
    15ca:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <prvInitialiseNewTask+0x120>)
    15cc:	4798      	blx	r3
    15ce:	0002      	movs	r2, r0
    15d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    15d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15d6:	2b00      	cmp	r3, #0
    15d8:	d002      	beq.n	15e0 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    15da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    15de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    15e0:	46c0      	nop			; (mov r8, r8)
    15e2:	46bd      	mov	sp, r7
    15e4:	b006      	add	sp, #24
    15e6:	bd80      	pop	{r7, pc}
    15e8:	00003ad5 	.word	0x00003ad5
    15ec:	3fffffff 	.word	0x3fffffff
    15f0:	00000309 	.word	0x00000309
    15f4:	00000421 	.word	0x00000421

000015f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    15f8:	b580      	push	{r7, lr}
    15fa:	b082      	sub	sp, #8
    15fc:	af00      	add	r7, sp, #0
    15fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1600:	4b2b      	ldr	r3, [pc, #172]	; (16b0 <prvAddNewTaskToReadyList+0xb8>)
    1602:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    1604:	4b2b      	ldr	r3, [pc, #172]	; (16b4 <prvAddNewTaskToReadyList+0xbc>)
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	1c5a      	adds	r2, r3, #1
    160a:	4b2a      	ldr	r3, [pc, #168]	; (16b4 <prvAddNewTaskToReadyList+0xbc>)
    160c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    160e:	4b2a      	ldr	r3, [pc, #168]	; (16b8 <prvAddNewTaskToReadyList+0xc0>)
    1610:	681b      	ldr	r3, [r3, #0]
    1612:	2b00      	cmp	r3, #0
    1614:	d109      	bne.n	162a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1616:	4b28      	ldr	r3, [pc, #160]	; (16b8 <prvAddNewTaskToReadyList+0xc0>)
    1618:	687a      	ldr	r2, [r7, #4]
    161a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    161c:	4b25      	ldr	r3, [pc, #148]	; (16b4 <prvAddNewTaskToReadyList+0xbc>)
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	2b01      	cmp	r3, #1
    1622:	d110      	bne.n	1646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    1624:	4b25      	ldr	r3, [pc, #148]	; (16bc <prvAddNewTaskToReadyList+0xc4>)
    1626:	4798      	blx	r3
    1628:	e00d      	b.n	1646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    162a:	4b25      	ldr	r3, [pc, #148]	; (16c0 <prvAddNewTaskToReadyList+0xc8>)
    162c:	681b      	ldr	r3, [r3, #0]
    162e:	2b00      	cmp	r3, #0
    1630:	d109      	bne.n	1646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1632:	4b21      	ldr	r3, [pc, #132]	; (16b8 <prvAddNewTaskToReadyList+0xc0>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    163c:	429a      	cmp	r2, r3
    163e:	d802      	bhi.n	1646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    1640:	4b1d      	ldr	r3, [pc, #116]	; (16b8 <prvAddNewTaskToReadyList+0xc0>)
    1642:	687a      	ldr	r2, [r7, #4]
    1644:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    1646:	4b1f      	ldr	r3, [pc, #124]	; (16c4 <prvAddNewTaskToReadyList+0xcc>)
    1648:	681b      	ldr	r3, [r3, #0]
    164a:	1c5a      	adds	r2, r3, #1
    164c:	4b1d      	ldr	r3, [pc, #116]	; (16c4 <prvAddNewTaskToReadyList+0xcc>)
    164e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    1650:	4b1c      	ldr	r3, [pc, #112]	; (16c4 <prvAddNewTaskToReadyList+0xcc>)
    1652:	681a      	ldr	r2, [r3, #0]
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    165c:	4b1a      	ldr	r3, [pc, #104]	; (16c8 <prvAddNewTaskToReadyList+0xd0>)
    165e:	681b      	ldr	r3, [r3, #0]
    1660:	429a      	cmp	r2, r3
    1662:	d903      	bls.n	166c <prvAddNewTaskToReadyList+0x74>
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1668:	4b17      	ldr	r3, [pc, #92]	; (16c8 <prvAddNewTaskToReadyList+0xd0>)
    166a:	601a      	str	r2, [r3, #0]
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1670:	0013      	movs	r3, r2
    1672:	009b      	lsls	r3, r3, #2
    1674:	189b      	adds	r3, r3, r2
    1676:	009b      	lsls	r3, r3, #2
    1678:	4a14      	ldr	r2, [pc, #80]	; (16cc <prvAddNewTaskToReadyList+0xd4>)
    167a:	189a      	adds	r2, r3, r2
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	3304      	adds	r3, #4
    1680:	0019      	movs	r1, r3
    1682:	0010      	movs	r0, r2
    1684:	4b12      	ldr	r3, [pc, #72]	; (16d0 <prvAddNewTaskToReadyList+0xd8>)
    1686:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    1688:	4b12      	ldr	r3, [pc, #72]	; (16d4 <prvAddNewTaskToReadyList+0xdc>)
    168a:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    168c:	4b0c      	ldr	r3, [pc, #48]	; (16c0 <prvAddNewTaskToReadyList+0xc8>)
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	2b00      	cmp	r3, #0
    1692:	d008      	beq.n	16a6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1694:	4b08      	ldr	r3, [pc, #32]	; (16b8 <prvAddNewTaskToReadyList+0xc0>)
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    169e:	429a      	cmp	r2, r3
    16a0:	d201      	bcs.n	16a6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    16a2:	4b0d      	ldr	r3, [pc, #52]	; (16d8 <prvAddNewTaskToReadyList+0xe0>)
    16a4:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    16a6:	46c0      	nop			; (mov r8, r8)
    16a8:	46bd      	mov	sp, r7
    16aa:	b002      	add	sp, #8
    16ac:	bd80      	pop	{r7, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	00000551 	.word	0x00000551
    16b4:	200043c4 	.word	0x200043c4
    16b8:	200042ec 	.word	0x200042ec
    16bc:	00001ed5 	.word	0x00001ed5
    16c0:	200043d0 	.word	0x200043d0
    16c4:	200043e0 	.word	0x200043e0
    16c8:	200043cc 	.word	0x200043cc
    16cc:	200042f0 	.word	0x200042f0
    16d0:	0000031f 	.word	0x0000031f
    16d4:	00000575 	.word	0x00000575
    16d8:	00000531 	.word	0x00000531

000016dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    16dc:	b580      	push	{r7, lr}
    16de:	b086      	sub	sp, #24
    16e0:	af00      	add	r7, sp, #0
    16e2:	6078      	str	r0, [r7, #4]
    16e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    16e6:	2300      	movs	r3, #0
    16e8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d101      	bne.n	16f4 <vTaskDelayUntil+0x18>
    16f0:	b672      	cpsid	i
    16f2:	e7fe      	b.n	16f2 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d101      	bne.n	16fe <vTaskDelayUntil+0x22>
    16fa:	b672      	cpsid	i
    16fc:	e7fe      	b.n	16fc <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    16fe:	4b23      	ldr	r3, [pc, #140]	; (178c <vTaskDelayUntil+0xb0>)
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	2b00      	cmp	r3, #0
    1704:	d001      	beq.n	170a <vTaskDelayUntil+0x2e>
    1706:	b672      	cpsid	i
    1708:	e7fe      	b.n	1708 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    170a:	4b21      	ldr	r3, [pc, #132]	; (1790 <vTaskDelayUntil+0xb4>)
    170c:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    170e:	4b21      	ldr	r3, [pc, #132]	; (1794 <vTaskDelayUntil+0xb8>)
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	681a      	ldr	r2, [r3, #0]
    1718:	683b      	ldr	r3, [r7, #0]
    171a:	18d3      	adds	r3, r2, r3
    171c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	681a      	ldr	r2, [r3, #0]
    1722:	693b      	ldr	r3, [r7, #16]
    1724:	429a      	cmp	r2, r3
    1726:	d90b      	bls.n	1740 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	681a      	ldr	r2, [r3, #0]
    172c:	68fb      	ldr	r3, [r7, #12]
    172e:	429a      	cmp	r2, r3
    1730:	d911      	bls.n	1756 <vTaskDelayUntil+0x7a>
    1732:	68fa      	ldr	r2, [r7, #12]
    1734:	693b      	ldr	r3, [r7, #16]
    1736:	429a      	cmp	r2, r3
    1738:	d90d      	bls.n	1756 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    173a:	2301      	movs	r3, #1
    173c:	617b      	str	r3, [r7, #20]
    173e:	e00a      	b.n	1756 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	681a      	ldr	r2, [r3, #0]
    1744:	68fb      	ldr	r3, [r7, #12]
    1746:	429a      	cmp	r2, r3
    1748:	d803      	bhi.n	1752 <vTaskDelayUntil+0x76>
    174a:	68fa      	ldr	r2, [r7, #12]
    174c:	693b      	ldr	r3, [r7, #16]
    174e:	429a      	cmp	r2, r3
    1750:	d901      	bls.n	1756 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    1752:	2301      	movs	r3, #1
    1754:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	68fa      	ldr	r2, [r7, #12]
    175a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    175c:	697b      	ldr	r3, [r7, #20]
    175e:	2b00      	cmp	r3, #0
    1760:	d006      	beq.n	1770 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1762:	68fa      	ldr	r2, [r7, #12]
    1764:	693b      	ldr	r3, [r7, #16]
    1766:	1ad3      	subs	r3, r2, r3
    1768:	2100      	movs	r1, #0
    176a:	0018      	movs	r0, r3
    176c:	4b0a      	ldr	r3, [pc, #40]	; (1798 <vTaskDelayUntil+0xbc>)
    176e:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1770:	4b0a      	ldr	r3, [pc, #40]	; (179c <vTaskDelayUntil+0xc0>)
    1772:	4798      	blx	r3
    1774:	0003      	movs	r3, r0
    1776:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1778:	68bb      	ldr	r3, [r7, #8]
    177a:	2b00      	cmp	r3, #0
    177c:	d101      	bne.n	1782 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    177e:	4b08      	ldr	r3, [pc, #32]	; (17a0 <vTaskDelayUntil+0xc4>)
    1780:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	46bd      	mov	sp, r7
    1786:	b006      	add	sp, #24
    1788:	bd80      	pop	{r7, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	200043ec 	.word	0x200043ec
    1790:	00001831 	.word	0x00001831
    1794:	200043c8 	.word	0x200043c8
    1798:	00002129 	.word	0x00002129
    179c:	00001849 	.word	0x00001849
    17a0:	00000531 	.word	0x00000531

000017a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    17a4:	b590      	push	{r4, r7, lr}
    17a6:	b085      	sub	sp, #20
    17a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    17aa:	4917      	ldr	r1, [pc, #92]	; (1808 <vTaskStartScheduler+0x64>)
    17ac:	4817      	ldr	r0, [pc, #92]	; (180c <vTaskStartScheduler+0x68>)
    17ae:	4b18      	ldr	r3, [pc, #96]	; (1810 <vTaskStartScheduler+0x6c>)
    17b0:	9301      	str	r3, [sp, #4]
    17b2:	2300      	movs	r3, #0
    17b4:	9300      	str	r3, [sp, #0]
    17b6:	2300      	movs	r3, #0
    17b8:	2246      	movs	r2, #70	; 0x46
    17ba:	4c16      	ldr	r4, [pc, #88]	; (1814 <vTaskStartScheduler+0x70>)
    17bc:	47a0      	blx	r4
    17be:	0003      	movs	r3, r0
    17c0:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    17c2:	687b      	ldr	r3, [r7, #4]
    17c4:	2b01      	cmp	r3, #1
    17c6:	d103      	bne.n	17d0 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    17c8:	4b13      	ldr	r3, [pc, #76]	; (1818 <vTaskStartScheduler+0x74>)
    17ca:	4798      	blx	r3
    17cc:	0003      	movs	r3, r0
    17ce:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    17d0:	687b      	ldr	r3, [r7, #4]
    17d2:	2b01      	cmp	r3, #1
    17d4:	d10f      	bne.n	17f6 <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    17d6:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    17d8:	4b10      	ldr	r3, [pc, #64]	; (181c <vTaskStartScheduler+0x78>)
    17da:	2201      	movs	r2, #1
    17dc:	4252      	negs	r2, r2
    17de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    17e0:	4b0f      	ldr	r3, [pc, #60]	; (1820 <vTaskStartScheduler+0x7c>)
    17e2:	2201      	movs	r2, #1
    17e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    17e6:	4b0f      	ldr	r3, [pc, #60]	; (1824 <vTaskStartScheduler+0x80>)
    17e8:	2200      	movs	r2, #0
    17ea:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
    17ec:	4b0e      	ldr	r3, [pc, #56]	; (1828 <vTaskStartScheduler+0x84>)
    17ee:	4798      	blx	r3

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    17f0:	4b0e      	ldr	r3, [pc, #56]	; (182c <vTaskStartScheduler+0x88>)
    17f2:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    17f4:	e004      	b.n	1800 <vTaskStartScheduler+0x5c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    17f6:	687b      	ldr	r3, [r7, #4]
    17f8:	3301      	adds	r3, #1
    17fa:	d101      	bne.n	1800 <vTaskStartScheduler+0x5c>
    17fc:	b672      	cpsid	i
    17fe:	e7fe      	b.n	17fe <vTaskStartScheduler+0x5a>
}
    1800:	46c0      	nop			; (mov r8, r8)
    1802:	46bd      	mov	sp, r7
    1804:	b003      	add	sp, #12
    1806:	bd90      	pop	{r4, r7, pc}
    1808:	00003cc8 	.word	0x00003cc8
    180c:	00001ead 	.word	0x00001ead
    1810:	200043e8 	.word	0x200043e8
    1814:	00001435 	.word	0x00001435
    1818:	000021dd 	.word	0x000021dd
    181c:	200043e4 	.word	0x200043e4
    1820:	200043d0 	.word	0x200043d0
    1824:	200043c8 	.word	0x200043c8
    1828:	00002911 	.word	0x00002911
    182c:	000004d9 	.word	0x000004d9

00001830 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1830:	b580      	push	{r7, lr}
    1832:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1834:	4b03      	ldr	r3, [pc, #12]	; (1844 <vTaskSuspendAll+0x14>)
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	1c5a      	adds	r2, r3, #1
    183a:	4b02      	ldr	r3, [pc, #8]	; (1844 <vTaskSuspendAll+0x14>)
    183c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	46bd      	mov	sp, r7
    1842:	bd80      	pop	{r7, pc}
    1844:	200043ec 	.word	0x200043ec

00001848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1848:	b580      	push	{r7, lr}
    184a:	b084      	sub	sp, #16
    184c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    184e:	2300      	movs	r3, #0
    1850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    1852:	2300      	movs	r3, #0
    1854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    1856:	4b3a      	ldr	r3, [pc, #232]	; (1940 <xTaskResumeAll+0xf8>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	2b00      	cmp	r3, #0
    185c:	d101      	bne.n	1862 <xTaskResumeAll+0x1a>
    185e:	b672      	cpsid	i
    1860:	e7fe      	b.n	1860 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1862:	4b38      	ldr	r3, [pc, #224]	; (1944 <xTaskResumeAll+0xfc>)
    1864:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    1866:	4b36      	ldr	r3, [pc, #216]	; (1940 <xTaskResumeAll+0xf8>)
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	1e5a      	subs	r2, r3, #1
    186c:	4b34      	ldr	r3, [pc, #208]	; (1940 <xTaskResumeAll+0xf8>)
    186e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1870:	4b33      	ldr	r3, [pc, #204]	; (1940 <xTaskResumeAll+0xf8>)
    1872:	681b      	ldr	r3, [r3, #0]
    1874:	2b00      	cmp	r3, #0
    1876:	d15b      	bne.n	1930 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1878:	4b33      	ldr	r3, [pc, #204]	; (1948 <xTaskResumeAll+0x100>)
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	2b00      	cmp	r3, #0
    187e:	d057      	beq.n	1930 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1880:	e02f      	b.n	18e2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1882:	4b32      	ldr	r3, [pc, #200]	; (194c <xTaskResumeAll+0x104>)
    1884:	68db      	ldr	r3, [r3, #12]
    1886:	68db      	ldr	r3, [r3, #12]
    1888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	3318      	adds	r3, #24
    188e:	0018      	movs	r0, r3
    1890:	4b2f      	ldr	r3, [pc, #188]	; (1950 <xTaskResumeAll+0x108>)
    1892:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1894:	68fb      	ldr	r3, [r7, #12]
    1896:	3304      	adds	r3, #4
    1898:	0018      	movs	r0, r3
    189a:	4b2d      	ldr	r3, [pc, #180]	; (1950 <xTaskResumeAll+0x108>)
    189c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    189e:	68fb      	ldr	r3, [r7, #12]
    18a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18a2:	4b2c      	ldr	r3, [pc, #176]	; (1954 <xTaskResumeAll+0x10c>)
    18a4:	681b      	ldr	r3, [r3, #0]
    18a6:	429a      	cmp	r2, r3
    18a8:	d903      	bls.n	18b2 <xTaskResumeAll+0x6a>
    18aa:	68fb      	ldr	r3, [r7, #12]
    18ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18ae:	4b29      	ldr	r3, [pc, #164]	; (1954 <xTaskResumeAll+0x10c>)
    18b0:	601a      	str	r2, [r3, #0]
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18b6:	0013      	movs	r3, r2
    18b8:	009b      	lsls	r3, r3, #2
    18ba:	189b      	adds	r3, r3, r2
    18bc:	009b      	lsls	r3, r3, #2
    18be:	4a26      	ldr	r2, [pc, #152]	; (1958 <xTaskResumeAll+0x110>)
    18c0:	189a      	adds	r2, r3, r2
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	3304      	adds	r3, #4
    18c6:	0019      	movs	r1, r3
    18c8:	0010      	movs	r0, r2
    18ca:	4b24      	ldr	r3, [pc, #144]	; (195c <xTaskResumeAll+0x114>)
    18cc:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    18ce:	68fb      	ldr	r3, [r7, #12]
    18d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18d2:	4b23      	ldr	r3, [pc, #140]	; (1960 <xTaskResumeAll+0x118>)
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18d8:	429a      	cmp	r2, r3
    18da:	d302      	bcc.n	18e2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    18dc:	4b21      	ldr	r3, [pc, #132]	; (1964 <xTaskResumeAll+0x11c>)
    18de:	2201      	movs	r2, #1
    18e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    18e2:	4b1a      	ldr	r3, [pc, #104]	; (194c <xTaskResumeAll+0x104>)
    18e4:	681b      	ldr	r3, [r3, #0]
    18e6:	2b00      	cmp	r3, #0
    18e8:	d1cb      	bne.n	1882 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    18ea:	68fb      	ldr	r3, [r7, #12]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d001      	beq.n	18f4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    18f0:	4b1d      	ldr	r3, [pc, #116]	; (1968 <xTaskResumeAll+0x120>)
    18f2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    18f4:	4b1d      	ldr	r3, [pc, #116]	; (196c <xTaskResumeAll+0x124>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d00f      	beq.n	1920 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1900:	4b1b      	ldr	r3, [pc, #108]	; (1970 <xTaskResumeAll+0x128>)
    1902:	4798      	blx	r3
    1904:	1e03      	subs	r3, r0, #0
    1906:	d002      	beq.n	190e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    1908:	4b16      	ldr	r3, [pc, #88]	; (1964 <xTaskResumeAll+0x11c>)
    190a:	2201      	movs	r2, #1
    190c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	3b01      	subs	r3, #1
    1912:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	2b00      	cmp	r3, #0
    1918:	d1f2      	bne.n	1900 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    191a:	4b14      	ldr	r3, [pc, #80]	; (196c <xTaskResumeAll+0x124>)
    191c:	2200      	movs	r2, #0
    191e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1920:	4b10      	ldr	r3, [pc, #64]	; (1964 <xTaskResumeAll+0x11c>)
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	2b00      	cmp	r3, #0
    1926:	d003      	beq.n	1930 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1928:	2301      	movs	r3, #1
    192a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    192c:	4b11      	ldr	r3, [pc, #68]	; (1974 <xTaskResumeAll+0x12c>)
    192e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1930:	4b11      	ldr	r3, [pc, #68]	; (1978 <xTaskResumeAll+0x130>)
    1932:	4798      	blx	r3

	return xAlreadyYielded;
    1934:	68bb      	ldr	r3, [r7, #8]
}
    1936:	0018      	movs	r0, r3
    1938:	46bd      	mov	sp, r7
    193a:	b004      	add	sp, #16
    193c:	bd80      	pop	{r7, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	200043ec 	.word	0x200043ec
    1944:	00000551 	.word	0x00000551
    1948:	200043c4 	.word	0x200043c4
    194c:	20004384 	.word	0x20004384
    1950:	000003cf 	.word	0x000003cf
    1954:	200043cc 	.word	0x200043cc
    1958:	200042f0 	.word	0x200042f0
    195c:	0000031f 	.word	0x0000031f
    1960:	200042ec 	.word	0x200042ec
    1964:	200043d8 	.word	0x200043d8
    1968:	00001ff5 	.word	0x00001ff5
    196c:	200043d4 	.word	0x200043d4
    1970:	000019b9 	.word	0x000019b9
    1974:	00000531 	.word	0x00000531
    1978:	00000575 	.word	0x00000575

0000197c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    197c:	b580      	push	{r7, lr}
    197e:	b082      	sub	sp, #8
    1980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    1982:	4b04      	ldr	r3, [pc, #16]	; (1994 <xTaskGetTickCount+0x18>)
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    1988:	687b      	ldr	r3, [r7, #4]
}
    198a:	0018      	movs	r0, r3
    198c:	46bd      	mov	sp, r7
    198e:	b002      	add	sp, #8
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	200043c8 	.word	0x200043c8

00001998 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    1998:	b580      	push	{r7, lr}
    199a:	b082      	sub	sp, #8
    199c:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    199e:	2300      	movs	r3, #0
    19a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
    19a2:	4b04      	ldr	r3, [pc, #16]	; (19b4 <xTaskGetTickCountFromISR+0x1c>)
    19a4:	681b      	ldr	r3, [r3, #0]
    19a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    19a8:	683b      	ldr	r3, [r7, #0]
}
    19aa:	0018      	movs	r0, r3
    19ac:	46bd      	mov	sp, r7
    19ae:	b002      	add	sp, #8
    19b0:	bd80      	pop	{r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	200043c8 	.word	0x200043c8

000019b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    19b8:	b580      	push	{r7, lr}
    19ba:	b086      	sub	sp, #24
    19bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    19be:	2300      	movs	r3, #0
    19c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    19c2:	4b4e      	ldr	r3, [pc, #312]	; (1afc <xTaskIncrementTick+0x144>)
    19c4:	681b      	ldr	r3, [r3, #0]
    19c6:	2b00      	cmp	r3, #0
    19c8:	d000      	beq.n	19cc <xTaskIncrementTick+0x14>
    19ca:	e084      	b.n	1ad6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    19cc:	4b4c      	ldr	r3, [pc, #304]	; (1b00 <xTaskIncrementTick+0x148>)
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	3301      	adds	r3, #1
    19d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    19d4:	4b4a      	ldr	r3, [pc, #296]	; (1b00 <xTaskIncrementTick+0x148>)
    19d6:	693a      	ldr	r2, [r7, #16]
    19d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    19da:	693b      	ldr	r3, [r7, #16]
    19dc:	2b00      	cmp	r3, #0
    19de:	d117      	bne.n	1a10 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    19e0:	4b48      	ldr	r3, [pc, #288]	; (1b04 <xTaskIncrementTick+0x14c>)
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	681b      	ldr	r3, [r3, #0]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d001      	beq.n	19ee <xTaskIncrementTick+0x36>
    19ea:	b672      	cpsid	i
    19ec:	e7fe      	b.n	19ec <xTaskIncrementTick+0x34>
    19ee:	4b45      	ldr	r3, [pc, #276]	; (1b04 <xTaskIncrementTick+0x14c>)
    19f0:	681b      	ldr	r3, [r3, #0]
    19f2:	60fb      	str	r3, [r7, #12]
    19f4:	4b44      	ldr	r3, [pc, #272]	; (1b08 <xTaskIncrementTick+0x150>)
    19f6:	681a      	ldr	r2, [r3, #0]
    19f8:	4b42      	ldr	r3, [pc, #264]	; (1b04 <xTaskIncrementTick+0x14c>)
    19fa:	601a      	str	r2, [r3, #0]
    19fc:	4b42      	ldr	r3, [pc, #264]	; (1b08 <xTaskIncrementTick+0x150>)
    19fe:	68fa      	ldr	r2, [r7, #12]
    1a00:	601a      	str	r2, [r3, #0]
    1a02:	4b42      	ldr	r3, [pc, #264]	; (1b0c <xTaskIncrementTick+0x154>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	1c5a      	adds	r2, r3, #1
    1a08:	4b40      	ldr	r3, [pc, #256]	; (1b0c <xTaskIncrementTick+0x154>)
    1a0a:	601a      	str	r2, [r3, #0]
    1a0c:	4b40      	ldr	r3, [pc, #256]	; (1b10 <xTaskIncrementTick+0x158>)
    1a0e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1a10:	4b40      	ldr	r3, [pc, #256]	; (1b14 <xTaskIncrementTick+0x15c>)
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	693a      	ldr	r2, [r7, #16]
    1a16:	429a      	cmp	r2, r3
    1a18:	d349      	bcc.n	1aae <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1a1a:	4b3a      	ldr	r3, [pc, #232]	; (1b04 <xTaskIncrementTick+0x14c>)
    1a1c:	681b      	ldr	r3, [r3, #0]
    1a1e:	681b      	ldr	r3, [r3, #0]
    1a20:	2b00      	cmp	r3, #0
    1a22:	d104      	bne.n	1a2e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a24:	4b3b      	ldr	r3, [pc, #236]	; (1b14 <xTaskIncrementTick+0x15c>)
    1a26:	2201      	movs	r2, #1
    1a28:	4252      	negs	r2, r2
    1a2a:	601a      	str	r2, [r3, #0]
					break;
    1a2c:	e03f      	b.n	1aae <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1a2e:	4b35      	ldr	r3, [pc, #212]	; (1b04 <xTaskIncrementTick+0x14c>)
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	68db      	ldr	r3, [r3, #12]
    1a34:	68db      	ldr	r3, [r3, #12]
    1a36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1a38:	68bb      	ldr	r3, [r7, #8]
    1a3a:	685b      	ldr	r3, [r3, #4]
    1a3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    1a3e:	693a      	ldr	r2, [r7, #16]
    1a40:	687b      	ldr	r3, [r7, #4]
    1a42:	429a      	cmp	r2, r3
    1a44:	d203      	bcs.n	1a4e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1a46:	4b33      	ldr	r3, [pc, #204]	; (1b14 <xTaskIncrementTick+0x15c>)
    1a48:	687a      	ldr	r2, [r7, #4]
    1a4a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    1a4c:	e02f      	b.n	1aae <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1a4e:	68bb      	ldr	r3, [r7, #8]
    1a50:	3304      	adds	r3, #4
    1a52:	0018      	movs	r0, r3
    1a54:	4b30      	ldr	r3, [pc, #192]	; (1b18 <xTaskIncrementTick+0x160>)
    1a56:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1a58:	68bb      	ldr	r3, [r7, #8]
    1a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d004      	beq.n	1a6a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1a60:	68bb      	ldr	r3, [r7, #8]
    1a62:	3318      	adds	r3, #24
    1a64:	0018      	movs	r0, r3
    1a66:	4b2c      	ldr	r3, [pc, #176]	; (1b18 <xTaskIncrementTick+0x160>)
    1a68:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1a6a:	68bb      	ldr	r3, [r7, #8]
    1a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a6e:	4b2b      	ldr	r3, [pc, #172]	; (1b1c <xTaskIncrementTick+0x164>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	429a      	cmp	r2, r3
    1a74:	d903      	bls.n	1a7e <xTaskIncrementTick+0xc6>
    1a76:	68bb      	ldr	r3, [r7, #8]
    1a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a7a:	4b28      	ldr	r3, [pc, #160]	; (1b1c <xTaskIncrementTick+0x164>)
    1a7c:	601a      	str	r2, [r3, #0]
    1a7e:	68bb      	ldr	r3, [r7, #8]
    1a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a82:	0013      	movs	r3, r2
    1a84:	009b      	lsls	r3, r3, #2
    1a86:	189b      	adds	r3, r3, r2
    1a88:	009b      	lsls	r3, r3, #2
    1a8a:	4a25      	ldr	r2, [pc, #148]	; (1b20 <xTaskIncrementTick+0x168>)
    1a8c:	189a      	adds	r2, r3, r2
    1a8e:	68bb      	ldr	r3, [r7, #8]
    1a90:	3304      	adds	r3, #4
    1a92:	0019      	movs	r1, r3
    1a94:	0010      	movs	r0, r2
    1a96:	4b23      	ldr	r3, [pc, #140]	; (1b24 <xTaskIncrementTick+0x16c>)
    1a98:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1a9a:	68bb      	ldr	r3, [r7, #8]
    1a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a9e:	4b22      	ldr	r3, [pc, #136]	; (1b28 <xTaskIncrementTick+0x170>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1aa4:	429a      	cmp	r2, r3
    1aa6:	d3b8      	bcc.n	1a1a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    1aa8:	2301      	movs	r3, #1
    1aaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1aac:	e7b5      	b.n	1a1a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1aae:	4b1e      	ldr	r3, [pc, #120]	; (1b28 <xTaskIncrementTick+0x170>)
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ab4:	491a      	ldr	r1, [pc, #104]	; (1b20 <xTaskIncrementTick+0x168>)
    1ab6:	0013      	movs	r3, r2
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	189b      	adds	r3, r3, r2
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	585b      	ldr	r3, [r3, r1]
    1ac0:	2b01      	cmp	r3, #1
    1ac2:	d901      	bls.n	1ac8 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
    1ac4:	2301      	movs	r3, #1
    1ac6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    1ac8:	4b18      	ldr	r3, [pc, #96]	; (1b2c <xTaskIncrementTick+0x174>)
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	2b00      	cmp	r3, #0
    1ace:	d109      	bne.n	1ae4 <xTaskIncrementTick+0x12c>
			{
				vApplicationTickHook();
    1ad0:	4b17      	ldr	r3, [pc, #92]	; (1b30 <xTaskIncrementTick+0x178>)
    1ad2:	4798      	blx	r3
    1ad4:	e006      	b.n	1ae4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1ad6:	4b15      	ldr	r3, [pc, #84]	; (1b2c <xTaskIncrementTick+0x174>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	1c5a      	adds	r2, r3, #1
    1adc:	4b13      	ldr	r3, [pc, #76]	; (1b2c <xTaskIncrementTick+0x174>)
    1ade:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    1ae0:	4b13      	ldr	r3, [pc, #76]	; (1b30 <xTaskIncrementTick+0x178>)
    1ae2:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1ae4:	4b13      	ldr	r3, [pc, #76]	; (1b34 <xTaskIncrementTick+0x17c>)
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d001      	beq.n	1af0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
    1aec:	2301      	movs	r3, #1
    1aee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    1af0:	697b      	ldr	r3, [r7, #20]
}
    1af2:	0018      	movs	r0, r3
    1af4:	46bd      	mov	sp, r7
    1af6:	b006      	add	sp, #24
    1af8:	bd80      	pop	{r7, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	200043ec 	.word	0x200043ec
    1b00:	200043c8 	.word	0x200043c8
    1b04:	2000437c 	.word	0x2000437c
    1b08:	20004380 	.word	0x20004380
    1b0c:	200043dc 	.word	0x200043dc
    1b10:	00001ff5 	.word	0x00001ff5
    1b14:	200043e4 	.word	0x200043e4
    1b18:	000003cf 	.word	0x000003cf
    1b1c:	200043cc 	.word	0x200043cc
    1b20:	200042f0 	.word	0x200042f0
    1b24:	0000031f 	.word	0x0000031f
    1b28:	200042ec 	.word	0x200042ec
    1b2c:	200043d4 	.word	0x200043d4
    1b30:	00002907 	.word	0x00002907
    1b34:	200043d8 	.word	0x200043d8

00001b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1b38:	b580      	push	{r7, lr}
    1b3a:	b084      	sub	sp, #16
    1b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1b3e:	4b41      	ldr	r3, [pc, #260]	; (1c44 <vTaskSwitchContext+0x10c>)
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d003      	beq.n	1b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1b46:	4b40      	ldr	r3, [pc, #256]	; (1c48 <vTaskSwitchContext+0x110>)
    1b48:	2201      	movs	r2, #1
    1b4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1b4c:	e076      	b.n	1c3c <vTaskSwitchContext+0x104>
		xYieldPending = pdFALSE;
    1b4e:	4b3e      	ldr	r3, [pc, #248]	; (1c48 <vTaskSwitchContext+0x110>)
    1b50:	2200      	movs	r2, #0
    1b52:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    1b54:	4b3d      	ldr	r3, [pc, #244]	; (1c4c <vTaskSwitchContext+0x114>)
    1b56:	4798      	blx	r3
    1b58:	0002      	movs	r2, r0
    1b5a:	4b3d      	ldr	r3, [pc, #244]	; (1c50 <vTaskSwitchContext+0x118>)
    1b5c:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
    1b5e:	4b3c      	ldr	r3, [pc, #240]	; (1c50 <vTaskSwitchContext+0x118>)
    1b60:	681a      	ldr	r2, [r3, #0]
    1b62:	4b3c      	ldr	r3, [pc, #240]	; (1c54 <vTaskSwitchContext+0x11c>)
    1b64:	681b      	ldr	r3, [r3, #0]
    1b66:	429a      	cmp	r2, r3
    1b68:	d909      	bls.n	1b7e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    1b6a:	4b3b      	ldr	r3, [pc, #236]	; (1c58 <vTaskSwitchContext+0x120>)
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    1b70:	4a37      	ldr	r2, [pc, #220]	; (1c50 <vTaskSwitchContext+0x118>)
    1b72:	6810      	ldr	r0, [r2, #0]
    1b74:	4a37      	ldr	r2, [pc, #220]	; (1c54 <vTaskSwitchContext+0x11c>)
    1b76:	6812      	ldr	r2, [r2, #0]
    1b78:	1a82      	subs	r2, r0, r2
    1b7a:	188a      	adds	r2, r1, r2
    1b7c:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
    1b7e:	4b34      	ldr	r3, [pc, #208]	; (1c50 <vTaskSwitchContext+0x118>)
    1b80:	681a      	ldr	r2, [r3, #0]
    1b82:	4b34      	ldr	r3, [pc, #208]	; (1c54 <vTaskSwitchContext+0x11c>)
    1b84:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1b86:	4b34      	ldr	r3, [pc, #208]	; (1c58 <vTaskSwitchContext+0x120>)
    1b88:	681b      	ldr	r3, [r3, #0]
    1b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b8c:	60bb      	str	r3, [r7, #8]
    1b8e:	4b33      	ldr	r3, [pc, #204]	; (1c5c <vTaskSwitchContext+0x124>)
    1b90:	607b      	str	r3, [r7, #4]
    1b92:	68bb      	ldr	r3, [r7, #8]
    1b94:	681a      	ldr	r2, [r3, #0]
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	429a      	cmp	r2, r3
    1b9a:	d111      	bne.n	1bc0 <vTaskSwitchContext+0x88>
    1b9c:	68bb      	ldr	r3, [r7, #8]
    1b9e:	3304      	adds	r3, #4
    1ba0:	681a      	ldr	r2, [r3, #0]
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	429a      	cmp	r2, r3
    1ba6:	d10b      	bne.n	1bc0 <vTaskSwitchContext+0x88>
    1ba8:	68bb      	ldr	r3, [r7, #8]
    1baa:	3308      	adds	r3, #8
    1bac:	681a      	ldr	r2, [r3, #0]
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	429a      	cmp	r2, r3
    1bb2:	d105      	bne.n	1bc0 <vTaskSwitchContext+0x88>
    1bb4:	68bb      	ldr	r3, [r7, #8]
    1bb6:	330c      	adds	r3, #12
    1bb8:	681a      	ldr	r2, [r3, #0]
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	429a      	cmp	r2, r3
    1bbe:	d008      	beq.n	1bd2 <vTaskSwitchContext+0x9a>
    1bc0:	4b25      	ldr	r3, [pc, #148]	; (1c58 <vTaskSwitchContext+0x120>)
    1bc2:	681a      	ldr	r2, [r3, #0]
    1bc4:	4b24      	ldr	r3, [pc, #144]	; (1c58 <vTaskSwitchContext+0x120>)
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	3334      	adds	r3, #52	; 0x34
    1bca:	0019      	movs	r1, r3
    1bcc:	0010      	movs	r0, r2
    1bce:	4b24      	ldr	r3, [pc, #144]	; (1c60 <vTaskSwitchContext+0x128>)
    1bd0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1bd2:	4b24      	ldr	r3, [pc, #144]	; (1c64 <vTaskSwitchContext+0x12c>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	60fb      	str	r3, [r7, #12]
    1bd8:	e007      	b.n	1bea <vTaskSwitchContext+0xb2>
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d101      	bne.n	1be4 <vTaskSwitchContext+0xac>
    1be0:	b672      	cpsid	i
    1be2:	e7fe      	b.n	1be2 <vTaskSwitchContext+0xaa>
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	3b01      	subs	r3, #1
    1be8:	60fb      	str	r3, [r7, #12]
    1bea:	491f      	ldr	r1, [pc, #124]	; (1c68 <vTaskSwitchContext+0x130>)
    1bec:	68fa      	ldr	r2, [r7, #12]
    1bee:	0013      	movs	r3, r2
    1bf0:	009b      	lsls	r3, r3, #2
    1bf2:	189b      	adds	r3, r3, r2
    1bf4:	009b      	lsls	r3, r3, #2
    1bf6:	585b      	ldr	r3, [r3, r1]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d0ee      	beq.n	1bda <vTaskSwitchContext+0xa2>
    1bfc:	68fa      	ldr	r2, [r7, #12]
    1bfe:	0013      	movs	r3, r2
    1c00:	009b      	lsls	r3, r3, #2
    1c02:	189b      	adds	r3, r3, r2
    1c04:	009b      	lsls	r3, r3, #2
    1c06:	4a18      	ldr	r2, [pc, #96]	; (1c68 <vTaskSwitchContext+0x130>)
    1c08:	189b      	adds	r3, r3, r2
    1c0a:	603b      	str	r3, [r7, #0]
    1c0c:	683b      	ldr	r3, [r7, #0]
    1c0e:	685b      	ldr	r3, [r3, #4]
    1c10:	685a      	ldr	r2, [r3, #4]
    1c12:	683b      	ldr	r3, [r7, #0]
    1c14:	605a      	str	r2, [r3, #4]
    1c16:	683b      	ldr	r3, [r7, #0]
    1c18:	685a      	ldr	r2, [r3, #4]
    1c1a:	683b      	ldr	r3, [r7, #0]
    1c1c:	3308      	adds	r3, #8
    1c1e:	429a      	cmp	r2, r3
    1c20:	d104      	bne.n	1c2c <vTaskSwitchContext+0xf4>
    1c22:	683b      	ldr	r3, [r7, #0]
    1c24:	685b      	ldr	r3, [r3, #4]
    1c26:	685a      	ldr	r2, [r3, #4]
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	605a      	str	r2, [r3, #4]
    1c2c:	683b      	ldr	r3, [r7, #0]
    1c2e:	685b      	ldr	r3, [r3, #4]
    1c30:	68da      	ldr	r2, [r3, #12]
    1c32:	4b09      	ldr	r3, [pc, #36]	; (1c58 <vTaskSwitchContext+0x120>)
    1c34:	601a      	str	r2, [r3, #0]
    1c36:	4b0b      	ldr	r3, [pc, #44]	; (1c64 <vTaskSwitchContext+0x12c>)
    1c38:	68fa      	ldr	r2, [r7, #12]
    1c3a:	601a      	str	r2, [r3, #0]
}
    1c3c:	46c0      	nop			; (mov r8, r8)
    1c3e:	46bd      	mov	sp, r7
    1c40:	b004      	add	sp, #16
    1c42:	bd80      	pop	{r7, pc}
    1c44:	200043ec 	.word	0x200043ec
    1c48:	200043d8 	.word	0x200043d8
    1c4c:	00002945 	.word	0x00002945
    1c50:	200043f4 	.word	0x200043f4
    1c54:	200043f0 	.word	0x200043f0
    1c58:	200042ec 	.word	0x200042ec
    1c5c:	a5a5a5a5 	.word	0xa5a5a5a5
    1c60:	000028f9 	.word	0x000028f9
    1c64:	200043cc 	.word	0x200043cc
    1c68:	200042f0 	.word	0x200042f0

00001c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b082      	sub	sp, #8
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
    1c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d101      	bne.n	1c80 <vTaskPlaceOnEventList+0x14>
    1c7c:	b672      	cpsid	i
    1c7e:	e7fe      	b.n	1c7e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1c80:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <vTaskPlaceOnEventList+0x38>)
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	3318      	adds	r3, #24
    1c86:	001a      	movs	r2, r3
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	0011      	movs	r1, r2
    1c8c:	0018      	movs	r0, r3
    1c8e:	4b06      	ldr	r3, [pc, #24]	; (1ca8 <vTaskPlaceOnEventList+0x3c>)
    1c90:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1c92:	683b      	ldr	r3, [r7, #0]
    1c94:	2101      	movs	r1, #1
    1c96:	0018      	movs	r0, r3
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <vTaskPlaceOnEventList+0x40>)
    1c9a:	4798      	blx	r3
}
    1c9c:	46c0      	nop			; (mov r8, r8)
    1c9e:	46bd      	mov	sp, r7
    1ca0:	b002      	add	sp, #8
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	200042ec 	.word	0x200042ec
    1ca8:	00000363 	.word	0x00000363
    1cac:	00002129 	.word	0x00002129

00001cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b084      	sub	sp, #16
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	60f8      	str	r0, [r7, #12]
    1cb8:	60b9      	str	r1, [r7, #8]
    1cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    1cbc:	68fb      	ldr	r3, [r7, #12]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d101      	bne.n	1cc6 <vTaskPlaceOnEventListRestricted+0x16>
    1cc2:	b672      	cpsid	i
    1cc4:	e7fe      	b.n	1cc4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1cc6:	4b0c      	ldr	r3, [pc, #48]	; (1cf8 <vTaskPlaceOnEventListRestricted+0x48>)
    1cc8:	681b      	ldr	r3, [r3, #0]
    1cca:	3318      	adds	r3, #24
    1ccc:	001a      	movs	r2, r3
    1cce:	68fb      	ldr	r3, [r7, #12]
    1cd0:	0011      	movs	r1, r2
    1cd2:	0018      	movs	r0, r3
    1cd4:	4b09      	ldr	r3, [pc, #36]	; (1cfc <vTaskPlaceOnEventListRestricted+0x4c>)
    1cd6:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d002      	beq.n	1ce4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    1cde:	2301      	movs	r3, #1
    1ce0:	425b      	negs	r3, r3
    1ce2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1ce4:	687a      	ldr	r2, [r7, #4]
    1ce6:	68bb      	ldr	r3, [r7, #8]
    1ce8:	0011      	movs	r1, r2
    1cea:	0018      	movs	r0, r3
    1cec:	4b04      	ldr	r3, [pc, #16]	; (1d00 <vTaskPlaceOnEventListRestricted+0x50>)
    1cee:	4798      	blx	r3
	}
    1cf0:	46c0      	nop			; (mov r8, r8)
    1cf2:	46bd      	mov	sp, r7
    1cf4:	b004      	add	sp, #16
    1cf6:	bd80      	pop	{r7, pc}
    1cf8:	200042ec 	.word	0x200042ec
    1cfc:	0000031f 	.word	0x0000031f
    1d00:	00002129 	.word	0x00002129

00001d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1d04:	b580      	push	{r7, lr}
    1d06:	b084      	sub	sp, #16
    1d08:	af00      	add	r7, sp, #0
    1d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	68db      	ldr	r3, [r3, #12]
    1d10:	68db      	ldr	r3, [r3, #12]
    1d12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1d14:	68bb      	ldr	r3, [r7, #8]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d101      	bne.n	1d1e <xTaskRemoveFromEventList+0x1a>
    1d1a:	b672      	cpsid	i
    1d1c:	e7fe      	b.n	1d1c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1d1e:	68bb      	ldr	r3, [r7, #8]
    1d20:	3318      	adds	r3, #24
    1d22:	0018      	movs	r0, r3
    1d24:	4b1f      	ldr	r3, [pc, #124]	; (1da4 <xTaskRemoveFromEventList+0xa0>)
    1d26:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d28:	4b1f      	ldr	r3, [pc, #124]	; (1da8 <xTaskRemoveFromEventList+0xa4>)
    1d2a:	681b      	ldr	r3, [r3, #0]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d11d      	bne.n	1d6c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1d30:	68bb      	ldr	r3, [r7, #8]
    1d32:	3304      	adds	r3, #4
    1d34:	0018      	movs	r0, r3
    1d36:	4b1b      	ldr	r3, [pc, #108]	; (1da4 <xTaskRemoveFromEventList+0xa0>)
    1d38:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    1d3a:	68bb      	ldr	r3, [r7, #8]
    1d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d3e:	4b1b      	ldr	r3, [pc, #108]	; (1dac <xTaskRemoveFromEventList+0xa8>)
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	429a      	cmp	r2, r3
    1d44:	d903      	bls.n	1d4e <xTaskRemoveFromEventList+0x4a>
    1d46:	68bb      	ldr	r3, [r7, #8]
    1d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d4a:	4b18      	ldr	r3, [pc, #96]	; (1dac <xTaskRemoveFromEventList+0xa8>)
    1d4c:	601a      	str	r2, [r3, #0]
    1d4e:	68bb      	ldr	r3, [r7, #8]
    1d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d52:	0013      	movs	r3, r2
    1d54:	009b      	lsls	r3, r3, #2
    1d56:	189b      	adds	r3, r3, r2
    1d58:	009b      	lsls	r3, r3, #2
    1d5a:	4a15      	ldr	r2, [pc, #84]	; (1db0 <xTaskRemoveFromEventList+0xac>)
    1d5c:	189a      	adds	r2, r3, r2
    1d5e:	68bb      	ldr	r3, [r7, #8]
    1d60:	3304      	adds	r3, #4
    1d62:	0019      	movs	r1, r3
    1d64:	0010      	movs	r0, r2
    1d66:	4b13      	ldr	r3, [pc, #76]	; (1db4 <xTaskRemoveFromEventList+0xb0>)
    1d68:	4798      	blx	r3
    1d6a:	e007      	b.n	1d7c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1d6c:	68bb      	ldr	r3, [r7, #8]
    1d6e:	3318      	adds	r3, #24
    1d70:	001a      	movs	r2, r3
    1d72:	4b11      	ldr	r3, [pc, #68]	; (1db8 <xTaskRemoveFromEventList+0xb4>)
    1d74:	0011      	movs	r1, r2
    1d76:	0018      	movs	r0, r3
    1d78:	4b0e      	ldr	r3, [pc, #56]	; (1db4 <xTaskRemoveFromEventList+0xb0>)
    1d7a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1d7c:	68bb      	ldr	r3, [r7, #8]
    1d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d80:	4b0e      	ldr	r3, [pc, #56]	; (1dbc <xTaskRemoveFromEventList+0xb8>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d86:	429a      	cmp	r2, r3
    1d88:	d905      	bls.n	1d96 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    1d8a:	2301      	movs	r3, #1
    1d8c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1d8e:	4b0c      	ldr	r3, [pc, #48]	; (1dc0 <xTaskRemoveFromEventList+0xbc>)
    1d90:	2201      	movs	r2, #1
    1d92:	601a      	str	r2, [r3, #0]
    1d94:	e001      	b.n	1d9a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    1d96:	2300      	movs	r3, #0
    1d98:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    1d9a:	68fb      	ldr	r3, [r7, #12]
}
    1d9c:	0018      	movs	r0, r3
    1d9e:	46bd      	mov	sp, r7
    1da0:	b004      	add	sp, #16
    1da2:	bd80      	pop	{r7, pc}
    1da4:	000003cf 	.word	0x000003cf
    1da8:	200043ec 	.word	0x200043ec
    1dac:	200043cc 	.word	0x200043cc
    1db0:	200042f0 	.word	0x200042f0
    1db4:	0000031f 	.word	0x0000031f
    1db8:	20004384 	.word	0x20004384
    1dbc:	200042ec 	.word	0x200042ec
    1dc0:	200043d8 	.word	0x200043d8

00001dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1dcc:	4b05      	ldr	r3, [pc, #20]	; (1de4 <vTaskInternalSetTimeOutState+0x20>)
    1dce:	681a      	ldr	r2, [r3, #0]
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1dd4:	4b04      	ldr	r3, [pc, #16]	; (1de8 <vTaskInternalSetTimeOutState+0x24>)
    1dd6:	681a      	ldr	r2, [r3, #0]
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	605a      	str	r2, [r3, #4]
}
    1ddc:	46c0      	nop			; (mov r8, r8)
    1dde:	46bd      	mov	sp, r7
    1de0:	b002      	add	sp, #8
    1de2:	bd80      	pop	{r7, pc}
    1de4:	200043dc 	.word	0x200043dc
    1de8:	200043c8 	.word	0x200043c8

00001dec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1dec:	b580      	push	{r7, lr}
    1dee:	b086      	sub	sp, #24
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d101      	bne.n	1e00 <xTaskCheckForTimeOut+0x14>
    1dfc:	b672      	cpsid	i
    1dfe:	e7fe      	b.n	1dfe <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    1e00:	683b      	ldr	r3, [r7, #0]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d101      	bne.n	1e0a <xTaskCheckForTimeOut+0x1e>
    1e06:	b672      	cpsid	i
    1e08:	e7fe      	b.n	1e08 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    1e0a:	4b1e      	ldr	r3, [pc, #120]	; (1e84 <xTaskCheckForTimeOut+0x98>)
    1e0c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1e0e:	4b1e      	ldr	r3, [pc, #120]	; (1e88 <xTaskCheckForTimeOut+0x9c>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	685b      	ldr	r3, [r3, #4]
    1e18:	693a      	ldr	r2, [r7, #16]
    1e1a:	1ad3      	subs	r3, r2, r3
    1e1c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    1e1e:	683b      	ldr	r3, [r7, #0]
    1e20:	681b      	ldr	r3, [r3, #0]
    1e22:	3301      	adds	r3, #1
    1e24:	d102      	bne.n	1e2c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    1e26:	2300      	movs	r3, #0
    1e28:	617b      	str	r3, [r7, #20]
    1e2a:	e024      	b.n	1e76 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	681a      	ldr	r2, [r3, #0]
    1e30:	4b16      	ldr	r3, [pc, #88]	; (1e8c <xTaskCheckForTimeOut+0xa0>)
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	429a      	cmp	r2, r3
    1e36:	d007      	beq.n	1e48 <xTaskCheckForTimeOut+0x5c>
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	685a      	ldr	r2, [r3, #4]
    1e3c:	693b      	ldr	r3, [r7, #16]
    1e3e:	429a      	cmp	r2, r3
    1e40:	d802      	bhi.n	1e48 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    1e42:	2301      	movs	r3, #1
    1e44:	617b      	str	r3, [r7, #20]
    1e46:	e016      	b.n	1e76 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1e48:	683b      	ldr	r3, [r7, #0]
    1e4a:	681a      	ldr	r2, [r3, #0]
    1e4c:	68fb      	ldr	r3, [r7, #12]
    1e4e:	429a      	cmp	r2, r3
    1e50:	d90c      	bls.n	1e6c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    1e52:	683b      	ldr	r3, [r7, #0]
    1e54:	681a      	ldr	r2, [r3, #0]
    1e56:	68fb      	ldr	r3, [r7, #12]
    1e58:	1ad2      	subs	r2, r2, r3
    1e5a:	683b      	ldr	r3, [r7, #0]
    1e5c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	0018      	movs	r0, r3
    1e62:	4b0b      	ldr	r3, [pc, #44]	; (1e90 <xTaskCheckForTimeOut+0xa4>)
    1e64:	4798      	blx	r3
			xReturn = pdFALSE;
    1e66:	2300      	movs	r3, #0
    1e68:	617b      	str	r3, [r7, #20]
    1e6a:	e004      	b.n	1e76 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    1e6c:	683b      	ldr	r3, [r7, #0]
    1e6e:	2200      	movs	r2, #0
    1e70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    1e72:	2301      	movs	r3, #1
    1e74:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    1e76:	4b07      	ldr	r3, [pc, #28]	; (1e94 <xTaskCheckForTimeOut+0xa8>)
    1e78:	4798      	blx	r3

	return xReturn;
    1e7a:	697b      	ldr	r3, [r7, #20]
}
    1e7c:	0018      	movs	r0, r3
    1e7e:	46bd      	mov	sp, r7
    1e80:	b006      	add	sp, #24
    1e82:	bd80      	pop	{r7, pc}
    1e84:	00000551 	.word	0x00000551
    1e88:	200043c8 	.word	0x200043c8
    1e8c:	200043dc 	.word	0x200043dc
    1e90:	00001dc5 	.word	0x00001dc5
    1e94:	00000575 	.word	0x00000575

00001e98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    1e9c:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <vTaskMissedYield+0x10>)
    1e9e:	2201      	movs	r2, #1
    1ea0:	601a      	str	r2, [r3, #0]
}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	46bd      	mov	sp, r7
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	200043d8 	.word	0x200043d8

00001eac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b082      	sub	sp, #8
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <prvIdleTask+0x1c>)
    1eb6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1eb8:	4b04      	ldr	r3, [pc, #16]	; (1ecc <prvIdleTask+0x20>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2b01      	cmp	r3, #1
    1ebe:	d9f9      	bls.n	1eb4 <prvIdleTask+0x8>
			{
				taskYIELD();
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <prvIdleTask+0x24>)
    1ec2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    1ec4:	e7f6      	b.n	1eb4 <prvIdleTask+0x8>
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	00001f61 	.word	0x00001f61
    1ecc:	200042f0 	.word	0x200042f0
    1ed0:	00000531 	.word	0x00000531

00001ed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    1ed4:	b580      	push	{r7, lr}
    1ed6:	b082      	sub	sp, #8
    1ed8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1eda:	2300      	movs	r3, #0
    1edc:	607b      	str	r3, [r7, #4]
    1ede:	e00c      	b.n	1efa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1ee0:	687a      	ldr	r2, [r7, #4]
    1ee2:	0013      	movs	r3, r2
    1ee4:	009b      	lsls	r3, r3, #2
    1ee6:	189b      	adds	r3, r3, r2
    1ee8:	009b      	lsls	r3, r3, #2
    1eea:	4a14      	ldr	r2, [pc, #80]	; (1f3c <prvInitialiseTaskLists+0x68>)
    1eec:	189b      	adds	r3, r3, r2
    1eee:	0018      	movs	r0, r3
    1ef0:	4b13      	ldr	r3, [pc, #76]	; (1f40 <prvInitialiseTaskLists+0x6c>)
    1ef2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	3301      	adds	r3, #1
    1ef8:	607b      	str	r3, [r7, #4]
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	2b04      	cmp	r3, #4
    1efe:	d9ef      	bls.n	1ee0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    1f00:	4b10      	ldr	r3, [pc, #64]	; (1f44 <prvInitialiseTaskLists+0x70>)
    1f02:	0018      	movs	r0, r3
    1f04:	4b0e      	ldr	r3, [pc, #56]	; (1f40 <prvInitialiseTaskLists+0x6c>)
    1f06:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    1f08:	4b0f      	ldr	r3, [pc, #60]	; (1f48 <prvInitialiseTaskLists+0x74>)
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b0c      	ldr	r3, [pc, #48]	; (1f40 <prvInitialiseTaskLists+0x6c>)
    1f0e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    1f10:	4b0e      	ldr	r3, [pc, #56]	; (1f4c <prvInitialiseTaskLists+0x78>)
    1f12:	0018      	movs	r0, r3
    1f14:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <prvInitialiseTaskLists+0x6c>)
    1f16:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1f18:	4b0d      	ldr	r3, [pc, #52]	; (1f50 <prvInitialiseTaskLists+0x7c>)
    1f1a:	0018      	movs	r0, r3
    1f1c:	4b08      	ldr	r3, [pc, #32]	; (1f40 <prvInitialiseTaskLists+0x6c>)
    1f1e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1f20:	4b0c      	ldr	r3, [pc, #48]	; (1f54 <prvInitialiseTaskLists+0x80>)
    1f22:	0018      	movs	r0, r3
    1f24:	4b06      	ldr	r3, [pc, #24]	; (1f40 <prvInitialiseTaskLists+0x6c>)
    1f26:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1f28:	4b0b      	ldr	r3, [pc, #44]	; (1f58 <prvInitialiseTaskLists+0x84>)
    1f2a:	4a06      	ldr	r2, [pc, #24]	; (1f44 <prvInitialiseTaskLists+0x70>)
    1f2c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1f2e:	4b0b      	ldr	r3, [pc, #44]	; (1f5c <prvInitialiseTaskLists+0x88>)
    1f30:	4a05      	ldr	r2, [pc, #20]	; (1f48 <prvInitialiseTaskLists+0x74>)
    1f32:	601a      	str	r2, [r3, #0]
}
    1f34:	46c0      	nop			; (mov r8, r8)
    1f36:	46bd      	mov	sp, r7
    1f38:	b002      	add	sp, #8
    1f3a:	bd80      	pop	{r7, pc}
    1f3c:	200042f0 	.word	0x200042f0
    1f40:	000002cd 	.word	0x000002cd
    1f44:	20004354 	.word	0x20004354
    1f48:	20004368 	.word	0x20004368
    1f4c:	20004384 	.word	0x20004384
    1f50:	20004398 	.word	0x20004398
    1f54:	200043b0 	.word	0x200043b0
    1f58:	2000437c 	.word	0x2000437c
    1f5c:	20004380 	.word	0x20004380

00001f60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b082      	sub	sp, #8
    1f64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1f66:	e01a      	b.n	1f9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    1f68:	4b11      	ldr	r3, [pc, #68]	; (1fb0 <prvCheckTasksWaitingTermination+0x50>)
    1f6a:	4798      	blx	r3
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f6c:	4b11      	ldr	r3, [pc, #68]	; (1fb4 <prvCheckTasksWaitingTermination+0x54>)
    1f6e:	68db      	ldr	r3, [r3, #12]
    1f70:	68db      	ldr	r3, [r3, #12]
    1f72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	3304      	adds	r3, #4
    1f78:	0018      	movs	r0, r3
    1f7a:	4b0f      	ldr	r3, [pc, #60]	; (1fb8 <prvCheckTasksWaitingTermination+0x58>)
    1f7c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    1f7e:	4b0f      	ldr	r3, [pc, #60]	; (1fbc <prvCheckTasksWaitingTermination+0x5c>)
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	1e5a      	subs	r2, r3, #1
    1f84:	4b0d      	ldr	r3, [pc, #52]	; (1fbc <prvCheckTasksWaitingTermination+0x5c>)
    1f86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    1f88:	4b0d      	ldr	r3, [pc, #52]	; (1fc0 <prvCheckTasksWaitingTermination+0x60>)
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	1e5a      	subs	r2, r3, #1
    1f8e:	4b0c      	ldr	r3, [pc, #48]	; (1fc0 <prvCheckTasksWaitingTermination+0x60>)
    1f90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    1f92:	4b0c      	ldr	r3, [pc, #48]	; (1fc4 <prvCheckTasksWaitingTermination+0x64>)
    1f94:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	0018      	movs	r0, r3
    1f9a:	4b0b      	ldr	r3, [pc, #44]	; (1fc8 <prvCheckTasksWaitingTermination+0x68>)
    1f9c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1f9e:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <prvCheckTasksWaitingTermination+0x60>)
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d1e0      	bne.n	1f68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	46bd      	mov	sp, r7
    1faa:	b002      	add	sp, #8
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	00000551 	.word	0x00000551
    1fb4:	20004398 	.word	0x20004398
    1fb8:	000003cf 	.word	0x000003cf
    1fbc:	200043c4 	.word	0x200043c4
    1fc0:	200043ac 	.word	0x200043ac
    1fc4:	00000575 	.word	0x00000575
    1fc8:	00001fcd 	.word	0x00001fcd

00001fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b082      	sub	sp, #8
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fd8:	0018      	movs	r0, r3
    1fda:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <prvDeleteTCB+0x24>)
    1fdc:	4798      	blx	r3
			vPortFree( pxTCB );
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	0018      	movs	r0, r3
    1fe2:	4b03      	ldr	r3, [pc, #12]	; (1ff0 <prvDeleteTCB+0x24>)
    1fe4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	46bd      	mov	sp, r7
    1fea:	b002      	add	sp, #8
    1fec:	bd80      	pop	{r7, pc}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	000007f9 	.word	0x000007f9

00001ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	b082      	sub	sp, #8
    1ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1ffa:	4b0b      	ldr	r3, [pc, #44]	; (2028 <STACK_SIZE+0x28>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	681b      	ldr	r3, [r3, #0]
    2000:	2b00      	cmp	r3, #0
    2002:	d104      	bne.n	200e <STACK_SIZE+0xe>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    2004:	4b09      	ldr	r3, [pc, #36]	; (202c <STACK_SIZE+0x2c>)
    2006:	2201      	movs	r2, #1
    2008:	4252      	negs	r2, r2
    200a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    200c:	e008      	b.n	2020 <STACK_SIZE+0x20>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    200e:	4b06      	ldr	r3, [pc, #24]	; (2028 <STACK_SIZE+0x28>)
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	68db      	ldr	r3, [r3, #12]
    2014:	68db      	ldr	r3, [r3, #12]
    2016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	685a      	ldr	r2, [r3, #4]
    201c:	4b03      	ldr	r3, [pc, #12]	; (202c <STACK_SIZE+0x2c>)
    201e:	601a      	str	r2, [r3, #0]
}
    2020:	46c0      	nop			; (mov r8, r8)
    2022:	46bd      	mov	sp, r7
    2024:	b002      	add	sp, #8
    2026:	bd80      	pop	{r7, pc}
    2028:	2000437c 	.word	0x2000437c
    202c:	200043e4 	.word	0x200043e4

00002030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    2030:	b580      	push	{r7, lr}
    2032:	b082      	sub	sp, #8
    2034:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2036:	4b0a      	ldr	r3, [pc, #40]	; (2060 <xTaskGetSchedulerState+0x30>)
    2038:	681b      	ldr	r3, [r3, #0]
    203a:	2b00      	cmp	r3, #0
    203c:	d102      	bne.n	2044 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    203e:	2301      	movs	r3, #1
    2040:	607b      	str	r3, [r7, #4]
    2042:	e008      	b.n	2056 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2044:	4b07      	ldr	r3, [pc, #28]	; (2064 <xTaskGetSchedulerState+0x34>)
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	2b00      	cmp	r3, #0
    204a:	d102      	bne.n	2052 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    204c:	2302      	movs	r3, #2
    204e:	607b      	str	r3, [r7, #4]
    2050:	e001      	b.n	2056 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2052:	2300      	movs	r3, #0
    2054:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    2056:	687b      	ldr	r3, [r7, #4]
	}
    2058:	0018      	movs	r0, r3
    205a:	46bd      	mov	sp, r7
    205c:	b002      	add	sp, #8
    205e:	bd80      	pop	{r7, pc}
    2060:	200043d0 	.word	0x200043d0
    2064:	200043ec 	.word	0x200043ec

00002068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
    2070:	687b      	ldr	r3, [r7, #4]
    2072:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    2074:	2300      	movs	r3, #0
    2076:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	2b00      	cmp	r3, #0
    207c:	d044      	beq.n	2108 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    207e:	4b25      	ldr	r3, [pc, #148]	; (2114 <xTaskPriorityDisinherit+0xac>)
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	68ba      	ldr	r2, [r7, #8]
    2084:	429a      	cmp	r2, r3
    2086:	d001      	beq.n	208c <xTaskPriorityDisinherit+0x24>
    2088:	b672      	cpsid	i
    208a:	e7fe      	b.n	208a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    208c:	68bb      	ldr	r3, [r7, #8]
    208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2090:	2b00      	cmp	r3, #0
    2092:	d101      	bne.n	2098 <xTaskPriorityDisinherit+0x30>
    2094:	b672      	cpsid	i
    2096:	e7fe      	b.n	2096 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    2098:	68bb      	ldr	r3, [r7, #8]
    209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    209c:	1e5a      	subs	r2, r3, #1
    209e:	68bb      	ldr	r3, [r7, #8]
    20a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    20a2:	68bb      	ldr	r3, [r7, #8]
    20a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20a6:	68bb      	ldr	r3, [r7, #8]
    20a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    20aa:	429a      	cmp	r2, r3
    20ac:	d02c      	beq.n	2108 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    20ae:	68bb      	ldr	r3, [r7, #8]
    20b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    20b2:	2b00      	cmp	r3, #0
    20b4:	d128      	bne.n	2108 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    20b6:	68bb      	ldr	r3, [r7, #8]
    20b8:	3304      	adds	r3, #4
    20ba:	0018      	movs	r0, r3
    20bc:	4b16      	ldr	r3, [pc, #88]	; (2118 <xTaskPriorityDisinherit+0xb0>)
    20be:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    20c0:	68bb      	ldr	r3, [r7, #8]
    20c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    20c4:	68bb      	ldr	r3, [r7, #8]
    20c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    20c8:	68bb      	ldr	r3, [r7, #8]
    20ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    20cc:	2205      	movs	r2, #5
    20ce:	1ad2      	subs	r2, r2, r3
    20d0:	68bb      	ldr	r3, [r7, #8]
    20d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    20d4:	68bb      	ldr	r3, [r7, #8]
    20d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20d8:	4b10      	ldr	r3, [pc, #64]	; (211c <xTaskPriorityDisinherit+0xb4>)
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	429a      	cmp	r2, r3
    20de:	d903      	bls.n	20e8 <xTaskPriorityDisinherit+0x80>
    20e0:	68bb      	ldr	r3, [r7, #8]
    20e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20e4:	4b0d      	ldr	r3, [pc, #52]	; (211c <xTaskPriorityDisinherit+0xb4>)
    20e6:	601a      	str	r2, [r3, #0]
    20e8:	68bb      	ldr	r3, [r7, #8]
    20ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20ec:	0013      	movs	r3, r2
    20ee:	009b      	lsls	r3, r3, #2
    20f0:	189b      	adds	r3, r3, r2
    20f2:	009b      	lsls	r3, r3, #2
    20f4:	4a0a      	ldr	r2, [pc, #40]	; (2120 <xTaskPriorityDisinherit+0xb8>)
    20f6:	189a      	adds	r2, r3, r2
    20f8:	68bb      	ldr	r3, [r7, #8]
    20fa:	3304      	adds	r3, #4
    20fc:	0019      	movs	r1, r3
    20fe:	0010      	movs	r0, r2
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <xTaskPriorityDisinherit+0xbc>)
    2102:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    2104:	2301      	movs	r3, #1
    2106:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2108:	68fb      	ldr	r3, [r7, #12]
	}
    210a:	0018      	movs	r0, r3
    210c:	46bd      	mov	sp, r7
    210e:	b004      	add	sp, #16
    2110:	bd80      	pop	{r7, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	200042ec 	.word	0x200042ec
    2118:	000003cf 	.word	0x000003cf
    211c:	200043cc 	.word	0x200043cc
    2120:	200042f0 	.word	0x200042f0
    2124:	0000031f 	.word	0x0000031f

00002128 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2128:	b580      	push	{r7, lr}
    212a:	b084      	sub	sp, #16
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
    2130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2132:	4b21      	ldr	r3, [pc, #132]	; (21b8 <prvAddCurrentTaskToDelayedList+0x90>)
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2138:	4b20      	ldr	r3, [pc, #128]	; (21bc <prvAddCurrentTaskToDelayedList+0x94>)
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	3304      	adds	r3, #4
    213e:	0018      	movs	r0, r3
    2140:	4b1f      	ldr	r3, [pc, #124]	; (21c0 <prvAddCurrentTaskToDelayedList+0x98>)
    2142:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	3301      	adds	r3, #1
    2148:	d10b      	bne.n	2162 <prvAddCurrentTaskToDelayedList+0x3a>
    214a:	683b      	ldr	r3, [r7, #0]
    214c:	2b00      	cmp	r3, #0
    214e:	d008      	beq.n	2162 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2150:	4b1a      	ldr	r3, [pc, #104]	; (21bc <prvAddCurrentTaskToDelayedList+0x94>)
    2152:	681b      	ldr	r3, [r3, #0]
    2154:	1d1a      	adds	r2, r3, #4
    2156:	4b1b      	ldr	r3, [pc, #108]	; (21c4 <prvAddCurrentTaskToDelayedList+0x9c>)
    2158:	0011      	movs	r1, r2
    215a:	0018      	movs	r0, r3
    215c:	4b1a      	ldr	r3, [pc, #104]	; (21c8 <prvAddCurrentTaskToDelayedList+0xa0>)
    215e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2160:	e026      	b.n	21b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    2162:	68fa      	ldr	r2, [r7, #12]
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	18d3      	adds	r3, r2, r3
    2168:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    216a:	4b14      	ldr	r3, [pc, #80]	; (21bc <prvAddCurrentTaskToDelayedList+0x94>)
    216c:	681b      	ldr	r3, [r3, #0]
    216e:	68ba      	ldr	r2, [r7, #8]
    2170:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    2172:	68ba      	ldr	r2, [r7, #8]
    2174:	68fb      	ldr	r3, [r7, #12]
    2176:	429a      	cmp	r2, r3
    2178:	d209      	bcs.n	218e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    217a:	4b14      	ldr	r3, [pc, #80]	; (21cc <prvAddCurrentTaskToDelayedList+0xa4>)
    217c:	681a      	ldr	r2, [r3, #0]
    217e:	4b0f      	ldr	r3, [pc, #60]	; (21bc <prvAddCurrentTaskToDelayedList+0x94>)
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	3304      	adds	r3, #4
    2184:	0019      	movs	r1, r3
    2186:	0010      	movs	r0, r2
    2188:	4b11      	ldr	r3, [pc, #68]	; (21d0 <prvAddCurrentTaskToDelayedList+0xa8>)
    218a:	4798      	blx	r3
}
    218c:	e010      	b.n	21b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    218e:	4b11      	ldr	r3, [pc, #68]	; (21d4 <prvAddCurrentTaskToDelayedList+0xac>)
    2190:	681a      	ldr	r2, [r3, #0]
    2192:	4b0a      	ldr	r3, [pc, #40]	; (21bc <prvAddCurrentTaskToDelayedList+0x94>)
    2194:	681b      	ldr	r3, [r3, #0]
    2196:	3304      	adds	r3, #4
    2198:	0019      	movs	r1, r3
    219a:	0010      	movs	r0, r2
    219c:	4b0c      	ldr	r3, [pc, #48]	; (21d0 <prvAddCurrentTaskToDelayedList+0xa8>)
    219e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    21a0:	4b0d      	ldr	r3, [pc, #52]	; (21d8 <prvAddCurrentTaskToDelayedList+0xb0>)
    21a2:	681b      	ldr	r3, [r3, #0]
    21a4:	68ba      	ldr	r2, [r7, #8]
    21a6:	429a      	cmp	r2, r3
    21a8:	d202      	bcs.n	21b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    21aa:	4b0b      	ldr	r3, [pc, #44]	; (21d8 <prvAddCurrentTaskToDelayedList+0xb0>)
    21ac:	68ba      	ldr	r2, [r7, #8]
    21ae:	601a      	str	r2, [r3, #0]
}
    21b0:	46c0      	nop			; (mov r8, r8)
    21b2:	46bd      	mov	sp, r7
    21b4:	b004      	add	sp, #16
    21b6:	bd80      	pop	{r7, pc}
    21b8:	200043c8 	.word	0x200043c8
    21bc:	200042ec 	.word	0x200042ec
    21c0:	000003cf 	.word	0x000003cf
    21c4:	200043b0 	.word	0x200043b0
    21c8:	0000031f 	.word	0x0000031f
    21cc:	20004380 	.word	0x20004380
    21d0:	00000363 	.word	0x00000363
    21d4:	2000437c 	.word	0x2000437c
    21d8:	200043e4 	.word	0x200043e4

000021dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    21dc:	b590      	push	{r4, r7, lr}
    21de:	b085      	sub	sp, #20
    21e0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    21e2:	2300      	movs	r3, #0
    21e4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    21e6:	4b0e      	ldr	r3, [pc, #56]	; (2220 <xTimerCreateTimerTask+0x44>)
    21e8:	4798      	blx	r3

	if( xTimerQueue != NULL )
    21ea:	4b0e      	ldr	r3, [pc, #56]	; (2224 <xTimerCreateTimerTask+0x48>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d00b      	beq.n	220a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    21f2:	490d      	ldr	r1, [pc, #52]	; (2228 <xTimerCreateTimerTask+0x4c>)
    21f4:	480d      	ldr	r0, [pc, #52]	; (222c <xTimerCreateTimerTask+0x50>)
    21f6:	4b0e      	ldr	r3, [pc, #56]	; (2230 <xTimerCreateTimerTask+0x54>)
    21f8:	9301      	str	r3, [sp, #4]
    21fa:	2302      	movs	r3, #2
    21fc:	9300      	str	r3, [sp, #0]
    21fe:	2300      	movs	r3, #0
    2200:	2250      	movs	r2, #80	; 0x50
    2202:	4c0c      	ldr	r4, [pc, #48]	; (2234 <xTimerCreateTimerTask+0x58>)
    2204:	47a0      	blx	r4
    2206:	0003      	movs	r3, r0
    2208:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	2b00      	cmp	r3, #0
    220e:	d101      	bne.n	2214 <xTimerCreateTimerTask+0x38>
    2210:	b672      	cpsid	i
    2212:	e7fe      	b.n	2212 <xTimerCreateTimerTask+0x36>
	return xReturn;
    2214:	687b      	ldr	r3, [r7, #4]
}
    2216:	0018      	movs	r0, r3
    2218:	46bd      	mov	sp, r7
    221a:	b003      	add	sp, #12
    221c:	bd90      	pop	{r4, r7, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	000027a9 	.word	0x000027a9
    2224:	20004428 	.word	0x20004428
    2228:	00003cf8 	.word	0x00003cf8
    222c:	00002375 	.word	0x00002375
    2230:	2000442c 	.word	0x2000442c
    2234:	00001435 	.word	0x00001435

00002238 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2238:	b590      	push	{r4, r7, lr}
    223a:	b089      	sub	sp, #36	; 0x24
    223c:	af00      	add	r7, sp, #0
    223e:	60f8      	str	r0, [r7, #12]
    2240:	60b9      	str	r1, [r7, #8]
    2242:	607a      	str	r2, [r7, #4]
    2244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    2246:	2300      	movs	r3, #0
    2248:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    224a:	68fb      	ldr	r3, [r7, #12]
    224c:	2b00      	cmp	r3, #0
    224e:	d101      	bne.n	2254 <xTimerGenericCommand+0x1c>
    2250:	b672      	cpsid	i
    2252:	e7fe      	b.n	2252 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2254:	4b1e      	ldr	r3, [pc, #120]	; (22d0 <xTimerGenericCommand+0x98>)
    2256:	681b      	ldr	r3, [r3, #0]
    2258:	2b00      	cmp	r3, #0
    225a:	d033      	beq.n	22c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    225c:	2310      	movs	r3, #16
    225e:	18fb      	adds	r3, r7, r3
    2260:	68ba      	ldr	r2, [r7, #8]
    2262:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2264:	2310      	movs	r3, #16
    2266:	18fb      	adds	r3, r7, r3
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    226c:	2310      	movs	r3, #16
    226e:	18fb      	adds	r3, r7, r3
    2270:	68fa      	ldr	r2, [r7, #12]
    2272:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2274:	68bb      	ldr	r3, [r7, #8]
    2276:	2b05      	cmp	r3, #5
    2278:	dc1a      	bgt.n	22b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    227a:	4b16      	ldr	r3, [pc, #88]	; (22d4 <xTimerGenericCommand+0x9c>)
    227c:	4798      	blx	r3
    227e:	0003      	movs	r3, r0
    2280:	2b02      	cmp	r3, #2
    2282:	d10a      	bne.n	229a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2284:	4b12      	ldr	r3, [pc, #72]	; (22d0 <xTimerGenericCommand+0x98>)
    2286:	6818      	ldr	r0, [r3, #0]
    2288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    228a:	2310      	movs	r3, #16
    228c:	18f9      	adds	r1, r7, r3
    228e:	2300      	movs	r3, #0
    2290:	4c11      	ldr	r4, [pc, #68]	; (22d8 <xTimerGenericCommand+0xa0>)
    2292:	47a0      	blx	r4
    2294:	0003      	movs	r3, r0
    2296:	61fb      	str	r3, [r7, #28]
    2298:	e014      	b.n	22c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    229a:	4b0d      	ldr	r3, [pc, #52]	; (22d0 <xTimerGenericCommand+0x98>)
    229c:	6818      	ldr	r0, [r3, #0]
    229e:	2310      	movs	r3, #16
    22a0:	18f9      	adds	r1, r7, r3
    22a2:	2300      	movs	r3, #0
    22a4:	2200      	movs	r2, #0
    22a6:	4c0c      	ldr	r4, [pc, #48]	; (22d8 <xTimerGenericCommand+0xa0>)
    22a8:	47a0      	blx	r4
    22aa:	0003      	movs	r3, r0
    22ac:	61fb      	str	r3, [r7, #28]
    22ae:	e009      	b.n	22c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    22b0:	4b07      	ldr	r3, [pc, #28]	; (22d0 <xTimerGenericCommand+0x98>)
    22b2:	6818      	ldr	r0, [r3, #0]
    22b4:	683a      	ldr	r2, [r7, #0]
    22b6:	2310      	movs	r3, #16
    22b8:	18f9      	adds	r1, r7, r3
    22ba:	2300      	movs	r3, #0
    22bc:	4c07      	ldr	r4, [pc, #28]	; (22dc <xTimerGenericCommand+0xa4>)
    22be:	47a0      	blx	r4
    22c0:	0003      	movs	r3, r0
    22c2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    22c4:	69fb      	ldr	r3, [r7, #28]
}
    22c6:	0018      	movs	r0, r3
    22c8:	46bd      	mov	sp, r7
    22ca:	b009      	add	sp, #36	; 0x24
    22cc:	bd90      	pop	{r4, r7, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	20004428 	.word	0x20004428
    22d4:	00002031 	.word	0x00002031
    22d8:	00000b89 	.word	0x00000b89
    22dc:	00000d7d 	.word	0x00000d7d

000022e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    22e0:	b590      	push	{r4, r7, lr}
    22e2:	b087      	sub	sp, #28
    22e4:	af02      	add	r7, sp, #8
    22e6:	6078      	str	r0, [r7, #4]
    22e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    22ea:	4b1e      	ldr	r3, [pc, #120]	; (2364 <prvProcessExpiredTimer+0x84>)
    22ec:	681b      	ldr	r3, [r3, #0]
    22ee:	68db      	ldr	r3, [r3, #12]
    22f0:	68db      	ldr	r3, [r3, #12]
    22f2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22f4:	68fb      	ldr	r3, [r7, #12]
    22f6:	3304      	adds	r3, #4
    22f8:	0018      	movs	r0, r3
    22fa:	4b1b      	ldr	r3, [pc, #108]	; (2368 <prvProcessExpiredTimer+0x88>)
    22fc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    22fe:	68fb      	ldr	r3, [r7, #12]
    2300:	2228      	movs	r2, #40	; 0x28
    2302:	5c9b      	ldrb	r3, [r3, r2]
    2304:	001a      	movs	r2, r3
    2306:	2304      	movs	r3, #4
    2308:	4013      	ands	r3, r2
    230a:	d019      	beq.n	2340 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    230c:	68fb      	ldr	r3, [r7, #12]
    230e:	699a      	ldr	r2, [r3, #24]
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	18d1      	adds	r1, r2, r3
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	683a      	ldr	r2, [r7, #0]
    2318:	68f8      	ldr	r0, [r7, #12]
    231a:	4c14      	ldr	r4, [pc, #80]	; (236c <prvProcessExpiredTimer+0x8c>)
    231c:	47a0      	blx	r4
    231e:	1e03      	subs	r3, r0, #0
    2320:	d017      	beq.n	2352 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2322:	687a      	ldr	r2, [r7, #4]
    2324:	68f8      	ldr	r0, [r7, #12]
    2326:	2300      	movs	r3, #0
    2328:	9300      	str	r3, [sp, #0]
    232a:	2300      	movs	r3, #0
    232c:	2100      	movs	r1, #0
    232e:	4c10      	ldr	r4, [pc, #64]	; (2370 <prvProcessExpiredTimer+0x90>)
    2330:	47a0      	blx	r4
    2332:	0003      	movs	r3, r0
    2334:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    2336:	68bb      	ldr	r3, [r7, #8]
    2338:	2b00      	cmp	r3, #0
    233a:	d10a      	bne.n	2352 <prvProcessExpiredTimer+0x72>
    233c:	b672      	cpsid	i
    233e:	e7fe      	b.n	233e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2340:	68fb      	ldr	r3, [r7, #12]
    2342:	2228      	movs	r2, #40	; 0x28
    2344:	5c9b      	ldrb	r3, [r3, r2]
    2346:	2201      	movs	r2, #1
    2348:	4393      	bics	r3, r2
    234a:	b2d9      	uxtb	r1, r3
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	2228      	movs	r2, #40	; 0x28
    2350:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	6a1b      	ldr	r3, [r3, #32]
    2356:	68fa      	ldr	r2, [r7, #12]
    2358:	0010      	movs	r0, r2
    235a:	4798      	blx	r3
}
    235c:	46c0      	nop			; (mov r8, r8)
    235e:	46bd      	mov	sp, r7
    2360:	b005      	add	sp, #20
    2362:	bd90      	pop	{r4, r7, pc}
    2364:	20004420 	.word	0x20004420
    2368:	000003cf 	.word	0x000003cf
    236c:	000024dd 	.word	0x000024dd
    2370:	00002239 	.word	0x00002239

00002374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2374:	b580      	push	{r7, lr}
    2376:	b084      	sub	sp, #16
    2378:	af00      	add	r7, sp, #0
    237a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    237c:	2308      	movs	r3, #8
    237e:	18fb      	adds	r3, r7, r3
    2380:	0018      	movs	r0, r3
    2382:	4b06      	ldr	r3, [pc, #24]	; (239c <prvTimerTask+0x28>)
    2384:	4798      	blx	r3
    2386:	0003      	movs	r3, r0
    2388:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    238a:	68ba      	ldr	r2, [r7, #8]
    238c:	68fb      	ldr	r3, [r7, #12]
    238e:	0011      	movs	r1, r2
    2390:	0018      	movs	r0, r3
    2392:	4b03      	ldr	r3, [pc, #12]	; (23a0 <prvTimerTask+0x2c>)
    2394:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    2396:	4b03      	ldr	r3, [pc, #12]	; (23a4 <prvTimerTask+0x30>)
    2398:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    239a:	e7ef      	b.n	237c <prvTimerTask+0x8>
    239c:	00002451 	.word	0x00002451
    23a0:	000023a9 	.word	0x000023a9
    23a4:	00002565 	.word	0x00002565

000023a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    23a8:	b580      	push	{r7, lr}
    23aa:	b084      	sub	sp, #16
    23ac:	af00      	add	r7, sp, #0
    23ae:	6078      	str	r0, [r7, #4]
    23b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    23b2:	4b1f      	ldr	r3, [pc, #124]	; (2430 <prvProcessTimerOrBlockTask+0x88>)
    23b4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    23b6:	2308      	movs	r3, #8
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	0018      	movs	r0, r3
    23bc:	4b1d      	ldr	r3, [pc, #116]	; (2434 <prvProcessTimerOrBlockTask+0x8c>)
    23be:	4798      	blx	r3
    23c0:	0003      	movs	r3, r0
    23c2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    23c4:	68bb      	ldr	r3, [r7, #8]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d12b      	bne.n	2422 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    23ca:	683b      	ldr	r3, [r7, #0]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d10c      	bne.n	23ea <prvProcessTimerOrBlockTask+0x42>
    23d0:	687a      	ldr	r2, [r7, #4]
    23d2:	68fb      	ldr	r3, [r7, #12]
    23d4:	429a      	cmp	r2, r3
    23d6:	d808      	bhi.n	23ea <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    23d8:	4b17      	ldr	r3, [pc, #92]	; (2438 <prvProcessTimerOrBlockTask+0x90>)
    23da:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    23dc:	68fa      	ldr	r2, [r7, #12]
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	0011      	movs	r1, r2
    23e2:	0018      	movs	r0, r3
    23e4:	4b15      	ldr	r3, [pc, #84]	; (243c <prvProcessTimerOrBlockTask+0x94>)
    23e6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    23e8:	e01d      	b.n	2426 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
    23ea:	683b      	ldr	r3, [r7, #0]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d008      	beq.n	2402 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    23f0:	4b13      	ldr	r3, [pc, #76]	; (2440 <prvProcessTimerOrBlockTask+0x98>)
    23f2:	681b      	ldr	r3, [r3, #0]
    23f4:	681b      	ldr	r3, [r3, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d101      	bne.n	23fe <prvProcessTimerOrBlockTask+0x56>
    23fa:	2301      	movs	r3, #1
    23fc:	e000      	b.n	2400 <prvProcessTimerOrBlockTask+0x58>
    23fe:	2300      	movs	r3, #0
    2400:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2402:	4b10      	ldr	r3, [pc, #64]	; (2444 <prvProcessTimerOrBlockTask+0x9c>)
    2404:	6818      	ldr	r0, [r3, #0]
    2406:	687a      	ldr	r2, [r7, #4]
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	1ad3      	subs	r3, r2, r3
    240c:	683a      	ldr	r2, [r7, #0]
    240e:	0019      	movs	r1, r3
    2410:	4b0d      	ldr	r3, [pc, #52]	; (2448 <prvProcessTimerOrBlockTask+0xa0>)
    2412:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2414:	4b08      	ldr	r3, [pc, #32]	; (2438 <prvProcessTimerOrBlockTask+0x90>)
    2416:	4798      	blx	r3
    2418:	1e03      	subs	r3, r0, #0
    241a:	d104      	bne.n	2426 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
    241c:	4b0b      	ldr	r3, [pc, #44]	; (244c <prvProcessTimerOrBlockTask+0xa4>)
    241e:	4798      	blx	r3
}
    2420:	e001      	b.n	2426 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
    2422:	4b05      	ldr	r3, [pc, #20]	; (2438 <prvProcessTimerOrBlockTask+0x90>)
    2424:	4798      	blx	r3
}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	46bd      	mov	sp, r7
    242a:	b004      	add	sp, #16
    242c:	bd80      	pop	{r7, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	00001831 	.word	0x00001831
    2434:	00002495 	.word	0x00002495
    2438:	00001849 	.word	0x00001849
    243c:	000022e1 	.word	0x000022e1
    2440:	20004424 	.word	0x20004424
    2444:	20004428 	.word	0x20004428
    2448:	00001319 	.word	0x00001319
    244c:	00000531 	.word	0x00000531

00002450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    2450:	b580      	push	{r7, lr}
    2452:	b084      	sub	sp, #16
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2458:	4b0d      	ldr	r3, [pc, #52]	; (2490 <prvGetNextExpireTime+0x40>)
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d101      	bne.n	2466 <prvGetNextExpireTime+0x16>
    2462:	2201      	movs	r2, #1
    2464:	e000      	b.n	2468 <prvGetNextExpireTime+0x18>
    2466:	2200      	movs	r2, #0
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	2b00      	cmp	r3, #0
    2472:	d105      	bne.n	2480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2474:	4b06      	ldr	r3, [pc, #24]	; (2490 <prvGetNextExpireTime+0x40>)
    2476:	681b      	ldr	r3, [r3, #0]
    2478:	68db      	ldr	r3, [r3, #12]
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	60fb      	str	r3, [r7, #12]
    247e:	e001      	b.n	2484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2480:	2300      	movs	r3, #0
    2482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    2484:	68fb      	ldr	r3, [r7, #12]
}
    2486:	0018      	movs	r0, r3
    2488:	46bd      	mov	sp, r7
    248a:	b004      	add	sp, #16
    248c:	bd80      	pop	{r7, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	20004420 	.word	0x20004420

00002494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    249c:	4b0c      	ldr	r3, [pc, #48]	; (24d0 <prvSampleTimeNow+0x3c>)
    249e:	4798      	blx	r3
    24a0:	0003      	movs	r3, r0
    24a2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    24a4:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <prvSampleTimeNow+0x40>)
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	68fa      	ldr	r2, [r7, #12]
    24aa:	429a      	cmp	r2, r3
    24ac:	d205      	bcs.n	24ba <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    24ae:	4b0a      	ldr	r3, [pc, #40]	; (24d8 <prvSampleTimeNow+0x44>)
    24b0:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	2201      	movs	r2, #1
    24b6:	601a      	str	r2, [r3, #0]
    24b8:	e002      	b.n	24c0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	2200      	movs	r2, #0
    24be:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    24c0:	4b04      	ldr	r3, [pc, #16]	; (24d4 <prvSampleTimeNow+0x40>)
    24c2:	68fa      	ldr	r2, [r7, #12]
    24c4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    24c6:	68fb      	ldr	r3, [r7, #12]
}
    24c8:	0018      	movs	r0, r3
    24ca:	46bd      	mov	sp, r7
    24cc:	b004      	add	sp, #16
    24ce:	bd80      	pop	{r7, pc}
    24d0:	0000197d 	.word	0x0000197d
    24d4:	20004430 	.word	0x20004430
    24d8:	000026e1 	.word	0x000026e1

000024dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    24dc:	b580      	push	{r7, lr}
    24de:	b086      	sub	sp, #24
    24e0:	af00      	add	r7, sp, #0
    24e2:	60f8      	str	r0, [r7, #12]
    24e4:	60b9      	str	r1, [r7, #8]
    24e6:	607a      	str	r2, [r7, #4]
    24e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    24ea:	2300      	movs	r3, #0
    24ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    24ee:	68fb      	ldr	r3, [r7, #12]
    24f0:	68ba      	ldr	r2, [r7, #8]
    24f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    24f4:	68fb      	ldr	r3, [r7, #12]
    24f6:	68fa      	ldr	r2, [r7, #12]
    24f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    24fa:	68ba      	ldr	r2, [r7, #8]
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	429a      	cmp	r2, r3
    2500:	d812      	bhi.n	2528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2502:	687a      	ldr	r2, [r7, #4]
    2504:	683b      	ldr	r3, [r7, #0]
    2506:	1ad2      	subs	r2, r2, r3
    2508:	68fb      	ldr	r3, [r7, #12]
    250a:	699b      	ldr	r3, [r3, #24]
    250c:	429a      	cmp	r2, r3
    250e:	d302      	bcc.n	2516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2510:	2301      	movs	r3, #1
    2512:	617b      	str	r3, [r7, #20]
    2514:	e01b      	b.n	254e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2516:	4b10      	ldr	r3, [pc, #64]	; (2558 <prvInsertTimerInActiveList+0x7c>)
    2518:	681a      	ldr	r2, [r3, #0]
    251a:	68fb      	ldr	r3, [r7, #12]
    251c:	3304      	adds	r3, #4
    251e:	0019      	movs	r1, r3
    2520:	0010      	movs	r0, r2
    2522:	4b0e      	ldr	r3, [pc, #56]	; (255c <prvInsertTimerInActiveList+0x80>)
    2524:	4798      	blx	r3
    2526:	e012      	b.n	254e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2528:	687a      	ldr	r2, [r7, #4]
    252a:	683b      	ldr	r3, [r7, #0]
    252c:	429a      	cmp	r2, r3
    252e:	d206      	bcs.n	253e <prvInsertTimerInActiveList+0x62>
    2530:	68ba      	ldr	r2, [r7, #8]
    2532:	683b      	ldr	r3, [r7, #0]
    2534:	429a      	cmp	r2, r3
    2536:	d302      	bcc.n	253e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2538:	2301      	movs	r3, #1
    253a:	617b      	str	r3, [r7, #20]
    253c:	e007      	b.n	254e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    253e:	4b08      	ldr	r3, [pc, #32]	; (2560 <prvInsertTimerInActiveList+0x84>)
    2540:	681a      	ldr	r2, [r3, #0]
    2542:	68fb      	ldr	r3, [r7, #12]
    2544:	3304      	adds	r3, #4
    2546:	0019      	movs	r1, r3
    2548:	0010      	movs	r0, r2
    254a:	4b04      	ldr	r3, [pc, #16]	; (255c <prvInsertTimerInActiveList+0x80>)
    254c:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    254e:	697b      	ldr	r3, [r7, #20]
}
    2550:	0018      	movs	r0, r3
    2552:	46bd      	mov	sp, r7
    2554:	b006      	add	sp, #24
    2556:	bd80      	pop	{r7, pc}
    2558:	20004424 	.word	0x20004424
    255c:	00000363 	.word	0x00000363
    2560:	20004420 	.word	0x20004420

00002564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    2564:	b590      	push	{r4, r7, lr}
    2566:	b08b      	sub	sp, #44	; 0x2c
    2568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    256a:	e09a      	b.n	26a2 <prvProcessReceivedCommands+0x13e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    256c:	2308      	movs	r3, #8
    256e:	18fb      	adds	r3, r7, r3
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	2b00      	cmp	r3, #0
    2574:	da00      	bge.n	2578 <prvProcessReceivedCommands+0x14>
    2576:	e094      	b.n	26a2 <prvProcessReceivedCommands+0x13e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2578:	2308      	movs	r3, #8
    257a:	18fb      	adds	r3, r7, r3
    257c:	689b      	ldr	r3, [r3, #8]
    257e:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2580:	69fb      	ldr	r3, [r7, #28]
    2582:	695b      	ldr	r3, [r3, #20]
    2584:	2b00      	cmp	r3, #0
    2586:	d004      	beq.n	2592 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2588:	69fb      	ldr	r3, [r7, #28]
    258a:	3304      	adds	r3, #4
    258c:	0018      	movs	r0, r3
    258e:	4b4c      	ldr	r3, [pc, #304]	; (26c0 <prvProcessReceivedCommands+0x15c>)
    2590:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2592:	1d3b      	adds	r3, r7, #4
    2594:	0018      	movs	r0, r3
    2596:	4b4b      	ldr	r3, [pc, #300]	; (26c4 <prvProcessReceivedCommands+0x160>)
    2598:	4798      	blx	r3
    259a:	0003      	movs	r3, r0
    259c:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    259e:	2308      	movs	r3, #8
    25a0:	18fb      	adds	r3, r7, r3
    25a2:	681b      	ldr	r3, [r3, #0]
    25a4:	2b09      	cmp	r3, #9
    25a6:	d900      	bls.n	25aa <prvProcessReceivedCommands+0x46>
    25a8:	e07a      	b.n	26a0 <prvProcessReceivedCommands+0x13c>
    25aa:	009a      	lsls	r2, r3, #2
    25ac:	4b46      	ldr	r3, [pc, #280]	; (26c8 <prvProcessReceivedCommands+0x164>)
    25ae:	18d3      	adds	r3, r2, r3
    25b0:	681b      	ldr	r3, [r3, #0]
    25b2:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    25b4:	69fb      	ldr	r3, [r7, #28]
    25b6:	2228      	movs	r2, #40	; 0x28
    25b8:	5c9b      	ldrb	r3, [r3, r2]
    25ba:	2201      	movs	r2, #1
    25bc:	4313      	orrs	r3, r2
    25be:	b2d9      	uxtb	r1, r3
    25c0:	69fb      	ldr	r3, [r7, #28]
    25c2:	2228      	movs	r2, #40	; 0x28
    25c4:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    25c6:	2308      	movs	r3, #8
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	685a      	ldr	r2, [r3, #4]
    25cc:	69fb      	ldr	r3, [r7, #28]
    25ce:	699b      	ldr	r3, [r3, #24]
    25d0:	18d1      	adds	r1, r2, r3
    25d2:	2308      	movs	r3, #8
    25d4:	18fb      	adds	r3, r7, r3
    25d6:	685b      	ldr	r3, [r3, #4]
    25d8:	69ba      	ldr	r2, [r7, #24]
    25da:	69f8      	ldr	r0, [r7, #28]
    25dc:	4c3b      	ldr	r4, [pc, #236]	; (26cc <prvProcessReceivedCommands+0x168>)
    25de:	47a0      	blx	r4
    25e0:	1e03      	subs	r3, r0, #0
    25e2:	d05e      	beq.n	26a2 <prvProcessReceivedCommands+0x13e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25e4:	69fb      	ldr	r3, [r7, #28]
    25e6:	6a1b      	ldr	r3, [r3, #32]
    25e8:	69fa      	ldr	r2, [r7, #28]
    25ea:	0010      	movs	r0, r2
    25ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    25ee:	69fb      	ldr	r3, [r7, #28]
    25f0:	2228      	movs	r2, #40	; 0x28
    25f2:	5c9b      	ldrb	r3, [r3, r2]
    25f4:	001a      	movs	r2, r3
    25f6:	2304      	movs	r3, #4
    25f8:	4013      	ands	r3, r2
    25fa:	d052      	beq.n	26a2 <prvProcessReceivedCommands+0x13e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    25fc:	2308      	movs	r3, #8
    25fe:	18fb      	adds	r3, r7, r3
    2600:	685a      	ldr	r2, [r3, #4]
    2602:	69fb      	ldr	r3, [r7, #28]
    2604:	699b      	ldr	r3, [r3, #24]
    2606:	18d2      	adds	r2, r2, r3
    2608:	69f8      	ldr	r0, [r7, #28]
    260a:	2300      	movs	r3, #0
    260c:	9300      	str	r3, [sp, #0]
    260e:	2300      	movs	r3, #0
    2610:	2100      	movs	r1, #0
    2612:	4c2f      	ldr	r4, [pc, #188]	; (26d0 <prvProcessReceivedCommands+0x16c>)
    2614:	47a0      	blx	r4
    2616:	0003      	movs	r3, r0
    2618:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    261a:	697b      	ldr	r3, [r7, #20]
    261c:	2b00      	cmp	r3, #0
    261e:	d140      	bne.n	26a2 <prvProcessReceivedCommands+0x13e>
    2620:	b672      	cpsid	i
    2622:	e7fe      	b.n	2622 <prvProcessReceivedCommands+0xbe>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2624:	69fb      	ldr	r3, [r7, #28]
    2626:	2228      	movs	r2, #40	; 0x28
    2628:	5c9b      	ldrb	r3, [r3, r2]
    262a:	2201      	movs	r2, #1
    262c:	4393      	bics	r3, r2
    262e:	b2d9      	uxtb	r1, r3
    2630:	69fb      	ldr	r3, [r7, #28]
    2632:	2228      	movs	r2, #40	; 0x28
    2634:	5499      	strb	r1, [r3, r2]
					break;
    2636:	e034      	b.n	26a2 <prvProcessReceivedCommands+0x13e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2638:	69fb      	ldr	r3, [r7, #28]
    263a:	2228      	movs	r2, #40	; 0x28
    263c:	5c9b      	ldrb	r3, [r3, r2]
    263e:	2201      	movs	r2, #1
    2640:	4313      	orrs	r3, r2
    2642:	b2d9      	uxtb	r1, r3
    2644:	69fb      	ldr	r3, [r7, #28]
    2646:	2228      	movs	r2, #40	; 0x28
    2648:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    264a:	2308      	movs	r3, #8
    264c:	18fb      	adds	r3, r7, r3
    264e:	685a      	ldr	r2, [r3, #4]
    2650:	69fb      	ldr	r3, [r7, #28]
    2652:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2654:	69fb      	ldr	r3, [r7, #28]
    2656:	699b      	ldr	r3, [r3, #24]
    2658:	2b00      	cmp	r3, #0
    265a:	d101      	bne.n	2660 <prvProcessReceivedCommands+0xfc>
    265c:	b672      	cpsid	i
    265e:	e7fe      	b.n	265e <prvProcessReceivedCommands+0xfa>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2660:	69fb      	ldr	r3, [r7, #28]
    2662:	699a      	ldr	r2, [r3, #24]
    2664:	69bb      	ldr	r3, [r7, #24]
    2666:	18d1      	adds	r1, r2, r3
    2668:	69bb      	ldr	r3, [r7, #24]
    266a:	69ba      	ldr	r2, [r7, #24]
    266c:	69f8      	ldr	r0, [r7, #28]
    266e:	4c17      	ldr	r4, [pc, #92]	; (26cc <prvProcessReceivedCommands+0x168>)
    2670:	47a0      	blx	r4
					break;
    2672:	e016      	b.n	26a2 <prvProcessReceivedCommands+0x13e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2674:	69fb      	ldr	r3, [r7, #28]
    2676:	2228      	movs	r2, #40	; 0x28
    2678:	5c9b      	ldrb	r3, [r3, r2]
    267a:	001a      	movs	r2, r3
    267c:	2302      	movs	r3, #2
    267e:	4013      	ands	r3, r2
    2680:	d104      	bne.n	268c <prvProcessReceivedCommands+0x128>
						{
							vPortFree( pxTimer );
    2682:	69fb      	ldr	r3, [r7, #28]
    2684:	0018      	movs	r0, r3
    2686:	4b13      	ldr	r3, [pc, #76]	; (26d4 <prvProcessReceivedCommands+0x170>)
    2688:	4798      	blx	r3
    268a:	e00a      	b.n	26a2 <prvProcessReceivedCommands+0x13e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    268c:	69fb      	ldr	r3, [r7, #28]
    268e:	2228      	movs	r2, #40	; 0x28
    2690:	5c9b      	ldrb	r3, [r3, r2]
    2692:	2201      	movs	r2, #1
    2694:	4393      	bics	r3, r2
    2696:	b2d9      	uxtb	r1, r3
    2698:	69fb      	ldr	r3, [r7, #28]
    269a:	2228      	movs	r2, #40	; 0x28
    269c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    269e:	e000      	b.n	26a2 <prvProcessReceivedCommands+0x13e>

				default	:
					/* Don't expect to get here. */
					break;
    26a0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26a2:	4b0d      	ldr	r3, [pc, #52]	; (26d8 <prvProcessReceivedCommands+0x174>)
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	2208      	movs	r2, #8
    26a8:	18b9      	adds	r1, r7, r2
    26aa:	2200      	movs	r2, #0
    26ac:	0018      	movs	r0, r3
    26ae:	4b0b      	ldr	r3, [pc, #44]	; (26dc <prvProcessReceivedCommands+0x178>)
    26b0:	4798      	blx	r3
    26b2:	1e03      	subs	r3, r0, #0
    26b4:	d000      	beq.n	26b8 <prvProcessReceivedCommands+0x154>
    26b6:	e759      	b.n	256c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    26b8:	46c0      	nop			; (mov r8, r8)
    26ba:	46bd      	mov	sp, r7
    26bc:	b009      	add	sp, #36	; 0x24
    26be:	bd90      	pop	{r4, r7, pc}
    26c0:	000003cf 	.word	0x000003cf
    26c4:	00002495 	.word	0x00002495
    26c8:	00003d08 	.word	0x00003d08
    26cc:	000024dd 	.word	0x000024dd
    26d0:	00002239 	.word	0x00002239
    26d4:	000007f9 	.word	0x000007f9
    26d8:	20004428 	.word	0x20004428
    26dc:	00000e9d 	.word	0x00000e9d

000026e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    26e0:	b590      	push	{r4, r7, lr}
    26e2:	b089      	sub	sp, #36	; 0x24
    26e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    26e6:	e041      	b.n	276c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    26e8:	4b2a      	ldr	r3, [pc, #168]	; (2794 <prvSwitchTimerLists+0xb4>)
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	68db      	ldr	r3, [r3, #12]
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    26f2:	4b28      	ldr	r3, [pc, #160]	; (2794 <prvSwitchTimerLists+0xb4>)
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	68db      	ldr	r3, [r3, #12]
    26f8:	68db      	ldr	r3, [r3, #12]
    26fa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26fc:	693b      	ldr	r3, [r7, #16]
    26fe:	3304      	adds	r3, #4
    2700:	0018      	movs	r0, r3
    2702:	4b25      	ldr	r3, [pc, #148]	; (2798 <prvSwitchTimerLists+0xb8>)
    2704:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2706:	693b      	ldr	r3, [r7, #16]
    2708:	6a1b      	ldr	r3, [r3, #32]
    270a:	693a      	ldr	r2, [r7, #16]
    270c:	0010      	movs	r0, r2
    270e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	2228      	movs	r2, #40	; 0x28
    2714:	5c9b      	ldrb	r3, [r3, r2]
    2716:	001a      	movs	r2, r3
    2718:	2304      	movs	r3, #4
    271a:	4013      	ands	r3, r2
    271c:	d026      	beq.n	276c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    271e:	693b      	ldr	r3, [r7, #16]
    2720:	699a      	ldr	r2, [r3, #24]
    2722:	697b      	ldr	r3, [r7, #20]
    2724:	18d3      	adds	r3, r2, r3
    2726:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    2728:	68fa      	ldr	r2, [r7, #12]
    272a:	697b      	ldr	r3, [r7, #20]
    272c:	429a      	cmp	r2, r3
    272e:	d90e      	bls.n	274e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2730:	693b      	ldr	r3, [r7, #16]
    2732:	68fa      	ldr	r2, [r7, #12]
    2734:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2736:	693b      	ldr	r3, [r7, #16]
    2738:	693a      	ldr	r2, [r7, #16]
    273a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    273c:	4b15      	ldr	r3, [pc, #84]	; (2794 <prvSwitchTimerLists+0xb4>)
    273e:	681a      	ldr	r2, [r3, #0]
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	3304      	adds	r3, #4
    2744:	0019      	movs	r1, r3
    2746:	0010      	movs	r0, r2
    2748:	4b14      	ldr	r3, [pc, #80]	; (279c <prvSwitchTimerLists+0xbc>)
    274a:	4798      	blx	r3
    274c:	e00e      	b.n	276c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    274e:	697a      	ldr	r2, [r7, #20]
    2750:	6938      	ldr	r0, [r7, #16]
    2752:	2300      	movs	r3, #0
    2754:	9300      	str	r3, [sp, #0]
    2756:	2300      	movs	r3, #0
    2758:	2100      	movs	r1, #0
    275a:	4c11      	ldr	r4, [pc, #68]	; (27a0 <prvSwitchTimerLists+0xc0>)
    275c:	47a0      	blx	r4
    275e:	0003      	movs	r3, r0
    2760:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    2762:	68bb      	ldr	r3, [r7, #8]
    2764:	2b00      	cmp	r3, #0
    2766:	d101      	bne.n	276c <prvSwitchTimerLists+0x8c>
    2768:	b672      	cpsid	i
    276a:	e7fe      	b.n	276a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    276c:	4b09      	ldr	r3, [pc, #36]	; (2794 <prvSwitchTimerLists+0xb4>)
    276e:	681b      	ldr	r3, [r3, #0]
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	2b00      	cmp	r3, #0
    2774:	d1b8      	bne.n	26e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    2776:	4b07      	ldr	r3, [pc, #28]	; (2794 <prvSwitchTimerLists+0xb4>)
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    277c:	4b09      	ldr	r3, [pc, #36]	; (27a4 <prvSwitchTimerLists+0xc4>)
    277e:	681a      	ldr	r2, [r3, #0]
    2780:	4b04      	ldr	r3, [pc, #16]	; (2794 <prvSwitchTimerLists+0xb4>)
    2782:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    2784:	4b07      	ldr	r3, [pc, #28]	; (27a4 <prvSwitchTimerLists+0xc4>)
    2786:	687a      	ldr	r2, [r7, #4]
    2788:	601a      	str	r2, [r3, #0]
}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46bd      	mov	sp, r7
    278e:	b007      	add	sp, #28
    2790:	bd90      	pop	{r4, r7, pc}
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	20004420 	.word	0x20004420
    2798:	000003cf 	.word	0x000003cf
    279c:	00000363 	.word	0x00000363
    27a0:	00002239 	.word	0x00002239
    27a4:	20004424 	.word	0x20004424

000027a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    27a8:	b580      	push	{r7, lr}
    27aa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    27ac:	4b15      	ldr	r3, [pc, #84]	; (2804 <prvCheckForValidListAndQueue+0x5c>)
    27ae:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    27b0:	4b15      	ldr	r3, [pc, #84]	; (2808 <prvCheckForValidListAndQueue+0x60>)
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	2b00      	cmp	r3, #0
    27b6:	d120      	bne.n	27fa <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    27b8:	4b14      	ldr	r3, [pc, #80]	; (280c <prvCheckForValidListAndQueue+0x64>)
    27ba:	0018      	movs	r0, r3
    27bc:	4b14      	ldr	r3, [pc, #80]	; (2810 <prvCheckForValidListAndQueue+0x68>)
    27be:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    27c0:	4b14      	ldr	r3, [pc, #80]	; (2814 <prvCheckForValidListAndQueue+0x6c>)
    27c2:	0018      	movs	r0, r3
    27c4:	4b12      	ldr	r3, [pc, #72]	; (2810 <prvCheckForValidListAndQueue+0x68>)
    27c6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    27c8:	4b13      	ldr	r3, [pc, #76]	; (2818 <prvCheckForValidListAndQueue+0x70>)
    27ca:	4a10      	ldr	r2, [pc, #64]	; (280c <prvCheckForValidListAndQueue+0x64>)
    27cc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    27ce:	4b13      	ldr	r3, [pc, #76]	; (281c <prvCheckForValidListAndQueue+0x74>)
    27d0:	4a10      	ldr	r2, [pc, #64]	; (2814 <prvCheckForValidListAndQueue+0x6c>)
    27d2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    27d4:	2200      	movs	r2, #0
    27d6:	210c      	movs	r1, #12
    27d8:	2005      	movs	r0, #5
    27da:	4b11      	ldr	r3, [pc, #68]	; (2820 <prvCheckForValidListAndQueue+0x78>)
    27dc:	4798      	blx	r3
    27de:	0002      	movs	r2, r0
    27e0:	4b09      	ldr	r3, [pc, #36]	; (2808 <prvCheckForValidListAndQueue+0x60>)
    27e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    27e4:	4b08      	ldr	r3, [pc, #32]	; (2808 <prvCheckForValidListAndQueue+0x60>)
    27e6:	681b      	ldr	r3, [r3, #0]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d006      	beq.n	27fa <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    27ec:	4b06      	ldr	r3, [pc, #24]	; (2808 <prvCheckForValidListAndQueue+0x60>)
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	4a0c      	ldr	r2, [pc, #48]	; (2824 <prvCheckForValidListAndQueue+0x7c>)
    27f2:	0011      	movs	r1, r2
    27f4:	0018      	movs	r0, r3
    27f6:	4b0c      	ldr	r3, [pc, #48]	; (2828 <prvCheckForValidListAndQueue+0x80>)
    27f8:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    27fa:	4b0c      	ldr	r3, [pc, #48]	; (282c <prvCheckForValidListAndQueue+0x84>)
    27fc:	4798      	blx	r3
}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	46bd      	mov	sp, r7
    2802:	bd80      	pop	{r7, pc}
    2804:	00000551 	.word	0x00000551
    2808:	20004428 	.word	0x20004428
    280c:	200043f8 	.word	0x200043f8
    2810:	000002cd 	.word	0x000002cd
    2814:	2000440c 	.word	0x2000440c
    2818:	20004420 	.word	0x20004420
    281c:	20004424 	.word	0x20004424
    2820:	00000ac1 	.word	0x00000ac1
    2824:	00003d00 	.word	0x00003d00
    2828:	000012c9 	.word	0x000012c9
    282c:	00000575 	.word	0x00000575

00002830 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2830:	b580      	push	{r7, lr}
    2832:	af00      	add	r7, sp, #0
    2834:	4b03      	ldr	r3, [pc, #12]	; (2844 <SERCOM0_Handler+0x14>)
    2836:	681b      	ldr	r3, [r3, #0]
    2838:	2000      	movs	r0, #0
    283a:	4798      	blx	r3
    283c:	46c0      	nop			; (mov r8, r8)
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	20004434 	.word	0x20004434

00002848 <SERCOM1_Handler>:
    2848:	b580      	push	{r7, lr}
    284a:	af00      	add	r7, sp, #0
    284c:	4b03      	ldr	r3, [pc, #12]	; (285c <SERCOM1_Handler+0x14>)
    284e:	685b      	ldr	r3, [r3, #4]
    2850:	2001      	movs	r0, #1
    2852:	4798      	blx	r3
    2854:	46c0      	nop			; (mov r8, r8)
    2856:	46bd      	mov	sp, r7
    2858:	bd80      	pop	{r7, pc}
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	20004434 	.word	0x20004434

00002860 <SERCOM2_Handler>:
    2860:	b580      	push	{r7, lr}
    2862:	af00      	add	r7, sp, #0
    2864:	4b03      	ldr	r3, [pc, #12]	; (2874 <SERCOM2_Handler+0x14>)
    2866:	689b      	ldr	r3, [r3, #8]
    2868:	2002      	movs	r0, #2
    286a:	4798      	blx	r3
    286c:	46c0      	nop			; (mov r8, r8)
    286e:	46bd      	mov	sp, r7
    2870:	bd80      	pop	{r7, pc}
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	20004434 	.word	0x20004434

00002878 <SERCOM3_Handler>:
    2878:	b580      	push	{r7, lr}
    287a:	af00      	add	r7, sp, #0
    287c:	4b03      	ldr	r3, [pc, #12]	; (288c <SERCOM3_Handler+0x14>)
    287e:	68db      	ldr	r3, [r3, #12]
    2880:	2003      	movs	r0, #3
    2882:	4798      	blx	r3
    2884:	46c0      	nop			; (mov r8, r8)
    2886:	46bd      	mov	sp, r7
    2888:	bd80      	pop	{r7, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	20004434 	.word	0x20004434

00002890 <SERCOM4_Handler>:
    2890:	b580      	push	{r7, lr}
    2892:	af00      	add	r7, sp, #0
    2894:	4b03      	ldr	r3, [pc, #12]	; (28a4 <SERCOM4_Handler+0x14>)
    2896:	691b      	ldr	r3, [r3, #16]
    2898:	2004      	movs	r0, #4
    289a:	4798      	blx	r3
    289c:	46c0      	nop			; (mov r8, r8)
    289e:	46bd      	mov	sp, r7
    28a0:	bd80      	pop	{r7, pc}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	20004434 	.word	0x20004434

000028a8 <SERCOM5_Handler>:
    28a8:	b580      	push	{r7, lr}
    28aa:	af00      	add	r7, sp, #0
    28ac:	4b03      	ldr	r3, [pc, #12]	; (28bc <SERCOM5_Handler+0x14>)
    28ae:	695b      	ldr	r3, [r3, #20]
    28b0:	2005      	movs	r0, #5
    28b2:	4798      	blx	r3
    28b4:	46c0      	nop			; (mov r8, r8)
    28b6:	46bd      	mov	sp, r7
    28b8:	bd80      	pop	{r7, pc}
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	20004434 	.word	0x20004434

000028c0 <main>:
static unsigned long ulClocksPer10thOfAMilliSecond = 0UL;

/*-----------------------------------------------------------*/

int main (void)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	af00      	add	r7, sp, #0
	/* Prepare the hardware for the demo. */
	prvSetupHardware();
    28c4:	4b03      	ldr	r3, [pc, #12]	; (28d4 <main+0x14>)
    28c6:	4798      	blx	r3

	/* The mainCREATE_SIMPLE_BLINKY_DEMO_ONLY setting is described at the top
	of this file. */
	#if( mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1 )
	{
		main_blinky();
    28c8:	4b03      	ldr	r3, [pc, #12]	; (28d8 <main+0x18>)
    28ca:	4798      	blx	r3
    28cc:	2300      	movs	r3, #0
	#else
	{
		main_full();
	}
	#endif
}
    28ce:	0018      	movs	r0, r3
    28d0:	46bd      	mov	sp, r7
    28d2:	bd80      	pop	{r7, pc}
    28d4:	000028dd 	.word	0x000028dd
    28d8:	000001c1 	.word	0x000001c1

000028dc <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
    28dc:	b580      	push	{r7, lr}
    28de:	af00      	add	r7, sp, #0
	/* Initialisation is performed by the Atmel board support package. */
	system_init();
    28e0:	4b02      	ldr	r3, [pc, #8]	; (28ec <prvSetupHardware+0x10>)
    28e2:	4798      	blx	r3
}
    28e4:	46c0      	nop			; (mov r8, r8)
    28e6:	46bd      	mov	sp, r7
    28e8:	bd80      	pop	{r7, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	00003849 	.word	0x00003849

000028f0 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
    28f0:	b580      	push	{r7, lr}
    28f2:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
    28f4:	b672      	cpsid	i
	for( ;; );
    28f6:	e7fe      	b.n	28f6 <vApplicationMallocFailedHook+0x6>

000028f8 <vApplicationStackOverflowHook>:
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b082      	sub	sp, #8
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
    2900:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
    2902:	b672      	cpsid	i
	for( ;; );
    2904:	e7fe      	b.n	2904 <vApplicationStackOverflowHook+0xc>

00002906 <vApplicationTickHook>:
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
    2906:	b580      	push	{r7, lr}
    2908:	af00      	add	r7, sp, #0
		/* Write to a queue that is in use as part of the queue set demo to
		demonstrate using queue sets from an ISR. */
		vQueueSetAccessQueueSetFromISR();
	}
	#endif /* mainCREATE_SIMPLE_BLINKY_DEMO_ONLY */
}
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	46bd      	mov	sp, r7
    290e:	bd80      	pop	{r7, pc}

00002910 <vMainConfigureTimerForRunTimeStats>:
/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
    2910:	b580      	push	{r7, lr}
    2912:	af00      	add	r7, sp, #0
	/* Used by the optional run-time stats gathering functionality. */
	
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
    2914:	2007      	movs	r0, #7
    2916:	4b07      	ldr	r3, [pc, #28]	; (2934 <vMainConfigureTimerForRunTimeStats+0x24>)
    2918:	4798      	blx	r3
    291a:	0002      	movs	r2, r0
    291c:	4b06      	ldr	r3, [pc, #24]	; (2938 <vMainConfigureTimerForRunTimeStats+0x28>)
    291e:	4907      	ldr	r1, [pc, #28]	; (293c <vMainConfigureTimerForRunTimeStats+0x2c>)
    2920:	0010      	movs	r0, r2
    2922:	4798      	blx	r3
    2924:	0003      	movs	r3, r0
    2926:	001a      	movs	r2, r3
    2928:	4b05      	ldr	r3, [pc, #20]	; (2940 <vMainConfigureTimerForRunTimeStats+0x30>)
    292a:	601a      	str	r2, [r3, #0]
}
    292c:	46c0      	nop			; (mov r8, r8)
    292e:	46bd      	mov	sp, r7
    2930:	bd80      	pop	{r7, pc}
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	00002e45 	.word	0x00002e45
    2938:	000038f1 	.word	0x000038f1
    293c:	00002710 	.word	0x00002710
    2940:	2000444c 	.word	0x2000444c

00002944 <ulMainGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

unsigned long ulMainGetRunTimeCounterValue( void )
{
    2944:	b580      	push	{r7, lr}
    2946:	b088      	sub	sp, #32
    2948:	af00      	add	r7, sp, #0
unsigned long ulSysTickCounts, ulTickCount, ulReturn;
const unsigned long ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    294a:	2007      	movs	r0, #7
    294c:	4b1e      	ldr	r3, [pc, #120]	; (29c8 <ulMainGetRunTimeCounterValue+0x84>)
    294e:	4798      	blx	r3
    2950:	4b1e      	ldr	r3, [pc, #120]	; (29cc <ulMainGetRunTimeCounterValue+0x88>)
    2952:	22fa      	movs	r2, #250	; 0xfa
    2954:	0051      	lsls	r1, r2, #1
    2956:	4798      	blx	r3
    2958:	0003      	movs	r3, r0
    295a:	3b01      	subs	r3, #1
    295c:	617b      	str	r3, [r7, #20]
volatile unsigned long * const pulCurrentSysTickCount = ( ( volatile unsigned long *) 0xe000e018 );
    295e:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <ulMainGetRunTimeCounterValue+0x8c>)
    2960:	613b      	str	r3, [r7, #16]
volatile unsigned long * const pulInterruptCTRLState = ( ( volatile unsigned long *) 0xe000ed04 );
    2962:	4b1c      	ldr	r3, [pc, #112]	; (29d4 <ulMainGetRunTimeCounterValue+0x90>)
    2964:	60fb      	str	r3, [r7, #12]
const unsigned long ulSysTickPendingBit = 0x04000000UL;
    2966:	2380      	movs	r3, #128	; 0x80
    2968:	04db      	lsls	r3, r3, #19
    296a:	60bb      	str	r3, [r7, #8]
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
    296c:	693b      	ldr	r3, [r7, #16]
    296e:	681b      	ldr	r3, [r3, #0]
    2970:	697a      	ldr	r2, [r7, #20]
    2972:	1ad3      	subs	r3, r2, r3
    2974:	61fb      	str	r3, [r7, #28]
	
	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
    2976:	4b18      	ldr	r3, [pc, #96]	; (29d8 <ulMainGetRunTimeCounterValue+0x94>)
    2978:	4798      	blx	r3
    297a:	0003      	movs	r3, r0
    297c:	61bb      	str	r3, [r7, #24]

	/* This is called from the context switch, so will be called from a
	critical section.  xTaskGetTickCountFromISR() contains its own critical
	section, and the ISR safe critical sections are not designed to nest,
	so reset the critical section. */
	portSET_INTERRUPT_MASK_FROM_ISR();
    297e:	4b17      	ldr	r3, [pc, #92]	; (29dc <ulMainGetRunTimeCounterValue+0x98>)
    2980:	4798      	blx	r3
	
	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
    2982:	68fb      	ldr	r3, [r7, #12]
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	68ba      	ldr	r2, [r7, #8]
    2988:	4013      	ands	r3, r2
    298a:	d007      	beq.n	299c <ulMainGetRunTimeCounterValue+0x58>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
    298c:	69bb      	ldr	r3, [r7, #24]
    298e:	3301      	adds	r3, #1
    2990:	61bb      	str	r3, [r7, #24]
		
		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
    2992:	693b      	ldr	r3, [r7, #16]
    2994:	681b      	ldr	r3, [r3, #0]
    2996:	697a      	ldr	r2, [r7, #20]
    2998:	1ad3      	subs	r3, r2, r3
    299a:	61fb      	str	r3, [r7, #28]
	}	
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
    299c:	69ba      	ldr	r2, [r7, #24]
    299e:	0013      	movs	r3, r2
    29a0:	009b      	lsls	r3, r3, #2
    29a2:	189b      	adds	r3, r3, r2
    29a4:	005b      	lsls	r3, r3, #1
    29a6:	607b      	str	r3, [r7, #4]
		
	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
    29a8:	4b0d      	ldr	r3, [pc, #52]	; (29e0 <ulMainGetRunTimeCounterValue+0x9c>)
    29aa:	681a      	ldr	r2, [r3, #0]
    29ac:	4b07      	ldr	r3, [pc, #28]	; (29cc <ulMainGetRunTimeCounterValue+0x88>)
    29ae:	0011      	movs	r1, r2
    29b0:	69f8      	ldr	r0, [r7, #28]
    29b2:	4798      	blx	r3
    29b4:	0003      	movs	r3, r0
    29b6:	001a      	movs	r2, r3
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	189b      	adds	r3, r3, r2
    29bc:	607b      	str	r3, [r7, #4]
	
	return ulReturn;	
    29be:	687b      	ldr	r3, [r7, #4]
}
    29c0:	0018      	movs	r0, r3
    29c2:	46bd      	mov	sp, r7
    29c4:	b008      	add	sp, #32
    29c6:	bd80      	pop	{r7, pc}
    29c8:	00002e45 	.word	0x00002e45
    29cc:	000038f1 	.word	0x000038f1
    29d0:	e000e018 	.word	0xe000e018
    29d4:	e000ed04 	.word	0xe000ed04
    29d8:	00001999 	.word	0x00001999
    29dc:	000005a5 	.word	0x000005a5
    29e0:	2000444c 	.word	0x2000444c

000029e4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    29e4:	b580      	push	{r7, lr}
    29e6:	b082      	sub	sp, #8
    29e8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    29ea:	4b10      	ldr	r3, [pc, #64]	; (2a2c <cpu_irq_enter_critical+0x48>)
    29ec:	681b      	ldr	r3, [r3, #0]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d112      	bne.n	2a18 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29f2:	f3ef 8310 	mrs	r3, PRIMASK
    29f6:	607b      	str	r3, [r7, #4]
  return(result);
    29f8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    29fa:	2b00      	cmp	r3, #0
    29fc:	d109      	bne.n	2a12 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
    29fe:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2a00:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a04:	4b0a      	ldr	r3, [pc, #40]	; (2a30 <cpu_irq_enter_critical+0x4c>)
    2a06:	2200      	movs	r2, #0
    2a08:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a0a:	4b0a      	ldr	r3, [pc, #40]	; (2a34 <cpu_irq_enter_critical+0x50>)
    2a0c:	2201      	movs	r2, #1
    2a0e:	701a      	strb	r2, [r3, #0]
    2a10:	e002      	b.n	2a18 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2a12:	4b08      	ldr	r3, [pc, #32]	; (2a34 <cpu_irq_enter_critical+0x50>)
    2a14:	2200      	movs	r2, #0
    2a16:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2a18:	4b04      	ldr	r3, [pc, #16]	; (2a2c <cpu_irq_enter_critical+0x48>)
    2a1a:	681b      	ldr	r3, [r3, #0]
    2a1c:	1c5a      	adds	r2, r3, #1
    2a1e:	4b03      	ldr	r3, [pc, #12]	; (2a2c <cpu_irq_enter_critical+0x48>)
    2a20:	601a      	str	r2, [r3, #0]
}
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	46bd      	mov	sp, r7
    2a26:	b002      	add	sp, #8
    2a28:	bd80      	pop	{r7, pc}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20004450 	.word	0x20004450
    2a30:	20000004 	.word	0x20000004
    2a34:	20004454 	.word	0x20004454

00002a38 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a3c:	4b0b      	ldr	r3, [pc, #44]	; (2a6c <cpu_irq_leave_critical+0x34>)
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	1e5a      	subs	r2, r3, #1
    2a42:	4b0a      	ldr	r3, [pc, #40]	; (2a6c <cpu_irq_leave_critical+0x34>)
    2a44:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a46:	4b09      	ldr	r3, [pc, #36]	; (2a6c <cpu_irq_leave_critical+0x34>)
    2a48:	681b      	ldr	r3, [r3, #0]
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d10a      	bne.n	2a64 <cpu_irq_leave_critical+0x2c>
    2a4e:	4b08      	ldr	r3, [pc, #32]	; (2a70 <cpu_irq_leave_critical+0x38>)
    2a50:	781b      	ldrb	r3, [r3, #0]
    2a52:	b2db      	uxtb	r3, r3
    2a54:	2b00      	cmp	r3, #0
    2a56:	d005      	beq.n	2a64 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2a58:	4b06      	ldr	r3, [pc, #24]	; (2a74 <cpu_irq_leave_critical+0x3c>)
    2a5a:	2201      	movs	r2, #1
    2a5c:	701a      	strb	r2, [r3, #0]
    2a5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
    2a62:	b662      	cpsie	i
	}
}
    2a64:	46c0      	nop			; (mov r8, r8)
    2a66:	46bd      	mov	sp, r7
    2a68:	bd80      	pop	{r7, pc}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	20004450 	.word	0x20004450
    2a70:	20004454 	.word	0x20004454
    2a74:	20000004 	.word	0x20000004

00002a78 <system_pinmux_get_group_from_gpio_pin>:
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b084      	sub	sp, #16
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	0002      	movs	r2, r0
    2a80:	1dfb      	adds	r3, r7, #7
    2a82:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2a84:	230f      	movs	r3, #15
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	1dfa      	adds	r2, r7, #7
    2a8a:	7812      	ldrb	r2, [r2, #0]
    2a8c:	09d2      	lsrs	r2, r2, #7
    2a8e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2a90:	230e      	movs	r3, #14
    2a92:	18fb      	adds	r3, r7, r3
    2a94:	1dfa      	adds	r2, r7, #7
    2a96:	7812      	ldrb	r2, [r2, #0]
    2a98:	0952      	lsrs	r2, r2, #5
    2a9a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2a9c:	4b0d      	ldr	r3, [pc, #52]	; (2ad4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2a9e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2aa0:	230f      	movs	r3, #15
    2aa2:	18fb      	adds	r3, r7, r3
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d10f      	bne.n	2aca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2aaa:	230f      	movs	r3, #15
    2aac:	18fb      	adds	r3, r7, r3
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	009b      	lsls	r3, r3, #2
    2ab2:	2210      	movs	r2, #16
    2ab4:	4694      	mov	ip, r2
    2ab6:	44bc      	add	ip, r7
    2ab8:	4463      	add	r3, ip
    2aba:	3b08      	subs	r3, #8
    2abc:	681a      	ldr	r2, [r3, #0]
    2abe:	230e      	movs	r3, #14
    2ac0:	18fb      	adds	r3, r7, r3
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	01db      	lsls	r3, r3, #7
    2ac6:	18d3      	adds	r3, r2, r3
    2ac8:	e000      	b.n	2acc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2aca:	2300      	movs	r3, #0
}
    2acc:	0018      	movs	r0, r3
    2ace:	46bd      	mov	sp, r7
    2ad0:	b004      	add	sp, #16
    2ad2:	bd80      	pop	{r7, pc}
    2ad4:	41004400 	.word	0x41004400

00002ad8 <port_get_group_from_gpio_pin>:
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b082      	sub	sp, #8
    2adc:	af00      	add	r7, sp, #0
    2ade:	0002      	movs	r2, r0
    2ae0:	1dfb      	adds	r3, r7, #7
    2ae2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2ae4:	1dfb      	adds	r3, r7, #7
    2ae6:	781b      	ldrb	r3, [r3, #0]
    2ae8:	0018      	movs	r0, r3
    2aea:	4b03      	ldr	r3, [pc, #12]	; (2af8 <port_get_group_from_gpio_pin+0x20>)
    2aec:	4798      	blx	r3
    2aee:	0003      	movs	r3, r0
}
    2af0:	0018      	movs	r0, r3
    2af2:	46bd      	mov	sp, r7
    2af4:	b002      	add	sp, #8
    2af6:	bd80      	pop	{r7, pc}
    2af8:	00002a79 	.word	0x00002a79

00002afc <port_get_config_defaults>:
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b082      	sub	sp, #8
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
	config->direction = PORT_PIN_DIR_INPUT;
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	2200      	movs	r2, #0
    2b08:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2b0a:	687b      	ldr	r3, [r7, #4]
    2b0c:	2201      	movs	r2, #1
    2b0e:	705a      	strb	r2, [r3, #1]
}
    2b10:	46c0      	nop			; (mov r8, r8)
    2b12:	46bd      	mov	sp, r7
    2b14:	b002      	add	sp, #8
    2b16:	bd80      	pop	{r7, pc}

00002b18 <port_pin_set_output_level>:
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	b084      	sub	sp, #16
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	0002      	movs	r2, r0
    2b20:	1dfb      	adds	r3, r7, #7
    2b22:	701a      	strb	r2, [r3, #0]
    2b24:	1dbb      	adds	r3, r7, #6
    2b26:	1c0a      	adds	r2, r1, #0
    2b28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2b2a:	1dfb      	adds	r3, r7, #7
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	0018      	movs	r0, r3
    2b30:	4b0d      	ldr	r3, [pc, #52]	; (2b68 <port_pin_set_output_level+0x50>)
    2b32:	4798      	blx	r3
    2b34:	0003      	movs	r3, r0
    2b36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2b38:	1dfb      	adds	r3, r7, #7
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	221f      	movs	r2, #31
    2b3e:	4013      	ands	r3, r2
    2b40:	2201      	movs	r2, #1
    2b42:	409a      	lsls	r2, r3
    2b44:	0013      	movs	r3, r2
    2b46:	60bb      	str	r3, [r7, #8]
	if (level) {
    2b48:	1dbb      	adds	r3, r7, #6
    2b4a:	781b      	ldrb	r3, [r3, #0]
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d003      	beq.n	2b58 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	68ba      	ldr	r2, [r7, #8]
    2b54:	619a      	str	r2, [r3, #24]
}
    2b56:	e002      	b.n	2b5e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2b58:	68fb      	ldr	r3, [r7, #12]
    2b5a:	68ba      	ldr	r2, [r7, #8]
    2b5c:	615a      	str	r2, [r3, #20]
}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	46bd      	mov	sp, r7
    2b62:	b004      	add	sp, #16
    2b64:	bd80      	pop	{r7, pc}
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	00002ad9 	.word	0x00002ad9

00002b6c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	b082      	sub	sp, #8
    2b70:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2b72:	1d3b      	adds	r3, r7, #4
    2b74:	0018      	movs	r0, r3
    2b76:	4b0e      	ldr	r3, [pc, #56]	; (2bb0 <system_board_init+0x44>)
    2b78:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2b7a:	1d3b      	adds	r3, r7, #4
    2b7c:	2201      	movs	r2, #1
    2b7e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2b80:	1d3b      	adds	r3, r7, #4
    2b82:	0019      	movs	r1, r3
    2b84:	200e      	movs	r0, #14
    2b86:	4b0b      	ldr	r3, [pc, #44]	; (2bb4 <system_board_init+0x48>)
    2b88:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    2b8a:	2101      	movs	r1, #1
    2b8c:	200e      	movs	r0, #14
    2b8e:	4b0a      	ldr	r3, [pc, #40]	; (2bb8 <system_board_init+0x4c>)
    2b90:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2b92:	1d3b      	adds	r3, r7, #4
    2b94:	2200      	movs	r2, #0
    2b96:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2b98:	1d3b      	adds	r3, r7, #4
    2b9a:	2201      	movs	r2, #1
    2b9c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2b9e:	1d3b      	adds	r3, r7, #4
    2ba0:	0019      	movs	r1, r3
    2ba2:	200f      	movs	r0, #15
    2ba4:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <system_board_init+0x48>)
    2ba6:	4798      	blx	r3
}
    2ba8:	46c0      	nop			; (mov r8, r8)
    2baa:	46bd      	mov	sp, r7
    2bac:	b002      	add	sp, #8
    2bae:	bd80      	pop	{r7, pc}
    2bb0:	00002afd 	.word	0x00002afd
    2bb4:	00002be1 	.word	0x00002be1
    2bb8:	00002b19 	.word	0x00002b19

00002bbc <system_pinmux_get_config_defaults>:
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	2280      	movs	r2, #128	; 0x80
    2bc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	2200      	movs	r2, #0
    2bce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	2201      	movs	r2, #1
    2bd4:	709a      	strb	r2, [r3, #2]
}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	46bd      	mov	sp, r7
    2bda:	b002      	add	sp, #8
    2bdc:	bd80      	pop	{r7, pc}
	...

00002be0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2be0:	b580      	push	{r7, lr}
    2be2:	b084      	sub	sp, #16
    2be4:	af00      	add	r7, sp, #0
    2be6:	0002      	movs	r2, r0
    2be8:	6039      	str	r1, [r7, #0]
    2bea:	1dfb      	adds	r3, r7, #7
    2bec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2bee:	230c      	movs	r3, #12
    2bf0:	18fb      	adds	r3, r7, r3
    2bf2:	0018      	movs	r0, r3
    2bf4:	4b0d      	ldr	r3, [pc, #52]	; (2c2c <port_pin_set_config+0x4c>)
    2bf6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2bf8:	230c      	movs	r3, #12
    2bfa:	18fb      	adds	r3, r7, r3
    2bfc:	2280      	movs	r2, #128	; 0x80
    2bfe:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2c00:	683b      	ldr	r3, [r7, #0]
    2c02:	781a      	ldrb	r2, [r3, #0]
    2c04:	230c      	movs	r3, #12
    2c06:	18fb      	adds	r3, r7, r3
    2c08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2c0a:	683b      	ldr	r3, [r7, #0]
    2c0c:	785a      	ldrb	r2, [r3, #1]
    2c0e:	230c      	movs	r3, #12
    2c10:	18fb      	adds	r3, r7, r3
    2c12:	709a      	strb	r2, [r3, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2c14:	230c      	movs	r3, #12
    2c16:	18fa      	adds	r2, r7, r3
    2c18:	1dfb      	adds	r3, r7, #7
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	0011      	movs	r1, r2
    2c1e:	0018      	movs	r0, r3
    2c20:	4b03      	ldr	r3, [pc, #12]	; (2c30 <port_pin_set_config+0x50>)
    2c22:	4798      	blx	r3
}
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46bd      	mov	sp, r7
    2c28:	b004      	add	sp, #16
    2c2a:	bd80      	pop	{r7, pc}
    2c2c:	00002bbd 	.word	0x00002bbd
    2c30:	000037f9 	.word	0x000037f9

00002c34 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    2c34:	b580      	push	{r7, lr}
    2c36:	b082      	sub	sp, #8
    2c38:	af00      	add	r7, sp, #0
    2c3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	2201      	movs	r2, #1
    2c40:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	2200      	movs	r2, #0
    2c46:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	2206      	movs	r2, #6
    2c4c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	2200      	movs	r2, #0
    2c52:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	2200      	movs	r2, #0
    2c58:	725a      	strb	r2, [r3, #9]
}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	46bd      	mov	sp, r7
    2c5e:	b002      	add	sp, #8
    2c60:	bd80      	pop	{r7, pc}

00002c62 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2c62:	b580      	push	{r7, lr}
    2c64:	b082      	sub	sp, #8
    2c66:	af00      	add	r7, sp, #0
    2c68:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	2200      	movs	r2, #0
    2c6e:	701a      	strb	r2, [r3, #0]
	config->write_lock       = false;
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	2200      	movs	r2, #0
    2c74:	705a      	strb	r2, [r3, #1]
}
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	46bd      	mov	sp, r7
    2c7a:	b002      	add	sp, #8
    2c7c:	bd80      	pop	{r7, pc}

00002c7e <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    2c7e:	b580      	push	{r7, lr}
    2c80:	b082      	sub	sp, #8
    2c82:	af00      	add	r7, sp, #0
    2c84:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler      = SYSTEM_OSC8M_DIV_8;
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	2203      	movs	r2, #3
    2c8a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby = false;
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	2200      	movs	r2, #0
    2c90:	705a      	strb	r2, [r3, #1]
	config->on_demand      = true;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	2201      	movs	r2, #1
    2c96:	709a      	strb	r2, [r3, #2]
}
    2c98:	46c0      	nop			; (mov r8, r8)
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b002      	add	sp, #8
    2c9e:	bd80      	pop	{r7, pc}

00002ca0 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    2ca0:	b580      	push	{r7, lr}
    2ca2:	b082      	sub	sp, #8
    2ca4:	af00      	add	r7, sp, #0
    2ca6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	2200      	movs	r2, #0
    2cac:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	2200      	movs	r2, #0
    2cb2:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	2200      	movs	r2, #0
    2cb8:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	2200      	movs	r2, #0
    2cbe:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	2200      	movs	r2, #0
    2cc4:	725a      	strb	r2, [r3, #9]
	config->run_in_standby  = false;
    2cc6:	687b      	ldr	r3, [r7, #4]
    2cc8:	2200      	movs	r2, #0
    2cca:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	2201      	movs	r2, #1
    2cd0:	709a      	strb	r2, [r3, #2]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	2207      	movs	r2, #7
    2cd6:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	223f      	movs	r2, #63	; 0x3f
    2cdc:	72da      	strb	r2, [r3, #11]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	2201      	movs	r2, #1
    2ce2:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	2201      	movs	r2, #1
    2ce8:	735a      	strb	r2, [r3, #13]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	2206      	movs	r2, #6
    2cee:	81da      	strh	r2, [r3, #14]
}
    2cf0:	46c0      	nop			; (mov r8, r8)
    2cf2:	46bd      	mov	sp, r7
    2cf4:	b002      	add	sp, #8
    2cf6:	bd80      	pop	{r7, pc}

00002cf8 <system_main_clock_set_failure_detect>:
 *
 * \param[in] enable  Boolean \c true to enable, \c false to disable detection
 */
static inline void system_main_clock_set_failure_detect(
		const bool enable)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b082      	sub	sp, #8
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	0002      	movs	r2, r0
    2d00:	1dfb      	adds	r3, r7, #7
    2d02:	701a      	strb	r2, [r3, #0]
	if (enable) {
    2d04:	1dfb      	adds	r3, r7, #7
    2d06:	781b      	ldrb	r3, [r3, #0]
    2d08:	2b00      	cmp	r3, #0
    2d0a:	d008      	beq.n	2d1e <system_main_clock_set_failure_detect+0x26>
		PM->CTRL.reg |=  PM_CTRL_CFDEN;
    2d0c:	4a0a      	ldr	r2, [pc, #40]	; (2d38 <system_main_clock_set_failure_detect+0x40>)
    2d0e:	4b0a      	ldr	r3, [pc, #40]	; (2d38 <system_main_clock_set_failure_detect+0x40>)
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	b2db      	uxtb	r3, r3
    2d14:	2104      	movs	r1, #4
    2d16:	430b      	orrs	r3, r1
    2d18:	b2db      	uxtb	r3, r3
    2d1a:	7013      	strb	r3, [r2, #0]
	} else {
		PM->CTRL.reg &= ~PM_CTRL_CFDEN;
	}
}
    2d1c:	e007      	b.n	2d2e <system_main_clock_set_failure_detect+0x36>
		PM->CTRL.reg &= ~PM_CTRL_CFDEN;
    2d1e:	4a06      	ldr	r2, [pc, #24]	; (2d38 <system_main_clock_set_failure_detect+0x40>)
    2d20:	4b05      	ldr	r3, [pc, #20]	; (2d38 <system_main_clock_set_failure_detect+0x40>)
    2d22:	781b      	ldrb	r3, [r3, #0]
    2d24:	b2db      	uxtb	r3, r3
    2d26:	2104      	movs	r1, #4
    2d28:	438b      	bics	r3, r1
    2d2a:	b2db      	uxtb	r3, r3
    2d2c:	7013      	strb	r3, [r2, #0]
}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	46bd      	mov	sp, r7
    2d32:	b002      	add	sp, #8
    2d34:	bd80      	pop	{r7, pc}
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	40000400 	.word	0x40000400

00002d3c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	0002      	movs	r2, r0
    2d44:	1dfb      	adds	r3, r7, #7
    2d46:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2d48:	4a03      	ldr	r2, [pc, #12]	; (2d58 <system_cpu_clock_set_divider+0x1c>)
    2d4a:	1dfb      	adds	r3, r7, #7
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	7213      	strb	r3, [r2, #8]
}
    2d50:	46c0      	nop			; (mov r8, r8)
    2d52:	46bd      	mov	sp, r7
    2d54:	b002      	add	sp, #8
    2d56:	bd80      	pop	{r7, pc}
    2d58:	40000400 	.word	0x40000400

00002d5c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    2d5c:	b580      	push	{r7, lr}
    2d5e:	b082      	sub	sp, #8
    2d60:	af00      	add	r7, sp, #0
    2d62:	0002      	movs	r2, r0
    2d64:	1dfb      	adds	r3, r7, #7
    2d66:	701a      	strb	r2, [r3, #0]
    2d68:	1dbb      	adds	r3, r7, #6
    2d6a:	1c0a      	adds	r2, r1, #0
    2d6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2d6e:	1dfb      	adds	r3, r7, #7
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	2b01      	cmp	r3, #1
    2d74:	d008      	beq.n	2d88 <system_apb_clock_set_divider+0x2c>
    2d76:	2b02      	cmp	r3, #2
    2d78:	d00b      	beq.n	2d92 <system_apb_clock_set_divider+0x36>
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d10e      	bne.n	2d9c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2d7e:	4a0b      	ldr	r2, [pc, #44]	; (2dac <system_apb_clock_set_divider+0x50>)
    2d80:	1dbb      	adds	r3, r7, #6
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	7253      	strb	r3, [r2, #9]
			break;
    2d86:	e00b      	b.n	2da0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2d88:	4a08      	ldr	r2, [pc, #32]	; (2dac <system_apb_clock_set_divider+0x50>)
    2d8a:	1dbb      	adds	r3, r7, #6
    2d8c:	781b      	ldrb	r3, [r3, #0]
    2d8e:	7293      	strb	r3, [r2, #10]
			break;
    2d90:	e006      	b.n	2da0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2d92:	4a06      	ldr	r2, [pc, #24]	; (2dac <system_apb_clock_set_divider+0x50>)
    2d94:	1dbb      	adds	r3, r7, #6
    2d96:	781b      	ldrb	r3, [r3, #0]
    2d98:	72d3      	strb	r3, [r2, #11]
			break;
    2d9a:	e001      	b.n	2da0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2d9c:	2317      	movs	r3, #23
    2d9e:	e000      	b.n	2da2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    2da0:	2300      	movs	r3, #0
}
    2da2:	0018      	movs	r0, r3
    2da4:	46bd      	mov	sp, r7
    2da6:	b002      	add	sp, #8
    2da8:	bd80      	pop	{r7, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	40000400 	.word	0x40000400

00002db0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2db0:	b580      	push	{r7, lr}
    2db2:	b082      	sub	sp, #8
    2db4:	af00      	add	r7, sp, #0
    2db6:	0002      	movs	r2, r0
    2db8:	1dfb      	adds	r3, r7, #7
    2dba:	701a      	strb	r2, [r3, #0]
	Assert((wait_states & NVMCTRL_CTRLB_RWS_Msk) == wait_states);
	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2dbc:	4a08      	ldr	r2, [pc, #32]	; (2de0 <system_flash_set_waitstates+0x30>)
    2dbe:	1dfb      	adds	r3, r7, #7
    2dc0:	781b      	ldrb	r3, [r3, #0]
    2dc2:	210f      	movs	r1, #15
    2dc4:	400b      	ands	r3, r1
    2dc6:	b2d9      	uxtb	r1, r3
    2dc8:	6853      	ldr	r3, [r2, #4]
    2dca:	200f      	movs	r0, #15
    2dcc:	4001      	ands	r1, r0
    2dce:	0049      	lsls	r1, r1, #1
    2dd0:	201e      	movs	r0, #30
    2dd2:	4383      	bics	r3, r0
    2dd4:	430b      	orrs	r3, r1
    2dd6:	6053      	str	r3, [r2, #4]
}
    2dd8:	46c0      	nop			; (mov r8, r8)
    2dda:	46bd      	mov	sp, r7
    2ddc:	b002      	add	sp, #8
    2dde:	bd80      	pop	{r7, pc}
    2de0:	41004000 	.word	0x41004000

00002de4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	4b04      	ldr	r3, [pc, #16]	; (2dfc <_system_dfll_wait_for_sync+0x18>)
    2dec:	68db      	ldr	r3, [r3, #12]
    2dee:	2210      	movs	r2, #16
    2df0:	4013      	ands	r3, r2
    2df2:	d0fa      	beq.n	2dea <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2df4:	46c0      	nop			; (mov r8, r8)
    2df6:	46bd      	mov	sp, r7
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	40000800 	.word	0x40000800

00002e00 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2e00:	b580      	push	{r7, lr}
    2e02:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    2e04:	4a0c      	ldr	r2, [pc, #48]	; (2e38 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2e06:	4b0d      	ldr	r3, [pc, #52]	; (2e3c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2e08:	681b      	ldr	r3, [r3, #0]
    2e0a:	b29b      	uxth	r3, r3
    2e0c:	2180      	movs	r1, #128	; 0x80
    2e0e:	438b      	bics	r3, r1
    2e10:	b29b      	uxth	r3, r3
    2e12:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2e14:	4b0a      	ldr	r3, [pc, #40]	; (2e40 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2e16:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2e18:	4a07      	ldr	r2, [pc, #28]	; (2e38 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2e1a:	4b08      	ldr	r3, [pc, #32]	; (2e3c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2e1c:	689b      	ldr	r3, [r3, #8]
    2e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2e20:	4a05      	ldr	r2, [pc, #20]	; (2e38 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2e22:	4b06      	ldr	r3, [pc, #24]	; (2e3c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2e24:	685b      	ldr	r3, [r3, #4]
    2e26:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2e28:	4a03      	ldr	r2, [pc, #12]	; (2e38 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2e2a:	4b04      	ldr	r3, [pc, #16]	; (2e3c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	b29b      	uxth	r3, r3
    2e30:	8493      	strh	r3, [r2, #36]	; 0x24
}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	46bd      	mov	sp, r7
    2e36:	bd80      	pop	{r7, pc}
    2e38:	40000800 	.word	0x40000800
    2e3c:	20004458 	.word	0x20004458
    2e40:	00002de5 	.word	0x00002de5

00002e44 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2e44:	b580      	push	{r7, lr}
    2e46:	b082      	sub	sp, #8
    2e48:	af00      	add	r7, sp, #0
    2e4a:	0002      	movs	r2, r0
    2e4c:	1dfb      	adds	r3, r7, #7
    2e4e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2e50:	1dfb      	adds	r3, r7, #7
    2e52:	781b      	ldrb	r3, [r3, #0]
    2e54:	2b07      	cmp	r3, #7
    2e56:	d833      	bhi.n	2ec0 <system_clock_source_get_hz+0x7c>
    2e58:	009a      	lsls	r2, r3, #2
    2e5a:	4b1c      	ldr	r3, [pc, #112]	; (2ecc <system_clock_source_get_hz+0x88>)
    2e5c:	18d3      	adds	r3, r2, r3
    2e5e:	681b      	ldr	r3, [r3, #0]
    2e60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2e62:	4b1b      	ldr	r3, [pc, #108]	; (2ed0 <system_clock_source_get_hz+0x8c>)
    2e64:	68db      	ldr	r3, [r3, #12]
    2e66:	e02c      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2e68:	4b1a      	ldr	r3, [pc, #104]	; (2ed4 <system_clock_source_get_hz+0x90>)
    2e6a:	6a1b      	ldr	r3, [r3, #32]
    2e6c:	059b      	lsls	r3, r3, #22
    2e6e:	0f9b      	lsrs	r3, r3, #30
    2e70:	b2db      	uxtb	r3, r3
    2e72:	001a      	movs	r2, r3
    2e74:	4b18      	ldr	r3, [pc, #96]	; (2ed8 <system_clock_source_get_hz+0x94>)
    2e76:	40d3      	lsrs	r3, r2
    2e78:	e023      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2e7a:	2380      	movs	r3, #128	; 0x80
    2e7c:	021b      	lsls	r3, r3, #8
    2e7e:	e020      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2e80:	2380      	movs	r3, #128	; 0x80
    2e82:	021b      	lsls	r3, r3, #8
    2e84:	e01d      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2e86:	4b12      	ldr	r3, [pc, #72]	; (2ed0 <system_clock_source_get_hz+0x8c>)
    2e88:	691b      	ldr	r3, [r3, #16]
    2e8a:	e01a      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e8c:	4b10      	ldr	r3, [pc, #64]	; (2ed0 <system_clock_source_get_hz+0x8c>)
    2e8e:	681b      	ldr	r3, [r3, #0]
    2e90:	2202      	movs	r2, #2
    2e92:	4013      	ands	r3, r2
    2e94:	d101      	bne.n	2e9a <system_clock_source_get_hz+0x56>
			return 0;
    2e96:	2300      	movs	r3, #0
    2e98:	e013      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2e9a:	4b10      	ldr	r3, [pc, #64]	; (2edc <system_clock_source_get_hz+0x98>)
    2e9c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2e9e:	4b0c      	ldr	r3, [pc, #48]	; (2ed0 <system_clock_source_get_hz+0x8c>)
    2ea0:	681b      	ldr	r3, [r3, #0]
    2ea2:	2204      	movs	r2, #4
    2ea4:	4013      	ands	r3, r2
    2ea6:	d009      	beq.n	2ebc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2ea8:	2000      	movs	r0, #0
    2eaa:	4b0d      	ldr	r3, [pc, #52]	; (2ee0 <system_clock_source_get_hz+0x9c>)
    2eac:	4798      	blx	r3
    2eae:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    2eb0:	4b07      	ldr	r3, [pc, #28]	; (2ed0 <system_clock_source_get_hz+0x8c>)
    2eb2:	689b      	ldr	r3, [r3, #8]
    2eb4:	041b      	lsls	r3, r3, #16
    2eb6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2eb8:	4353      	muls	r3, r2
    2eba:	e002      	b.n	2ec2 <system_clock_source_get_hz+0x7e>
		}

		return 48000000UL;
    2ebc:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <system_clock_source_get_hz+0xa0>)
    2ebe:	e000      	b.n	2ec2 <system_clock_source_get_hz+0x7e>

	default:
		return 0;
    2ec0:	2300      	movs	r3, #0
	}
}
    2ec2:	0018      	movs	r0, r3
    2ec4:	46bd      	mov	sp, r7
    2ec6:	b002      	add	sp, #8
    2ec8:	bd80      	pop	{r7, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	00003d30 	.word	0x00003d30
    2ed0:	20004458 	.word	0x20004458
    2ed4:	40000800 	.word	0x40000800
    2ed8:	007a1200 	.word	0x007a1200
    2edc:	00002de5 	.word	0x00002de5
    2ee0:	00003665 	.word	0x00003665
    2ee4:	02dc6c00 	.word	0x02dc6c00

00002ee8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ee8:	b580      	push	{r7, lr}
    2eea:	b084      	sub	sp, #16
    2eec:	af00      	add	r7, sp, #0
    2eee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ef0:	4b1a      	ldr	r3, [pc, #104]	; (2f5c <system_clock_source_osc8m_set_config+0x74>)
    2ef2:	6a1b      	ldr	r3, [r3, #32]
    2ef4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC = config->prescaler;
    2ef6:	687b      	ldr	r3, [r7, #4]
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	1c1a      	adds	r2, r3, #0
    2efc:	2303      	movs	r3, #3
    2efe:	4013      	ands	r3, r2
    2f00:	b2da      	uxtb	r2, r3
    2f02:	230d      	movs	r3, #13
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	2103      	movs	r1, #3
    2f08:	400a      	ands	r2, r1
    2f0a:	0010      	movs	r0, r2
    2f0c:	781a      	ldrb	r2, [r3, #0]
    2f0e:	2103      	movs	r1, #3
    2f10:	438a      	bics	r2, r1
    2f12:	1c11      	adds	r1, r2, #0
    2f14:	1c02      	adds	r2, r0, #0
    2f16:	430a      	orrs	r2, r1
    2f18:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	789a      	ldrb	r2, [r3, #2]
    2f1e:	230c      	movs	r3, #12
    2f20:	18fb      	adds	r3, r7, r3
    2f22:	01d0      	lsls	r0, r2, #7
    2f24:	781a      	ldrb	r2, [r3, #0]
    2f26:	217f      	movs	r1, #127	; 0x7f
    2f28:	400a      	ands	r2, r1
    2f2a:	1c11      	adds	r1, r2, #0
    2f2c:	1c02      	adds	r2, r0, #0
    2f2e:	430a      	orrs	r2, r1
    2f30:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2f32:	687b      	ldr	r3, [r7, #4]
    2f34:	785a      	ldrb	r2, [r3, #1]
    2f36:	230c      	movs	r3, #12
    2f38:	18fb      	adds	r3, r7, r3
    2f3a:	2101      	movs	r1, #1
    2f3c:	400a      	ands	r2, r1
    2f3e:	0190      	lsls	r0, r2, #6
    2f40:	781a      	ldrb	r2, [r3, #0]
    2f42:	2140      	movs	r1, #64	; 0x40
    2f44:	438a      	bics	r2, r1
    2f46:	1c11      	adds	r1, r2, #0
    2f48:	1c02      	adds	r2, r0, #0
    2f4a:	430a      	orrs	r2, r1
    2f4c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    2f4e:	4b03      	ldr	r3, [pc, #12]	; (2f5c <system_clock_source_osc8m_set_config+0x74>)
    2f50:	68fa      	ldr	r2, [r7, #12]
    2f52:	621a      	str	r2, [r3, #32]
}
    2f54:	46c0      	nop			; (mov r8, r8)
    2f56:	46bd      	mov	sp, r7
    2f58:	b004      	add	sp, #16
    2f5a:	bd80      	pop	{r7, pc}
    2f5c:	40000800 	.word	0x40000800

00002f60 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2f60:	b580      	push	{r7, lr}
    2f62:	b082      	sub	sp, #8
    2f64:	af00      	add	r7, sp, #0
    2f66:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	7a9b      	ldrb	r3, [r3, #10]
    2f6c:	021b      	lsls	r3, r3, #8
    2f6e:	001a      	movs	r2, r3
    2f70:	23f8      	movs	r3, #248	; 0xf8
    2f72:	015b      	lsls	r3, r3, #5
    2f74:	4013      	ands	r3, r2
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2f76:	687a      	ldr	r2, [r7, #4]
    2f78:	7ad2      	ldrb	r2, [r2, #11]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f7a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    2f7c:	4b1d      	ldr	r3, [pc, #116]	; (2ff4 <system_clock_source_dfll_set_config+0x94>)
    2f7e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
    2f88:	4313      	orrs	r3, r2
    2f8a:	b2db      	uxtb	r3, r3
    2f8c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
    2f92:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    2f94:	687a      	ldr	r2, [r7, #4]
    2f96:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
    2f98:	431a      	orrs	r2, r3
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	785b      	ldrb	r3, [r3, #1]
    2f9e:	019b      	lsls	r3, r3, #6
			(uint32_t)config->chill_cycle     |
    2fa0:	431a      	orrs	r2, r3
			(uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos;
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	789b      	ldrb	r3, [r3, #2]
    2fa6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->run_in_standby << SYSCTRL_DFLLCTRL_RUNSTDBY_Pos |
    2fa8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    2faa:	4b12      	ldr	r3, [pc, #72]	; (2ff4 <system_clock_source_dfll_set_config+0x94>)
    2fac:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	781b      	ldrb	r3, [r3, #0]
    2fb2:	2b04      	cmp	r3, #4
    2fb4:	d11a      	bne.n	2fec <system_clock_source_dfll_set_config+0x8c>
		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	7b1b      	ldrb	r3, [r3, #12]
    2fba:	061b      	lsls	r3, r3, #24
    2fbc:	001a      	movs	r2, r3
    2fbe:	23f8      	movs	r3, #248	; 0xf8
    2fc0:	055b      	lsls	r3, r3, #21
    2fc2:	401a      	ands	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	7b5b      	ldrb	r3, [r3, #13]
    2fc8:	041b      	lsls	r3, r3, #16
    2fca:	0019      	movs	r1, r3
    2fcc:	23ff      	movs	r3, #255	; 0xff
    2fce:	041b      	lsls	r3, r3, #16
    2fd0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fd2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2fd4:	687a      	ldr	r2, [r7, #4]
    2fd6:	89d2      	ldrh	r2, [r2, #14]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2fd8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    2fda:	4b06      	ldr	r3, [pc, #24]	; (2ff4 <system_clock_source_dfll_set_config+0x94>)
    2fdc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2fde:	4b05      	ldr	r3, [pc, #20]	; (2ff4 <system_clock_source_dfll_set_config+0x94>)
    2fe0:	681b      	ldr	r3, [r3, #0]
    2fe2:	687a      	ldr	r2, [r7, #4]
    2fe4:	7812      	ldrb	r2, [r2, #0]
    2fe6:	431a      	orrs	r2, r3
    2fe8:	4b02      	ldr	r3, [pc, #8]	; (2ff4 <system_clock_source_dfll_set_config+0x94>)
    2fea:	601a      	str	r2, [r3, #0]
	}
}
    2fec:	46c0      	nop			; (mov r8, r8)
    2fee:	46bd      	mov	sp, r7
    2ff0:	b002      	add	sp, #8
    2ff2:	bd80      	pop	{r7, pc}
    2ff4:	20004458 	.word	0x20004458

00002ff8 <system_clock_source_enable>:
 *
 * \retval STATUS_ERR_NOT_INITIALIZED DFLL configuration is not initialized
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2ff8:	b580      	push	{r7, lr}
    2ffa:	b082      	sub	sp, #8
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	0002      	movs	r2, r0
    3000:	1dfb      	adds	r3, r7, #7
    3002:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3004:	1dfb      	adds	r3, r7, #7
    3006:	781b      	ldrb	r3, [r3, #0]
    3008:	2b07      	cmp	r3, #7
    300a:	d830      	bhi.n	306e <system_clock_source_enable+0x76>
    300c:	009a      	lsls	r2, r3, #2
    300e:	4b1b      	ldr	r3, [pc, #108]	; (307c <system_clock_source_enable+0x84>)
    3010:	18d3      	adds	r3, r2, r3
    3012:	681b      	ldr	r3, [r3, #0]
    3014:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3016:	4b1a      	ldr	r3, [pc, #104]	; (3080 <system_clock_source_enable+0x88>)
    3018:	4a19      	ldr	r2, [pc, #100]	; (3080 <system_clock_source_enable+0x88>)
    301a:	6a12      	ldr	r2, [r2, #32]
    301c:	2102      	movs	r1, #2
    301e:	430a      	orrs	r2, r1
    3020:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3022:	2300      	movs	r3, #0
    3024:	e026      	b.n	3074 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3026:	4b16      	ldr	r3, [pc, #88]	; (3080 <system_clock_source_enable+0x88>)
    3028:	4a15      	ldr	r2, [pc, #84]	; (3080 <system_clock_source_enable+0x88>)
    302a:	6992      	ldr	r2, [r2, #24]
    302c:	2102      	movs	r1, #2
    302e:	430a      	orrs	r2, r1
    3030:	619a      	str	r2, [r3, #24]
		break;
    3032:	e01e      	b.n	3072 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3034:	4a12      	ldr	r2, [pc, #72]	; (3080 <system_clock_source_enable+0x88>)
    3036:	4b12      	ldr	r3, [pc, #72]	; (3080 <system_clock_source_enable+0x88>)
    3038:	8a1b      	ldrh	r3, [r3, #16]
    303a:	b29b      	uxth	r3, r3
    303c:	2102      	movs	r1, #2
    303e:	430b      	orrs	r3, r1
    3040:	b29b      	uxth	r3, r3
    3042:	8213      	strh	r3, [r2, #16]
		break;
    3044:	e015      	b.n	3072 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3046:	4a0e      	ldr	r2, [pc, #56]	; (3080 <system_clock_source_enable+0x88>)
    3048:	4b0d      	ldr	r3, [pc, #52]	; (3080 <system_clock_source_enable+0x88>)
    304a:	8a9b      	ldrh	r3, [r3, #20]
    304c:	b29b      	uxth	r3, r3
    304e:	2102      	movs	r1, #2
    3050:	430b      	orrs	r3, r1
    3052:	b29b      	uxth	r3, r3
    3054:	8293      	strh	r3, [r2, #20]
		break;
    3056:	e00c      	b.n	3072 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3058:	4b0a      	ldr	r3, [pc, #40]	; (3084 <system_clock_source_enable+0x8c>)
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	2202      	movs	r2, #2
    305e:	431a      	orrs	r2, r3
    3060:	4b08      	ldr	r3, [pc, #32]	; (3084 <system_clock_source_enable+0x8c>)
    3062:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3064:	4b08      	ldr	r3, [pc, #32]	; (3088 <system_clock_source_enable+0x90>)
    3066:	4798      	blx	r3
		break;
    3068:	e003      	b.n	3072 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    306a:	2300      	movs	r3, #0
    306c:	e002      	b.n	3074 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    306e:	2317      	movs	r3, #23
    3070:	e000      	b.n	3074 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    3072:	2300      	movs	r3, #0
}
    3074:	0018      	movs	r0, r3
    3076:	46bd      	mov	sp, r7
    3078:	b002      	add	sp, #8
    307a:	bd80      	pop	{r7, pc}
    307c:	00003d50 	.word	0x00003d50
    3080:	40000800 	.word	0x40000800
    3084:	20004458 	.word	0x20004458
    3088:	00002e01 	.word	0x00002e01

0000308c <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    308c:	b580      	push	{r7, lr}
    308e:	b09e      	sub	sp, #120	; 0x78
    3090:	af00      	add	r7, sp, #0
        /* Workaround for errata 10558 */
        SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
    3092:	4b58      	ldr	r3, [pc, #352]	; (31f4 <system_clock_init+0x168>)
    3094:	4a58      	ldr	r2, [pc, #352]	; (31f8 <system_clock_init+0x16c>)
    3096:	609a      	str	r2, [r3, #8]
                        SYSCTRL_INTFLAG_BOD12DET | SYSCTRL_INTFLAG_BOD33DET |
                        SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3098:	2002      	movs	r0, #2
    309a:	4b58      	ldr	r3, [pc, #352]	; (31fc <system_clock_init+0x170>)
    309c:	4798      	blx	r3


	/* DFLL (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    309e:	2368      	movs	r3, #104	; 0x68
    30a0:	18fb      	adds	r3, r7, r3
    30a2:	0018      	movs	r0, r3
    30a4:	4b56      	ldr	r3, [pc, #344]	; (3200 <system_clock_init+0x174>)
    30a6:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    30a8:	2368      	movs	r3, #104	; 0x68
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	2204      	movs	r2, #4
    30ae:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = CONF_CLOCK_DFLL_ON_DEMAND;
    30b0:	2368      	movs	r3, #104	; 0x68
    30b2:	18fb      	adds	r3, r7, r3
    30b4:	2200      	movs	r2, #0
    30b6:	709a      	strb	r2, [r3, #2]
	dfll_conf.run_in_standby = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
    30b8:	2368      	movs	r3, #104	; 0x68
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	2200      	movs	r2, #0
    30be:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    30c0:	2368      	movs	r3, #104	; 0x68
    30c2:	18fb      	adds	r3, r7, r3
    30c4:	2200      	movs	r2, #0
    30c6:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    30c8:	2368      	movs	r3, #104	; 0x68
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	2200      	movs	r2, #0
    30ce:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    30d0:	2368      	movs	r3, #104	; 0x68
    30d2:	18fb      	adds	r3, r7, r3
    30d4:	2200      	movs	r2, #0
    30d6:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    30d8:	2368      	movs	r3, #104	; 0x68
    30da:	18fb      	adds	r3, r7, r3
    30dc:	2200      	movs	r2, #0
    30de:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    30e0:	2368      	movs	r3, #104	; 0x68
    30e2:	18fb      	adds	r3, r7, r3
    30e4:	2206      	movs	r2, #6
    30e6:	81da      	strh	r2, [r3, #14]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    30e8:	2368      	movs	r3, #104	; 0x68
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	2207      	movs	r2, #7
    30ee:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    30f0:	2368      	movs	r3, #104	; 0x68
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	223f      	movs	r2, #63	; 0x3f
    30f6:	735a      	strb	r2, [r3, #13]

	system_clock_source_dfll_set_config(&dfll_conf);
    30f8:	2368      	movs	r3, #104	; 0x68
    30fa:	18fb      	adds	r3, r7, r3
    30fc:	0018      	movs	r0, r3
    30fe:	4b41      	ldr	r3, [pc, #260]	; (3204 <system_clock_init+0x178>)
    3100:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3102:	2007      	movs	r0, #7
    3104:	4b40      	ldr	r3, [pc, #256]	; (3208 <system_clock_init+0x17c>)
    3106:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3108:	2364      	movs	r3, #100	; 0x64
    310a:	18fb      	adds	r3, r7, r3
    310c:	0018      	movs	r0, r3
    310e:	4b3f      	ldr	r3, [pc, #252]	; (320c <system_clock_init+0x180>)
    3110:	4798      	blx	r3

	osc8m_conf.prescaler      = CONF_CLOCK_OSC8M_PRESCALER;
    3112:	2364      	movs	r3, #100	; 0x64
    3114:	18fb      	adds	r3, r7, r3
    3116:	2200      	movs	r2, #0
    3118:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand      = CONF_CLOCK_OSC8M_ON_DEMAND;
    311a:	2364      	movs	r3, #100	; 0x64
    311c:	18fb      	adds	r3, r7, r3
    311e:	2201      	movs	r2, #1
    3120:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3122:	2364      	movs	r3, #100	; 0x64
    3124:	18fb      	adds	r3, r7, r3
    3126:	2200      	movs	r2, #0
    3128:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    312a:	2364      	movs	r3, #100	; 0x64
    312c:	18fb      	adds	r3, r7, r3
    312e:	0018      	movs	r0, r3
    3130:	4b37      	ldr	r3, [pc, #220]	; (3210 <system_clock_init+0x184>)
    3132:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3134:	2006      	movs	r0, #6
    3136:	4b34      	ldr	r3, [pc, #208]	; (3208 <system_clock_init+0x17c>)
    3138:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    313a:	4b36      	ldr	r3, [pc, #216]	; (3214 <system_clock_init+0x188>)
    313c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM_MSB, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    313e:	234c      	movs	r3, #76	; 0x4c
    3140:	18fb      	adds	r3, r7, r3
    3142:	0018      	movs	r0, r3
    3144:	4b34      	ldr	r3, [pc, #208]	; (3218 <system_clock_init+0x18c>)
    3146:	4798      	blx	r3
    3148:	234c      	movs	r3, #76	; 0x4c
    314a:	18fb      	adds	r3, r7, r3
    314c:	2206      	movs	r2, #6
    314e:	701a      	strb	r2, [r3, #0]
    3150:	234c      	movs	r3, #76	; 0x4c
    3152:	18fb      	adds	r3, r7, r3
    3154:	2201      	movs	r2, #1
    3156:	605a      	str	r2, [r3, #4]
    3158:	234c      	movs	r3, #76	; 0x4c
    315a:	18fb      	adds	r3, r7, r3
    315c:	2200      	movs	r2, #0
    315e:	721a      	strb	r2, [r3, #8]
    3160:	234c      	movs	r3, #76	; 0x4c
    3162:	18fb      	adds	r3, r7, r3
    3164:	2200      	movs	r2, #0
    3166:	725a      	strb	r2, [r3, #9]
    3168:	234c      	movs	r3, #76	; 0x4c
    316a:	18fb      	adds	r3, r7, r3
    316c:	0019      	movs	r1, r3
    316e:	2001      	movs	r0, #1
    3170:	4b2a      	ldr	r3, [pc, #168]	; (321c <system_clock_init+0x190>)
    3172:	4798      	blx	r3
    3174:	2001      	movs	r0, #1
    3176:	4b2a      	ldr	r3, [pc, #168]	; (3220 <system_clock_init+0x194>)
    3178:	4798      	blx	r3
#  if (CONF_CLOCK_DFLL_ENABLE)
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    317a:	230c      	movs	r3, #12
    317c:	18fb      	adds	r3, r7, r3
    317e:	0018      	movs	r0, r3
    3180:	4b28      	ldr	r3, [pc, #160]	; (3224 <system_clock_init+0x198>)
    3182:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3184:	230c      	movs	r3, #12
    3186:	18fb      	adds	r3, r7, r3
    3188:	2201      	movs	r2, #1
    318a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    318c:	230c      	movs	r3, #12
    318e:	18fb      	adds	r3, r7, r3
    3190:	0019      	movs	r1, r3
    3192:	2000      	movs	r0, #0
    3194:	4b24      	ldr	r3, [pc, #144]	; (3228 <system_clock_init+0x19c>)
    3196:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3198:	2000      	movs	r0, #0
    319a:	4b24      	ldr	r3, [pc, #144]	; (322c <system_clock_init+0x1a0>)
    319c:	4798      	blx	r3
	}
#  endif

	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    319e:	003b      	movs	r3, r7
    31a0:	0018      	movs	r0, r3
    31a2:	4b1d      	ldr	r3, [pc, #116]	; (3218 <system_clock_init+0x18c>)
    31a4:	4798      	blx	r3
    31a6:	003b      	movs	r3, r7
    31a8:	2207      	movs	r2, #7
    31aa:	701a      	strb	r2, [r3, #0]
    31ac:	003b      	movs	r3, r7
    31ae:	2201      	movs	r2, #1
    31b0:	605a      	str	r2, [r3, #4]
    31b2:	003b      	movs	r3, r7
    31b4:	2200      	movs	r2, #0
    31b6:	721a      	strb	r2, [r3, #8]
    31b8:	003b      	movs	r3, r7
    31ba:	2200      	movs	r2, #0
    31bc:	725a      	strb	r2, [r3, #9]
    31be:	003b      	movs	r3, r7
    31c0:	0019      	movs	r1, r3
    31c2:	2000      	movs	r0, #0
    31c4:	4b15      	ldr	r3, [pc, #84]	; (321c <system_clock_init+0x190>)
    31c6:	4798      	blx	r3
    31c8:	2000      	movs	r0, #0
    31ca:	4b15      	ldr	r3, [pc, #84]	; (3220 <system_clock_init+0x194>)
    31cc:	4798      	blx	r3
#endif


	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    31ce:	2000      	movs	r0, #0
    31d0:	4b17      	ldr	r3, [pc, #92]	; (3230 <system_clock_init+0x1a4>)
    31d2:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    31d4:	2001      	movs	r0, #1
    31d6:	4b17      	ldr	r3, [pc, #92]	; (3234 <system_clock_init+0x1a8>)
    31d8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    31da:	2100      	movs	r1, #0
    31dc:	2000      	movs	r0, #0
    31de:	4b16      	ldr	r3, [pc, #88]	; (3238 <system_clock_init+0x1ac>)
    31e0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    31e2:	2100      	movs	r1, #0
    31e4:	2001      	movs	r0, #1
    31e6:	4b14      	ldr	r3, [pc, #80]	; (3238 <system_clock_init+0x1ac>)
    31e8:	4798      	blx	r3
}
    31ea:	46c0      	nop			; (mov r8, r8)
    31ec:	46bd      	mov	sp, r7
    31ee:	b01e      	add	sp, #120	; 0x78
    31f0:	bd80      	pop	{r7, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	40000800 	.word	0x40000800
    31f8:	00003610 	.word	0x00003610
    31fc:	00002db1 	.word	0x00002db1
    3200:	00002ca1 	.word	0x00002ca1
    3204:	00002f61 	.word	0x00002f61
    3208:	00002ff9 	.word	0x00002ff9
    320c:	00002c7f 	.word	0x00002c7f
    3210:	00002ee9 	.word	0x00002ee9
    3214:	000032e1 	.word	0x000032e1
    3218:	00002c35 	.word	0x00002c35
    321c:	00003311 	.word	0x00003311
    3220:	00003435 	.word	0x00003435
    3224:	00002c63 	.word	0x00002c63
    3228:	00003569 	.word	0x00003569
    322c:	000035c1 	.word	0x000035c1
    3230:	00002d3d 	.word	0x00002d3d
    3234:	00002cf9 	.word	0x00002cf9
    3238:	00002d5d 	.word	0x00002d5d

0000323c <system_gclk_is_syncing>:
{
    323c:	b580      	push	{r7, lr}
    323e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    3240:	4b05      	ldr	r3, [pc, #20]	; (3258 <system_gclk_is_syncing+0x1c>)
    3242:	785b      	ldrb	r3, [r3, #1]
    3244:	b2db      	uxtb	r3, r3
    3246:	b25b      	sxtb	r3, r3
    3248:	2b00      	cmp	r3, #0
    324a:	da01      	bge.n	3250 <system_gclk_is_syncing+0x14>
		return true;
    324c:	2301      	movs	r3, #1
    324e:	e000      	b.n	3252 <system_gclk_is_syncing+0x16>
	return false;
    3250:	2300      	movs	r3, #0
}
    3252:	0018      	movs	r0, r3
    3254:	46bd      	mov	sp, r7
    3256:	bd80      	pop	{r7, pc}
    3258:	40000c00 	.word	0x40000c00

0000325c <system_apb_clock_set_mask>:
{
    325c:	b580      	push	{r7, lr}
    325e:	b082      	sub	sp, #8
    3260:	af00      	add	r7, sp, #0
    3262:	0002      	movs	r2, r0
    3264:	6039      	str	r1, [r7, #0]
    3266:	1dfb      	adds	r3, r7, #7
    3268:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    326a:	1dfb      	adds	r3, r7, #7
    326c:	781b      	ldrb	r3, [r3, #0]
    326e:	2b01      	cmp	r3, #1
    3270:	d00a      	beq.n	3288 <system_apb_clock_set_mask+0x2c>
    3272:	2b02      	cmp	r3, #2
    3274:	d00f      	beq.n	3296 <system_apb_clock_set_mask+0x3a>
    3276:	2b00      	cmp	r3, #0
    3278:	d114      	bne.n	32a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    327a:	4b0e      	ldr	r3, [pc, #56]	; (32b4 <system_apb_clock_set_mask+0x58>)
    327c:	4a0d      	ldr	r2, [pc, #52]	; (32b4 <system_apb_clock_set_mask+0x58>)
    327e:	6991      	ldr	r1, [r2, #24]
    3280:	683a      	ldr	r2, [r7, #0]
    3282:	430a      	orrs	r2, r1
    3284:	619a      	str	r2, [r3, #24]
			break;
    3286:	e00f      	b.n	32a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3288:	4b0a      	ldr	r3, [pc, #40]	; (32b4 <system_apb_clock_set_mask+0x58>)
    328a:	4a0a      	ldr	r2, [pc, #40]	; (32b4 <system_apb_clock_set_mask+0x58>)
    328c:	69d1      	ldr	r1, [r2, #28]
    328e:	683a      	ldr	r2, [r7, #0]
    3290:	430a      	orrs	r2, r1
    3292:	61da      	str	r2, [r3, #28]
			break;
    3294:	e008      	b.n	32a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3296:	4b07      	ldr	r3, [pc, #28]	; (32b4 <system_apb_clock_set_mask+0x58>)
    3298:	4a06      	ldr	r2, [pc, #24]	; (32b4 <system_apb_clock_set_mask+0x58>)
    329a:	6a11      	ldr	r1, [r2, #32]
    329c:	683a      	ldr	r2, [r7, #0]
    329e:	430a      	orrs	r2, r1
    32a0:	621a      	str	r2, [r3, #32]
			break;
    32a2:	e001      	b.n	32a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    32a4:	2317      	movs	r3, #23
    32a6:	e000      	b.n	32aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    32a8:	2300      	movs	r3, #0
}
    32aa:	0018      	movs	r0, r3
    32ac:	46bd      	mov	sp, r7
    32ae:	b002      	add	sp, #8
    32b0:	bd80      	pop	{r7, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	40000400 	.word	0x40000400

000032b8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    32b8:	b580      	push	{r7, lr}
    32ba:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    32bc:	4b02      	ldr	r3, [pc, #8]	; (32c8 <system_interrupt_enter_critical_section+0x10>)
    32be:	4798      	blx	r3
}
    32c0:	46c0      	nop			; (mov r8, r8)
    32c2:	46bd      	mov	sp, r7
    32c4:	bd80      	pop	{r7, pc}
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	000029e5 	.word	0x000029e5

000032cc <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    32d0:	4b02      	ldr	r3, [pc, #8]	; (32dc <system_interrupt_leave_critical_section+0x10>)
    32d2:	4798      	blx	r3
}
    32d4:	46c0      	nop			; (mov r8, r8)
    32d6:	46bd      	mov	sp, r7
    32d8:	bd80      	pop	{r7, pc}
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	00002a39 	.word	0x00002a39

000032e0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    32e4:	2108      	movs	r1, #8
    32e6:	2000      	movs	r0, #0
    32e8:	4b07      	ldr	r3, [pc, #28]	; (3308 <system_gclk_init+0x28>)
    32ea:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    32ec:	4b07      	ldr	r3, [pc, #28]	; (330c <system_gclk_init+0x2c>)
    32ee:	2201      	movs	r2, #1
    32f0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	4b05      	ldr	r3, [pc, #20]	; (330c <system_gclk_init+0x2c>)
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	b2db      	uxtb	r3, r3
    32fa:	001a      	movs	r2, r3
    32fc:	2301      	movs	r3, #1
    32fe:	4013      	ands	r3, r2
    3300:	d1f8      	bne.n	32f4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	46bd      	mov	sp, r7
    3306:	bd80      	pop	{r7, pc}
    3308:	0000325d 	.word	0x0000325d
    330c:	40000c00 	.word	0x40000c00

00003310 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3310:	b580      	push	{r7, lr}
    3312:	b086      	sub	sp, #24
    3314:	af00      	add	r7, sp, #0
    3316:	0002      	movs	r2, r0
    3318:	6039      	str	r1, [r7, #0]
    331a:	1dfb      	adds	r3, r7, #7
    331c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    331e:	1dfb      	adds	r3, r7, #7
    3320:	781b      	ldrb	r3, [r3, #0]
    3322:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3324:	1dfb      	adds	r3, r7, #7
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    332a:	683b      	ldr	r3, [r7, #0]
    332c:	781b      	ldrb	r3, [r3, #0]
    332e:	021b      	lsls	r3, r3, #8
    3330:	001a      	movs	r2, r3
    3332:	697b      	ldr	r3, [r7, #20]
    3334:	4313      	orrs	r3, r2
    3336:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3338:	683b      	ldr	r3, [r7, #0]
    333a:	785b      	ldrb	r3, [r3, #1]
    333c:	2b00      	cmp	r3, #0
    333e:	d004      	beq.n	334a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3340:	697b      	ldr	r3, [r7, #20]
    3342:	2280      	movs	r2, #128	; 0x80
    3344:	02d2      	lsls	r2, r2, #11
    3346:	4313      	orrs	r3, r2
    3348:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    334a:	683b      	ldr	r3, [r7, #0]
    334c:	7a5b      	ldrb	r3, [r3, #9]
    334e:	2b00      	cmp	r3, #0
    3350:	d004      	beq.n	335c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3352:	697b      	ldr	r3, [r7, #20]
    3354:	2280      	movs	r2, #128	; 0x80
    3356:	0312      	lsls	r2, r2, #12
    3358:	4313      	orrs	r3, r2
    335a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    335c:	683b      	ldr	r3, [r7, #0]
    335e:	685b      	ldr	r3, [r3, #4]
    3360:	2b01      	cmp	r3, #1
    3362:	d92c      	bls.n	33be <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3364:	683b      	ldr	r3, [r7, #0]
    3366:	685a      	ldr	r2, [r3, #4]
    3368:	683b      	ldr	r3, [r7, #0]
    336a:	685b      	ldr	r3, [r3, #4]
    336c:	3b01      	subs	r3, #1
    336e:	4013      	ands	r3, r2
    3370:	d11a      	bne.n	33a8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3372:	2300      	movs	r3, #0
    3374:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3376:	2302      	movs	r3, #2
    3378:	60bb      	str	r3, [r7, #8]
    337a:	e005      	b.n	3388 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    337c:	68fb      	ldr	r3, [r7, #12]
    337e:	3301      	adds	r3, #1
    3380:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    3382:	68bb      	ldr	r3, [r7, #8]
    3384:	005b      	lsls	r3, r3, #1
    3386:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	685a      	ldr	r2, [r3, #4]
    338c:	68bb      	ldr	r3, [r7, #8]
    338e:	429a      	cmp	r2, r3
    3390:	d8f4      	bhi.n	337c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3392:	68fb      	ldr	r3, [r7, #12]
    3394:	021b      	lsls	r3, r3, #8
    3396:	693a      	ldr	r2, [r7, #16]
    3398:	4313      	orrs	r3, r2
    339a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    339c:	697b      	ldr	r3, [r7, #20]
    339e:	2280      	movs	r2, #128	; 0x80
    33a0:	0352      	lsls	r2, r2, #13
    33a2:	4313      	orrs	r3, r2
    33a4:	617b      	str	r3, [r7, #20]
    33a6:	e00a      	b.n	33be <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    33a8:	683b      	ldr	r3, [r7, #0]
    33aa:	685b      	ldr	r3, [r3, #4]
    33ac:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    33ae:	693a      	ldr	r2, [r7, #16]
    33b0:	4313      	orrs	r3, r2
    33b2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    33b4:	697b      	ldr	r3, [r7, #20]
    33b6:	2280      	movs	r2, #128	; 0x80
    33b8:	0292      	lsls	r2, r2, #10
    33ba:	4313      	orrs	r3, r2
    33bc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    33be:	683b      	ldr	r3, [r7, #0]
    33c0:	7a1b      	ldrb	r3, [r3, #8]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d004      	beq.n	33d0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    33c6:	697b      	ldr	r3, [r7, #20]
    33c8:	2280      	movs	r2, #128	; 0x80
    33ca:	0392      	lsls	r2, r2, #14
    33cc:	4313      	orrs	r3, r2
    33ce:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    33d0:	46c0      	nop			; (mov r8, r8)
    33d2:	4b13      	ldr	r3, [pc, #76]	; (3420 <system_gclk_gen_set_config+0x110>)
    33d4:	4798      	blx	r3
    33d6:	1e03      	subs	r3, r0, #0
    33d8:	d1fb      	bne.n	33d2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    33da:	4b12      	ldr	r3, [pc, #72]	; (3424 <system_gclk_gen_set_config+0x114>)
    33dc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    33de:	4a12      	ldr	r2, [pc, #72]	; (3428 <system_gclk_gen_set_config+0x118>)
    33e0:	1dfb      	adds	r3, r7, #7
    33e2:	781b      	ldrb	r3, [r3, #0]
    33e4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	4b0d      	ldr	r3, [pc, #52]	; (3420 <system_gclk_gen_set_config+0x110>)
    33ea:	4798      	blx	r3
    33ec:	1e03      	subs	r3, r0, #0
    33ee:	d1fb      	bne.n	33e8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    33f0:	4b0e      	ldr	r3, [pc, #56]	; (342c <system_gclk_gen_set_config+0x11c>)
    33f2:	693a      	ldr	r2, [r7, #16]
    33f4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	4b09      	ldr	r3, [pc, #36]	; (3420 <system_gclk_gen_set_config+0x110>)
    33fa:	4798      	blx	r3
    33fc:	1e03      	subs	r3, r0, #0
    33fe:	d1fb      	bne.n	33f8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3400:	4b0a      	ldr	r3, [pc, #40]	; (342c <system_gclk_gen_set_config+0x11c>)
    3402:	4a0a      	ldr	r2, [pc, #40]	; (342c <system_gclk_gen_set_config+0x11c>)
    3404:	6851      	ldr	r1, [r2, #4]
    3406:	2280      	movs	r2, #128	; 0x80
    3408:	0252      	lsls	r2, r2, #9
    340a:	4011      	ands	r1, r2
    340c:	697a      	ldr	r2, [r7, #20]
    340e:	430a      	orrs	r2, r1
    3410:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3412:	4b07      	ldr	r3, [pc, #28]	; (3430 <system_gclk_gen_set_config+0x120>)
    3414:	4798      	blx	r3
}
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	46bd      	mov	sp, r7
    341a:	b006      	add	sp, #24
    341c:	bd80      	pop	{r7, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	0000323d 	.word	0x0000323d
    3424:	000032b9 	.word	0x000032b9
    3428:	40000c08 	.word	0x40000c08
    342c:	40000c00 	.word	0x40000c00
    3430:	000032cd 	.word	0x000032cd

00003434 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3434:	b580      	push	{r7, lr}
    3436:	b082      	sub	sp, #8
    3438:	af00      	add	r7, sp, #0
    343a:	0002      	movs	r2, r0
    343c:	1dfb      	adds	r3, r7, #7
    343e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3440:	46c0      	nop			; (mov r8, r8)
    3442:	4b0e      	ldr	r3, [pc, #56]	; (347c <system_gclk_gen_enable+0x48>)
    3444:	4798      	blx	r3
    3446:	1e03      	subs	r3, r0, #0
    3448:	d1fb      	bne.n	3442 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    344a:	4b0d      	ldr	r3, [pc, #52]	; (3480 <system_gclk_gen_enable+0x4c>)
    344c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    344e:	4a0d      	ldr	r2, [pc, #52]	; (3484 <system_gclk_gen_enable+0x50>)
    3450:	1dfb      	adds	r3, r7, #7
    3452:	781b      	ldrb	r3, [r3, #0]
    3454:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	4b08      	ldr	r3, [pc, #32]	; (347c <system_gclk_gen_enable+0x48>)
    345a:	4798      	blx	r3
    345c:	1e03      	subs	r3, r0, #0
    345e:	d1fb      	bne.n	3458 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3460:	4b09      	ldr	r3, [pc, #36]	; (3488 <system_gclk_gen_enable+0x54>)
    3462:	4a09      	ldr	r2, [pc, #36]	; (3488 <system_gclk_gen_enable+0x54>)
    3464:	6852      	ldr	r2, [r2, #4]
    3466:	2180      	movs	r1, #128	; 0x80
    3468:	0249      	lsls	r1, r1, #9
    346a:	430a      	orrs	r2, r1
    346c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    346e:	4b07      	ldr	r3, [pc, #28]	; (348c <system_gclk_gen_enable+0x58>)
    3470:	4798      	blx	r3
}
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	46bd      	mov	sp, r7
    3476:	b002      	add	sp, #8
    3478:	bd80      	pop	{r7, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	0000323d 	.word	0x0000323d
    3480:	000032b9 	.word	0x000032b9
    3484:	40000c04 	.word	0x40000c04
    3488:	40000c00 	.word	0x40000c00
    348c:	000032cd 	.word	0x000032cd

00003490 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3490:	b580      	push	{r7, lr}
    3492:	b086      	sub	sp, #24
    3494:	af00      	add	r7, sp, #0
    3496:	0002      	movs	r2, r0
    3498:	1dfb      	adds	r3, r7, #7
    349a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    349c:	46c0      	nop			; (mov r8, r8)
    349e:	4b2a      	ldr	r3, [pc, #168]	; (3548 <system_gclk_gen_get_hz+0xb8>)
    34a0:	4798      	blx	r3
    34a2:	1e03      	subs	r3, r0, #0
    34a4:	d1fb      	bne.n	349e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    34a6:	4b29      	ldr	r3, [pc, #164]	; (354c <system_gclk_gen_get_hz+0xbc>)
    34a8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34aa:	4a29      	ldr	r2, [pc, #164]	; (3550 <system_gclk_gen_get_hz+0xc0>)
    34ac:	1dfb      	adds	r3, r7, #7
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	4b24      	ldr	r3, [pc, #144]	; (3548 <system_gclk_gen_get_hz+0xb8>)
    34b6:	4798      	blx	r3
    34b8:	1e03      	subs	r3, r0, #0
    34ba:	d1fb      	bne.n	34b4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    34bc:	4b25      	ldr	r3, [pc, #148]	; (3554 <system_gclk_gen_get_hz+0xc4>)
    34be:	685b      	ldr	r3, [r3, #4]
    34c0:	04db      	lsls	r3, r3, #19
    34c2:	0edb      	lsrs	r3, r3, #27
    34c4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    34c6:	0018      	movs	r0, r3
    34c8:	4b23      	ldr	r3, [pc, #140]	; (3558 <system_gclk_gen_get_hz+0xc8>)
    34ca:	4798      	blx	r3
    34cc:	0003      	movs	r3, r0
    34ce:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34d0:	4a1f      	ldr	r2, [pc, #124]	; (3550 <system_gclk_gen_get_hz+0xc0>)
    34d2:	1dfb      	adds	r3, r7, #7
    34d4:	781b      	ldrb	r3, [r3, #0]
    34d6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    34d8:	4b1e      	ldr	r3, [pc, #120]	; (3554 <system_gclk_gen_get_hz+0xc4>)
    34da:	685b      	ldr	r3, [r3, #4]
    34dc:	02db      	lsls	r3, r3, #11
    34de:	0fdb      	lsrs	r3, r3, #31
    34e0:	b2da      	uxtb	r2, r3
    34e2:	2313      	movs	r3, #19
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    34e8:	4a1c      	ldr	r2, [pc, #112]	; (355c <system_gclk_gen_get_hz+0xcc>)
    34ea:	1dfb      	adds	r3, r7, #7
    34ec:	781b      	ldrb	r3, [r3, #0]
    34ee:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    34f0:	46c0      	nop			; (mov r8, r8)
    34f2:	4b15      	ldr	r3, [pc, #84]	; (3548 <system_gclk_gen_get_hz+0xb8>)
    34f4:	4798      	blx	r3
    34f6:	1e03      	subs	r3, r0, #0
    34f8:	d1fb      	bne.n	34f2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    34fa:	4b16      	ldr	r3, [pc, #88]	; (3554 <system_gclk_gen_get_hz+0xc4>)
    34fc:	689b      	ldr	r3, [r3, #8]
    34fe:	021b      	lsls	r3, r3, #8
    3500:	0c1b      	lsrs	r3, r3, #16
    3502:	b29b      	uxth	r3, r3
    3504:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3506:	4b16      	ldr	r3, [pc, #88]	; (3560 <system_gclk_gen_get_hz+0xd0>)
    3508:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    350a:	2313      	movs	r3, #19
    350c:	18fb      	adds	r3, r7, r3
    350e:	781b      	ldrb	r3, [r3, #0]
    3510:	2b00      	cmp	r3, #0
    3512:	d109      	bne.n	3528 <system_gclk_gen_get_hz+0x98>
    3514:	68fb      	ldr	r3, [r7, #12]
    3516:	2b01      	cmp	r3, #1
    3518:	d906      	bls.n	3528 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    351a:	4b12      	ldr	r3, [pc, #72]	; (3564 <system_gclk_gen_get_hz+0xd4>)
    351c:	68f9      	ldr	r1, [r7, #12]
    351e:	6978      	ldr	r0, [r7, #20]
    3520:	4798      	blx	r3
    3522:	0003      	movs	r3, r0
    3524:	617b      	str	r3, [r7, #20]
    3526:	e00a      	b.n	353e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    3528:	2313      	movs	r3, #19
    352a:	18fb      	adds	r3, r7, r3
    352c:	781b      	ldrb	r3, [r3, #0]
    352e:	2b00      	cmp	r3, #0
    3530:	d005      	beq.n	353e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    3532:	68fb      	ldr	r3, [r7, #12]
    3534:	3301      	adds	r3, #1
    3536:	697a      	ldr	r2, [r7, #20]
    3538:	40da      	lsrs	r2, r3
    353a:	0013      	movs	r3, r2
    353c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    353e:	697b      	ldr	r3, [r7, #20]
}
    3540:	0018      	movs	r0, r3
    3542:	46bd      	mov	sp, r7
    3544:	b006      	add	sp, #24
    3546:	bd80      	pop	{r7, pc}
    3548:	0000323d 	.word	0x0000323d
    354c:	000032b9 	.word	0x000032b9
    3550:	40000c04 	.word	0x40000c04
    3554:	40000c00 	.word	0x40000c00
    3558:	00002e45 	.word	0x00002e45
    355c:	40000c08 	.word	0x40000c08
    3560:	000032cd 	.word	0x000032cd
    3564:	000038f1 	.word	0x000038f1

00003568 <system_gclk_chan_set_config>:
 * \param[in] config    Configuration settings for the clock
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3568:	b580      	push	{r7, lr}
    356a:	b084      	sub	sp, #16
    356c:	af00      	add	r7, sp, #0
    356e:	0002      	movs	r2, r0
    3570:	6039      	str	r1, [r7, #0]
    3572:	1dfb      	adds	r3, r7, #7
    3574:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3576:	1dfb      	adds	r3, r7, #7
    3578:	781b      	ldrb	r3, [r3, #0]
    357a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    357c:	683b      	ldr	r3, [r7, #0]
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	021b      	lsls	r3, r3, #8
    3582:	001a      	movs	r2, r3
    3584:	68fb      	ldr	r3, [r7, #12]
    3586:	4313      	orrs	r3, r2
    3588:	60fb      	str	r3, [r7, #12]

	/* Enable write lock if requested to prevent further modification */
	if (config->write_lock) {
    358a:	683b      	ldr	r3, [r7, #0]
    358c:	785b      	ldrb	r3, [r3, #1]
    358e:	2b00      	cmp	r3, #0
    3590:	d004      	beq.n	359c <system_gclk_chan_set_config+0x34>
		new_clkctrl_config |= GCLK_CLKCTRL_WRTLOCK;
    3592:	68fb      	ldr	r3, [r7, #12]
    3594:	2280      	movs	r2, #128	; 0x80
    3596:	0212      	lsls	r2, r2, #8
    3598:	4313      	orrs	r3, r2
    359a:	60fb      	str	r3, [r7, #12]
	}

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    359c:	1dfb      	adds	r3, r7, #7
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	0018      	movs	r0, r3
    35a2:	4b05      	ldr	r3, [pc, #20]	; (35b8 <system_gclk_chan_set_config+0x50>)
    35a4:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    35a6:	4b05      	ldr	r3, [pc, #20]	; (35bc <system_gclk_chan_set_config+0x54>)
    35a8:	68fa      	ldr	r2, [r7, #12]
    35aa:	b292      	uxth	r2, r2
    35ac:	805a      	strh	r2, [r3, #2]
}
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	46bd      	mov	sp, r7
    35b2:	b004      	add	sp, #16
    35b4:	bd80      	pop	{r7, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	00003609 	.word	0x00003609
    35bc:	40000c00 	.word	0x40000c00

000035c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    35c0:	b580      	push	{r7, lr}
    35c2:	b082      	sub	sp, #8
    35c4:	af00      	add	r7, sp, #0
    35c6:	0002      	movs	r2, r0
    35c8:	1dfb      	adds	r3, r7, #7
    35ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    35cc:	4b0a      	ldr	r3, [pc, #40]	; (35f8 <system_gclk_chan_enable+0x38>)
    35ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    35d0:	4a0a      	ldr	r2, [pc, #40]	; (35fc <system_gclk_chan_enable+0x3c>)
    35d2:	1dfb      	adds	r3, r7, #7
    35d4:	781b      	ldrb	r3, [r3, #0]
    35d6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    35d8:	4909      	ldr	r1, [pc, #36]	; (3600 <system_gclk_chan_enable+0x40>)
    35da:	4b09      	ldr	r3, [pc, #36]	; (3600 <system_gclk_chan_enable+0x40>)
    35dc:	885b      	ldrh	r3, [r3, #2]
    35de:	b29b      	uxth	r3, r3
    35e0:	2280      	movs	r2, #128	; 0x80
    35e2:	01d2      	lsls	r2, r2, #7
    35e4:	4313      	orrs	r3, r2
    35e6:	b29b      	uxth	r3, r3
    35e8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    35ea:	4b06      	ldr	r3, [pc, #24]	; (3604 <system_gclk_chan_enable+0x44>)
    35ec:	4798      	blx	r3
}
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	46bd      	mov	sp, r7
    35f2:	b002      	add	sp, #8
    35f4:	bd80      	pop	{r7, pc}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	000032b9 	.word	0x000032b9
    35fc:	40000c02 	.word	0x40000c02
    3600:	40000c00 	.word	0x40000c00
    3604:	000032cd 	.word	0x000032cd

00003608 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3608:	b580      	push	{r7, lr}
    360a:	b082      	sub	sp, #8
    360c:	af00      	add	r7, sp, #0
    360e:	0002      	movs	r2, r0
    3610:	1dfb      	adds	r3, r7, #7
    3612:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3614:	4b0e      	ldr	r3, [pc, #56]	; (3650 <system_gclk_chan_disable+0x48>)
    3616:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3618:	4a0e      	ldr	r2, [pc, #56]	; (3654 <system_gclk_chan_disable+0x4c>)
    361a:	1dfb      	adds	r3, r7, #7
    361c:	781b      	ldrb	r3, [r3, #0]
    361e:	7013      	strb	r3, [r2, #0]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3620:	4a0d      	ldr	r2, [pc, #52]	; (3658 <system_gclk_chan_disable+0x50>)
    3622:	4b0d      	ldr	r3, [pc, #52]	; (3658 <system_gclk_chan_disable+0x50>)
    3624:	885b      	ldrh	r3, [r3, #2]
    3626:	b29b      	uxth	r3, r3
    3628:	490c      	ldr	r1, [pc, #48]	; (365c <system_gclk_chan_disable+0x54>)
    362a:	400b      	ands	r3, r1
    362c:	b29b      	uxth	r3, r3
    362e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3630:	46c0      	nop			; (mov r8, r8)
    3632:	4b09      	ldr	r3, [pc, #36]	; (3658 <system_gclk_chan_disable+0x50>)
    3634:	885b      	ldrh	r3, [r3, #2]
    3636:	b29b      	uxth	r3, r3
    3638:	001a      	movs	r2, r3
    363a:	2380      	movs	r3, #128	; 0x80
    363c:	01db      	lsls	r3, r3, #7
    363e:	4013      	ands	r3, r2
    3640:	d1f7      	bne.n	3632 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	system_interrupt_leave_critical_section();
    3642:	4b07      	ldr	r3, [pc, #28]	; (3660 <system_gclk_chan_disable+0x58>)
    3644:	4798      	blx	r3
}
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	46bd      	mov	sp, r7
    364a:	b002      	add	sp, #8
    364c:	bd80      	pop	{r7, pc}
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	000032b9 	.word	0x000032b9
    3654:	40000c02 	.word	0x40000c02
    3658:	40000c00 	.word	0x40000c00
    365c:	ffffbfff 	.word	0xffffbfff
    3660:	000032cd 	.word	0x000032cd

00003664 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3664:	b580      	push	{r7, lr}
    3666:	b084      	sub	sp, #16
    3668:	af00      	add	r7, sp, #0
    366a:	0002      	movs	r2, r0
    366c:	1dfb      	adds	r3, r7, #7
    366e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3670:	4b0d      	ldr	r3, [pc, #52]	; (36a8 <system_gclk_chan_get_hz+0x44>)
    3672:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3674:	4a0d      	ldr	r2, [pc, #52]	; (36ac <system_gclk_chan_get_hz+0x48>)
    3676:	1dfb      	adds	r3, r7, #7
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    367c:	4b0c      	ldr	r3, [pc, #48]	; (36b0 <system_gclk_chan_get_hz+0x4c>)
    367e:	885b      	ldrh	r3, [r3, #2]
    3680:	051b      	lsls	r3, r3, #20
    3682:	0f1b      	lsrs	r3, r3, #28
    3684:	b2da      	uxtb	r2, r3
    3686:	230f      	movs	r3, #15
    3688:	18fb      	adds	r3, r7, r3
    368a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    368c:	4b09      	ldr	r3, [pc, #36]	; (36b4 <system_gclk_chan_get_hz+0x50>)
    368e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3690:	230f      	movs	r3, #15
    3692:	18fb      	adds	r3, r7, r3
    3694:	781b      	ldrb	r3, [r3, #0]
    3696:	0018      	movs	r0, r3
    3698:	4b07      	ldr	r3, [pc, #28]	; (36b8 <system_gclk_chan_get_hz+0x54>)
    369a:	4798      	blx	r3
    369c:	0003      	movs	r3, r0
}
    369e:	0018      	movs	r0, r3
    36a0:	46bd      	mov	sp, r7
    36a2:	b004      	add	sp, #16
    36a4:	bd80      	pop	{r7, pc}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	000032b9 	.word	0x000032b9
    36ac:	40000c02 	.word	0x40000c02
    36b0:	40000c00 	.word	0x40000c00
    36b4:	000032cd 	.word	0x000032cd
    36b8:	00003491 	.word	0x00003491

000036bc <system_pinmux_get_group_from_gpio_pin>:
{
    36bc:	b580      	push	{r7, lr}
    36be:	b084      	sub	sp, #16
    36c0:	af00      	add	r7, sp, #0
    36c2:	0002      	movs	r2, r0
    36c4:	1dfb      	adds	r3, r7, #7
    36c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    36c8:	230f      	movs	r3, #15
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	1dfa      	adds	r2, r7, #7
    36ce:	7812      	ldrb	r2, [r2, #0]
    36d0:	09d2      	lsrs	r2, r2, #7
    36d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    36d4:	230e      	movs	r3, #14
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	1dfa      	adds	r2, r7, #7
    36da:	7812      	ldrb	r2, [r2, #0]
    36dc:	0952      	lsrs	r2, r2, #5
    36de:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    36e0:	4b0d      	ldr	r3, [pc, #52]	; (3718 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    36e2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    36e4:	230f      	movs	r3, #15
    36e6:	18fb      	adds	r3, r7, r3
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d10f      	bne.n	370e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    36ee:	230f      	movs	r3, #15
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	781b      	ldrb	r3, [r3, #0]
    36f4:	009b      	lsls	r3, r3, #2
    36f6:	2210      	movs	r2, #16
    36f8:	4694      	mov	ip, r2
    36fa:	44bc      	add	ip, r7
    36fc:	4463      	add	r3, ip
    36fe:	3b08      	subs	r3, #8
    3700:	681a      	ldr	r2, [r3, #0]
    3702:	230e      	movs	r3, #14
    3704:	18fb      	adds	r3, r7, r3
    3706:	781b      	ldrb	r3, [r3, #0]
    3708:	01db      	lsls	r3, r3, #7
    370a:	18d3      	adds	r3, r2, r3
    370c:	e000      	b.n	3710 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    370e:	2300      	movs	r3, #0
}
    3710:	0018      	movs	r0, r3
    3712:	46bd      	mov	sp, r7
    3714:	b004      	add	sp, #16
    3716:	bd80      	pop	{r7, pc}
    3718:	41004400 	.word	0x41004400

0000371c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    371c:	b580      	push	{r7, lr}
    371e:	b088      	sub	sp, #32
    3720:	af00      	add	r7, sp, #0
    3722:	60f8      	str	r0, [r7, #12]
    3724:	60b9      	str	r1, [r7, #8]
    3726:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3728:	2300      	movs	r3, #0
    372a:	61fb      	str	r3, [r7, #28]

	/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
	 * be written later) and store the new mux mask */
	if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	2b80      	cmp	r3, #128	; 0x80
    3732:	d00b      	beq.n	374c <_system_pinmux_config+0x30>
		pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3734:	69fb      	ldr	r3, [r7, #28]
    3736:	2280      	movs	r2, #128	; 0x80
    3738:	0252      	lsls	r2, r2, #9
    373a:	4313      	orrs	r3, r2
    373c:	61fb      	str	r3, [r7, #28]
		pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	061b      	lsls	r3, r3, #24
    3744:	001a      	movs	r2, r3
    3746:	69fb      	ldr	r3, [r7, #28]
    3748:	4313      	orrs	r3, r2
    374a:	61fb      	str	r3, [r7, #28]
	}

	/* Check if the user has requested that the input buffer be enabled */
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	785b      	ldrb	r3, [r3, #1]
    3750:	2b00      	cmp	r3, #0
    3752:	d003      	beq.n	375c <_system_pinmux_config+0x40>
			(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	785b      	ldrb	r3, [r3, #1]
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3758:	2b02      	cmp	r3, #2
    375a:	d110      	bne.n	377e <_system_pinmux_config+0x62>
		/* Enable input buffer flag */
		pin_cfg |= PORT_WRCONFIG_INEN;
    375c:	69fb      	ldr	r3, [r7, #28]
    375e:	2280      	movs	r2, #128	; 0x80
    3760:	0292      	lsls	r2, r2, #10
    3762:	4313      	orrs	r3, r2
    3764:	61fb      	str	r3, [r7, #28]

		/* Enable pull-up/pull-down control flag if requested */
		if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	789b      	ldrb	r3, [r3, #2]
    376a:	2b00      	cmp	r3, #0
    376c:	d004      	beq.n	3778 <_system_pinmux_config+0x5c>
			pin_cfg |= PORT_WRCONFIG_PULLEN;
    376e:	69fb      	ldr	r3, [r7, #28]
    3770:	2280      	movs	r2, #128	; 0x80
    3772:	02d2      	lsls	r2, r2, #11
    3774:	4313      	orrs	r3, r2
    3776:	61fb      	str	r3, [r7, #28]
		}

		/* Clear the port DIR bits to disable the output buffer */
		port->DIRCLR.reg = pin_mask;
    3778:	68fb      	ldr	r3, [r7, #12]
    377a:	68ba      	ldr	r2, [r7, #8]
    377c:	605a      	str	r2, [r3, #4]
	}

	/* Check if the user has requested that the output buffer be enabled */
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	785b      	ldrb	r3, [r3, #1]
    3782:	2b01      	cmp	r3, #1
    3784:	d003      	beq.n	378e <_system_pinmux_config+0x72>
			(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	785b      	ldrb	r3, [r3, #1]
	if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    378a:	2b02      	cmp	r3, #2
    378c:	d106      	bne.n	379c <_system_pinmux_config+0x80>
		/* Cannot use a pullup if the output driver is enabled,
		 * if requested the input buffer can only sample the current
		 * output state */
		pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    378e:	69fb      	ldr	r3, [r7, #28]
    3790:	4a18      	ldr	r2, [pc, #96]	; (37f4 <_system_pinmux_config+0xd8>)
    3792:	4013      	ands	r3, r2
    3794:	61fb      	str	r3, [r7, #28]

		/* Set the port DIR bits to enable the output buffer */
		port->DIRSET.reg = pin_mask;
    3796:	68fb      	ldr	r3, [r7, #12]
    3798:	68ba      	ldr	r2, [r7, #8]
    379a:	609a      	str	r2, [r3, #8]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    379c:	68bb      	ldr	r3, [r7, #8]
    379e:	041b      	lsls	r3, r3, #16
    37a0:	0c1b      	lsrs	r3, r3, #16
    37a2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    37a4:	68bb      	ldr	r3, [r7, #8]
    37a6:	0c1b      	lsrs	r3, r3, #16
    37a8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    37aa:	69ba      	ldr	r2, [r7, #24]
    37ac:	69fb      	ldr	r3, [r7, #28]
    37ae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    37b0:	22a0      	movs	r2, #160	; 0xa0
    37b2:	05d2      	lsls	r2, r2, #23
    37b4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    37ba:	697a      	ldr	r2, [r7, #20]
    37bc:	69fb      	ldr	r3, [r7, #28]
    37be:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    37c0:	22d0      	movs	r2, #208	; 0xd0
    37c2:	0612      	lsls	r2, r2, #24
    37c4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    37c6:	68fb      	ldr	r3, [r7, #12]
    37c8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	/* Set the pull-up state once the port pins are configured if one was
	 * requested and it does not violate the valid set of port
	 * configurations */
	if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    37ca:	69fa      	ldr	r2, [r7, #28]
    37cc:	2380      	movs	r3, #128	; 0x80
    37ce:	02db      	lsls	r3, r3, #11
    37d0:	4013      	ands	r3, r2
    37d2:	d00a      	beq.n	37ea <_system_pinmux_config+0xce>
		/* Set the OUT register bits to enable the pullup if requested,
		 * clear to enable pull-down */
		if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	789b      	ldrb	r3, [r3, #2]
    37d8:	2b01      	cmp	r3, #1
    37da:	d103      	bne.n	37e4 <_system_pinmux_config+0xc8>
			port->OUTSET.reg = pin_mask;
    37dc:	68fb      	ldr	r3, [r7, #12]
    37de:	68ba      	ldr	r2, [r7, #8]
    37e0:	619a      	str	r2, [r3, #24]
		} else {
			port->OUTCLR.reg = pin_mask;
		}
	}
}
    37e2:	e002      	b.n	37ea <_system_pinmux_config+0xce>
			port->OUTCLR.reg = pin_mask;
    37e4:	68fb      	ldr	r3, [r7, #12]
    37e6:	68ba      	ldr	r2, [r7, #8]
    37e8:	615a      	str	r2, [r3, #20]
}
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	46bd      	mov	sp, r7
    37ee:	b008      	add	sp, #32
    37f0:	bd80      	pop	{r7, pc}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	fffbffff 	.word	0xfffbffff

000037f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    37f8:	b580      	push	{r7, lr}
    37fa:	b084      	sub	sp, #16
    37fc:	af00      	add	r7, sp, #0
    37fe:	0002      	movs	r2, r0
    3800:	6039      	str	r1, [r7, #0]
    3802:	1dfb      	adds	r3, r7, #7
    3804:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3806:	1dfb      	adds	r3, r7, #7
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	0018      	movs	r0, r3
    380c:	4b0a      	ldr	r3, [pc, #40]	; (3838 <system_pinmux_pin_set_config+0x40>)
    380e:	4798      	blx	r3
    3810:	0003      	movs	r3, r0
    3812:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3814:	1dfb      	adds	r3, r7, #7
    3816:	781b      	ldrb	r3, [r3, #0]
    3818:	221f      	movs	r2, #31
    381a:	4013      	ands	r3, r2
    381c:	2201      	movs	r2, #1
    381e:	409a      	lsls	r2, r3
    3820:	0013      	movs	r3, r2
    3822:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3824:	683a      	ldr	r2, [r7, #0]
    3826:	68b9      	ldr	r1, [r7, #8]
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	0018      	movs	r0, r3
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <system_pinmux_pin_set_config+0x44>)
    382e:	4798      	blx	r3
}
    3830:	46c0      	nop			; (mov r8, r8)
    3832:	46bd      	mov	sp, r7
    3834:	b004      	add	sp, #16
    3836:	bd80      	pop	{r7, pc}
    3838:	000036bd 	.word	0x000036bd
    383c:	0000371d 	.word	0x0000371d

00003840 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
    3840:	b580      	push	{r7, lr}
    3842:	af00      	add	r7, sp, #0
	while (1) {
		/* Infinite loop if CPU exception is detected */
		Assert(false);
    3844:	e7fe      	b.n	3844 <HardFault_Handler+0x4>
	...

00003848 <system_init>:
 * Currently the following initialization functions are supported:
 *  - System clock initialization (via the SYSTEM CLOCK sub-module)
 *  - Board hardware initialization (via the Board module)
 */
void system_init(void)
{
    3848:	b580      	push	{r7, lr}
    384a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    384c:	4b03      	ldr	r3, [pc, #12]	; (385c <system_init+0x14>)
    384e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3850:	4b03      	ldr	r3, [pc, #12]	; (3860 <system_init+0x18>)
    3852:	4798      	blx	r3
}
    3854:	46c0      	nop			; (mov r8, r8)
    3856:	46bd      	mov	sp, r7
    3858:	bd80      	pop	{r7, pc}
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	0000308d 	.word	0x0000308d
    3860:	00002b6d 	.word	0x00002b6d

00003864 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3864:	b580      	push	{r7, lr}
    3866:	b082      	sub	sp, #8
    3868:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    386a:	4b16      	ldr	r3, [pc, #88]	; (38c4 <Reset_Handler+0x60>)
    386c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    386e:	4b16      	ldr	r3, [pc, #88]	; (38c8 <Reset_Handler+0x64>)
    3870:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3872:	687a      	ldr	r2, [r7, #4]
    3874:	683b      	ldr	r3, [r7, #0]
    3876:	429a      	cmp	r2, r3
    3878:	d00c      	beq.n	3894 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    387a:	e007      	b.n	388c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    387c:	683b      	ldr	r3, [r7, #0]
    387e:	1d1a      	adds	r2, r3, #4
    3880:	603a      	str	r2, [r7, #0]
    3882:	687a      	ldr	r2, [r7, #4]
    3884:	1d11      	adds	r1, r2, #4
    3886:	6079      	str	r1, [r7, #4]
    3888:	6812      	ldr	r2, [r2, #0]
    388a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    388c:	683a      	ldr	r2, [r7, #0]
    388e:	4b0f      	ldr	r3, [pc, #60]	; (38cc <Reset_Handler+0x68>)
    3890:	429a      	cmp	r2, r3
    3892:	d3f3      	bcc.n	387c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3894:	4b0e      	ldr	r3, [pc, #56]	; (38d0 <Reset_Handler+0x6c>)
    3896:	603b      	str	r3, [r7, #0]
    3898:	e004      	b.n	38a4 <Reset_Handler+0x40>
                *pDest++ = 0;
    389a:	683b      	ldr	r3, [r7, #0]
    389c:	1d1a      	adds	r2, r3, #4
    389e:	603a      	str	r2, [r7, #0]
    38a0:	2200      	movs	r2, #0
    38a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    38a4:	683a      	ldr	r2, [r7, #0]
    38a6:	4b0b      	ldr	r3, [pc, #44]	; (38d4 <Reset_Handler+0x70>)
    38a8:	429a      	cmp	r2, r3
    38aa:	d3f6      	bcc.n	389a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    38ac:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <Reset_Handler+0x74>)
    38ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    38b0:	4b0a      	ldr	r3, [pc, #40]	; (38dc <Reset_Handler+0x78>)
    38b2:	687a      	ldr	r2, [r7, #4]
    38b4:	217f      	movs	r1, #127	; 0x7f
    38b6:	438a      	bics	r2, r1
    38b8:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    38ba:	4b09      	ldr	r3, [pc, #36]	; (38e0 <Reset_Handler+0x7c>)
    38bc:	4798      	blx	r3

        /* Branch to main function */
        main();
    38be:	4b09      	ldr	r3, [pc, #36]	; (38e4 <Reset_Handler+0x80>)
    38c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    38c2:	e7fe      	b.n	38c2 <Reset_Handler+0x5e>
    38c4:	00003d98 	.word	0x00003d98
    38c8:	20000000 	.word	0x20000000
    38cc:	20000434 	.word	0x20000434
    38d0:	20000434 	.word	0x20000434
    38d4:	200044d0 	.word	0x200044d0
    38d8:	00000000 	.word	0x00000000
    38dc:	e000ed00 	.word	0xe000ed00
    38e0:	00003a09 	.word	0x00003a09
    38e4:	000028c1 	.word	0x000028c1

000038e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    38e8:	b580      	push	{r7, lr}
    38ea:	af00      	add	r7, sp, #0
        while (1) {
    38ec:	e7fe      	b.n	38ec <Dummy_Handler+0x4>
	...

000038f0 <__udivsi3>:
    38f0:	2200      	movs	r2, #0
    38f2:	0843      	lsrs	r3, r0, #1
    38f4:	428b      	cmp	r3, r1
    38f6:	d374      	bcc.n	39e2 <__udivsi3+0xf2>
    38f8:	0903      	lsrs	r3, r0, #4
    38fa:	428b      	cmp	r3, r1
    38fc:	d35f      	bcc.n	39be <__udivsi3+0xce>
    38fe:	0a03      	lsrs	r3, r0, #8
    3900:	428b      	cmp	r3, r1
    3902:	d344      	bcc.n	398e <__udivsi3+0x9e>
    3904:	0b03      	lsrs	r3, r0, #12
    3906:	428b      	cmp	r3, r1
    3908:	d328      	bcc.n	395c <__udivsi3+0x6c>
    390a:	0c03      	lsrs	r3, r0, #16
    390c:	428b      	cmp	r3, r1
    390e:	d30d      	bcc.n	392c <__udivsi3+0x3c>
    3910:	22ff      	movs	r2, #255	; 0xff
    3912:	0209      	lsls	r1, r1, #8
    3914:	ba12      	rev	r2, r2
    3916:	0c03      	lsrs	r3, r0, #16
    3918:	428b      	cmp	r3, r1
    391a:	d302      	bcc.n	3922 <__udivsi3+0x32>
    391c:	1212      	asrs	r2, r2, #8
    391e:	0209      	lsls	r1, r1, #8
    3920:	d065      	beq.n	39ee <__udivsi3+0xfe>
    3922:	0b03      	lsrs	r3, r0, #12
    3924:	428b      	cmp	r3, r1
    3926:	d319      	bcc.n	395c <__udivsi3+0x6c>
    3928:	e000      	b.n	392c <__udivsi3+0x3c>
    392a:	0a09      	lsrs	r1, r1, #8
    392c:	0bc3      	lsrs	r3, r0, #15
    392e:	428b      	cmp	r3, r1
    3930:	d301      	bcc.n	3936 <__udivsi3+0x46>
    3932:	03cb      	lsls	r3, r1, #15
    3934:	1ac0      	subs	r0, r0, r3
    3936:	4152      	adcs	r2, r2
    3938:	0b83      	lsrs	r3, r0, #14
    393a:	428b      	cmp	r3, r1
    393c:	d301      	bcc.n	3942 <__udivsi3+0x52>
    393e:	038b      	lsls	r3, r1, #14
    3940:	1ac0      	subs	r0, r0, r3
    3942:	4152      	adcs	r2, r2
    3944:	0b43      	lsrs	r3, r0, #13
    3946:	428b      	cmp	r3, r1
    3948:	d301      	bcc.n	394e <__udivsi3+0x5e>
    394a:	034b      	lsls	r3, r1, #13
    394c:	1ac0      	subs	r0, r0, r3
    394e:	4152      	adcs	r2, r2
    3950:	0b03      	lsrs	r3, r0, #12
    3952:	428b      	cmp	r3, r1
    3954:	d301      	bcc.n	395a <__udivsi3+0x6a>
    3956:	030b      	lsls	r3, r1, #12
    3958:	1ac0      	subs	r0, r0, r3
    395a:	4152      	adcs	r2, r2
    395c:	0ac3      	lsrs	r3, r0, #11
    395e:	428b      	cmp	r3, r1
    3960:	d301      	bcc.n	3966 <__udivsi3+0x76>
    3962:	02cb      	lsls	r3, r1, #11
    3964:	1ac0      	subs	r0, r0, r3
    3966:	4152      	adcs	r2, r2
    3968:	0a83      	lsrs	r3, r0, #10
    396a:	428b      	cmp	r3, r1
    396c:	d301      	bcc.n	3972 <__udivsi3+0x82>
    396e:	028b      	lsls	r3, r1, #10
    3970:	1ac0      	subs	r0, r0, r3
    3972:	4152      	adcs	r2, r2
    3974:	0a43      	lsrs	r3, r0, #9
    3976:	428b      	cmp	r3, r1
    3978:	d301      	bcc.n	397e <__udivsi3+0x8e>
    397a:	024b      	lsls	r3, r1, #9
    397c:	1ac0      	subs	r0, r0, r3
    397e:	4152      	adcs	r2, r2
    3980:	0a03      	lsrs	r3, r0, #8
    3982:	428b      	cmp	r3, r1
    3984:	d301      	bcc.n	398a <__udivsi3+0x9a>
    3986:	020b      	lsls	r3, r1, #8
    3988:	1ac0      	subs	r0, r0, r3
    398a:	4152      	adcs	r2, r2
    398c:	d2cd      	bcs.n	392a <__udivsi3+0x3a>
    398e:	09c3      	lsrs	r3, r0, #7
    3990:	428b      	cmp	r3, r1
    3992:	d301      	bcc.n	3998 <__udivsi3+0xa8>
    3994:	01cb      	lsls	r3, r1, #7
    3996:	1ac0      	subs	r0, r0, r3
    3998:	4152      	adcs	r2, r2
    399a:	0983      	lsrs	r3, r0, #6
    399c:	428b      	cmp	r3, r1
    399e:	d301      	bcc.n	39a4 <__udivsi3+0xb4>
    39a0:	018b      	lsls	r3, r1, #6
    39a2:	1ac0      	subs	r0, r0, r3
    39a4:	4152      	adcs	r2, r2
    39a6:	0943      	lsrs	r3, r0, #5
    39a8:	428b      	cmp	r3, r1
    39aa:	d301      	bcc.n	39b0 <__udivsi3+0xc0>
    39ac:	014b      	lsls	r3, r1, #5
    39ae:	1ac0      	subs	r0, r0, r3
    39b0:	4152      	adcs	r2, r2
    39b2:	0903      	lsrs	r3, r0, #4
    39b4:	428b      	cmp	r3, r1
    39b6:	d301      	bcc.n	39bc <__udivsi3+0xcc>
    39b8:	010b      	lsls	r3, r1, #4
    39ba:	1ac0      	subs	r0, r0, r3
    39bc:	4152      	adcs	r2, r2
    39be:	08c3      	lsrs	r3, r0, #3
    39c0:	428b      	cmp	r3, r1
    39c2:	d301      	bcc.n	39c8 <__udivsi3+0xd8>
    39c4:	00cb      	lsls	r3, r1, #3
    39c6:	1ac0      	subs	r0, r0, r3
    39c8:	4152      	adcs	r2, r2
    39ca:	0883      	lsrs	r3, r0, #2
    39cc:	428b      	cmp	r3, r1
    39ce:	d301      	bcc.n	39d4 <__udivsi3+0xe4>
    39d0:	008b      	lsls	r3, r1, #2
    39d2:	1ac0      	subs	r0, r0, r3
    39d4:	4152      	adcs	r2, r2
    39d6:	0843      	lsrs	r3, r0, #1
    39d8:	428b      	cmp	r3, r1
    39da:	d301      	bcc.n	39e0 <__udivsi3+0xf0>
    39dc:	004b      	lsls	r3, r1, #1
    39de:	1ac0      	subs	r0, r0, r3
    39e0:	4152      	adcs	r2, r2
    39e2:	1a41      	subs	r1, r0, r1
    39e4:	d200      	bcs.n	39e8 <__udivsi3+0xf8>
    39e6:	4601      	mov	r1, r0
    39e8:	4152      	adcs	r2, r2
    39ea:	4610      	mov	r0, r2
    39ec:	4770      	bx	lr
    39ee:	e7ff      	b.n	39f0 <__udivsi3+0x100>
    39f0:	b501      	push	{r0, lr}
    39f2:	2000      	movs	r0, #0
    39f4:	f000 f806 	bl	3a04 <__aeabi_idiv0>
    39f8:	bd02      	pop	{r1, pc}
    39fa:	46c0      	nop			; (mov r8, r8)

000039fc <__aeabi_uidivmod>:
    39fc:	2900      	cmp	r1, #0
    39fe:	d0f7      	beq.n	39f0 <__udivsi3+0x100>
    3a00:	e776      	b.n	38f0 <__udivsi3>
    3a02:	4770      	bx	lr

00003a04 <__aeabi_idiv0>:
    3a04:	4770      	bx	lr
    3a06:	46c0      	nop			; (mov r8, r8)

00003a08 <__libc_init_array>:
    3a08:	b570      	push	{r4, r5, r6, lr}
    3a0a:	4e0d      	ldr	r6, [pc, #52]	; (3a40 <__libc_init_array+0x38>)
    3a0c:	4d0d      	ldr	r5, [pc, #52]	; (3a44 <__libc_init_array+0x3c>)
    3a0e:	2400      	movs	r4, #0
    3a10:	1bad      	subs	r5, r5, r6
    3a12:	10ad      	asrs	r5, r5, #2
    3a14:	d005      	beq.n	3a22 <__libc_init_array+0x1a>
    3a16:	00a3      	lsls	r3, r4, #2
    3a18:	58f3      	ldr	r3, [r6, r3]
    3a1a:	3401      	adds	r4, #1
    3a1c:	4798      	blx	r3
    3a1e:	42a5      	cmp	r5, r4
    3a20:	d1f9      	bne.n	3a16 <__libc_init_array+0xe>
    3a22:	f000 f9a7 	bl	3d74 <_init>
    3a26:	4e08      	ldr	r6, [pc, #32]	; (3a48 <__libc_init_array+0x40>)
    3a28:	4d08      	ldr	r5, [pc, #32]	; (3a4c <__libc_init_array+0x44>)
    3a2a:	2400      	movs	r4, #0
    3a2c:	1bad      	subs	r5, r5, r6
    3a2e:	10ad      	asrs	r5, r5, #2
    3a30:	d005      	beq.n	3a3e <__libc_init_array+0x36>
    3a32:	00a3      	lsls	r3, r4, #2
    3a34:	58f3      	ldr	r3, [r6, r3]
    3a36:	3401      	adds	r4, #1
    3a38:	4798      	blx	r3
    3a3a:	42a5      	cmp	r5, r4
    3a3c:	d1f9      	bne.n	3a32 <__libc_init_array+0x2a>
    3a3e:	bd70      	pop	{r4, r5, r6, pc}
    3a40:	00003d80 	.word	0x00003d80
    3a44:	00003d80 	.word	0x00003d80
    3a48:	00003d80 	.word	0x00003d80
    3a4c:	00003d88 	.word	0x00003d88

00003a50 <memcpy>:
    3a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a52:	0005      	movs	r5, r0
    3a54:	2a0f      	cmp	r2, #15
    3a56:	d92f      	bls.n	3ab8 <memcpy+0x68>
    3a58:	000b      	movs	r3, r1
    3a5a:	4303      	orrs	r3, r0
    3a5c:	079b      	lsls	r3, r3, #30
    3a5e:	d134      	bne.n	3aca <memcpy+0x7a>
    3a60:	0016      	movs	r6, r2
    3a62:	000c      	movs	r4, r1
    3a64:	0003      	movs	r3, r0
    3a66:	3e10      	subs	r6, #16
    3a68:	0935      	lsrs	r5, r6, #4
    3a6a:	3501      	adds	r5, #1
    3a6c:	012d      	lsls	r5, r5, #4
    3a6e:	1945      	adds	r5, r0, r5
    3a70:	6827      	ldr	r7, [r4, #0]
    3a72:	601f      	str	r7, [r3, #0]
    3a74:	6867      	ldr	r7, [r4, #4]
    3a76:	605f      	str	r7, [r3, #4]
    3a78:	68a7      	ldr	r7, [r4, #8]
    3a7a:	609f      	str	r7, [r3, #8]
    3a7c:	68e7      	ldr	r7, [r4, #12]
    3a7e:	3410      	adds	r4, #16
    3a80:	60df      	str	r7, [r3, #12]
    3a82:	3310      	adds	r3, #16
    3a84:	429d      	cmp	r5, r3
    3a86:	d1f3      	bne.n	3a70 <memcpy+0x20>
    3a88:	230f      	movs	r3, #15
    3a8a:	439e      	bics	r6, r3
    3a8c:	3610      	adds	r6, #16
    3a8e:	1985      	adds	r5, r0, r6
    3a90:	1989      	adds	r1, r1, r6
    3a92:	4013      	ands	r3, r2
    3a94:	2b03      	cmp	r3, #3
    3a96:	d91a      	bls.n	3ace <memcpy+0x7e>
    3a98:	1f1e      	subs	r6, r3, #4
    3a9a:	2300      	movs	r3, #0
    3a9c:	08b4      	lsrs	r4, r6, #2
    3a9e:	3401      	adds	r4, #1
    3aa0:	00a4      	lsls	r4, r4, #2
    3aa2:	58cf      	ldr	r7, [r1, r3]
    3aa4:	50ef      	str	r7, [r5, r3]
    3aa6:	3304      	adds	r3, #4
    3aa8:	42a3      	cmp	r3, r4
    3aaa:	d1fa      	bne.n	3aa2 <memcpy+0x52>
    3aac:	2403      	movs	r4, #3
    3aae:	43a6      	bics	r6, r4
    3ab0:	1d33      	adds	r3, r6, #4
    3ab2:	4022      	ands	r2, r4
    3ab4:	18c9      	adds	r1, r1, r3
    3ab6:	18ed      	adds	r5, r5, r3
    3ab8:	2a00      	cmp	r2, #0
    3aba:	d005      	beq.n	3ac8 <memcpy+0x78>
    3abc:	2300      	movs	r3, #0
    3abe:	5ccc      	ldrb	r4, [r1, r3]
    3ac0:	54ec      	strb	r4, [r5, r3]
    3ac2:	3301      	adds	r3, #1
    3ac4:	4293      	cmp	r3, r2
    3ac6:	d1fa      	bne.n	3abe <memcpy+0x6e>
    3ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aca:	0005      	movs	r5, r0
    3acc:	e7f6      	b.n	3abc <memcpy+0x6c>
    3ace:	001a      	movs	r2, r3
    3ad0:	e7f2      	b.n	3ab8 <memcpy+0x68>
    3ad2:	46c0      	nop			; (mov r8, r8)

00003ad4 <memset>:
    3ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ad6:	0783      	lsls	r3, r0, #30
    3ad8:	d043      	beq.n	3b62 <memset+0x8e>
    3ada:	1e54      	subs	r4, r2, #1
    3adc:	2a00      	cmp	r2, #0
    3ade:	d03f      	beq.n	3b60 <memset+0x8c>
    3ae0:	b2ce      	uxtb	r6, r1
    3ae2:	0002      	movs	r2, r0
    3ae4:	2503      	movs	r5, #3
    3ae6:	e002      	b.n	3aee <memset+0x1a>
    3ae8:	001a      	movs	r2, r3
    3aea:	3c01      	subs	r4, #1
    3aec:	d338      	bcc.n	3b60 <memset+0x8c>
    3aee:	1c53      	adds	r3, r2, #1
    3af0:	7016      	strb	r6, [r2, #0]
    3af2:	422b      	tst	r3, r5
    3af4:	d1f8      	bne.n	3ae8 <memset+0x14>
    3af6:	2c03      	cmp	r4, #3
    3af8:	d92a      	bls.n	3b50 <memset+0x7c>
    3afa:	22ff      	movs	r2, #255	; 0xff
    3afc:	400a      	ands	r2, r1
    3afe:	0215      	lsls	r5, r2, #8
    3b00:	4315      	orrs	r5, r2
    3b02:	042a      	lsls	r2, r5, #16
    3b04:	4315      	orrs	r5, r2
    3b06:	2c0f      	cmp	r4, #15
    3b08:	d914      	bls.n	3b34 <memset+0x60>
    3b0a:	0027      	movs	r7, r4
    3b0c:	001a      	movs	r2, r3
    3b0e:	3f10      	subs	r7, #16
    3b10:	093e      	lsrs	r6, r7, #4
    3b12:	3601      	adds	r6, #1
    3b14:	0136      	lsls	r6, r6, #4
    3b16:	199e      	adds	r6, r3, r6
    3b18:	6015      	str	r5, [r2, #0]
    3b1a:	6055      	str	r5, [r2, #4]
    3b1c:	6095      	str	r5, [r2, #8]
    3b1e:	60d5      	str	r5, [r2, #12]
    3b20:	3210      	adds	r2, #16
    3b22:	4296      	cmp	r6, r2
    3b24:	d1f8      	bne.n	3b18 <memset+0x44>
    3b26:	220f      	movs	r2, #15
    3b28:	4397      	bics	r7, r2
    3b2a:	3710      	adds	r7, #16
    3b2c:	19db      	adds	r3, r3, r7
    3b2e:	4014      	ands	r4, r2
    3b30:	2c03      	cmp	r4, #3
    3b32:	d90d      	bls.n	3b50 <memset+0x7c>
    3b34:	001a      	movs	r2, r3
    3b36:	1f27      	subs	r7, r4, #4
    3b38:	08be      	lsrs	r6, r7, #2
    3b3a:	3601      	adds	r6, #1
    3b3c:	00b6      	lsls	r6, r6, #2
    3b3e:	199e      	adds	r6, r3, r6
    3b40:	c220      	stmia	r2!, {r5}
    3b42:	42b2      	cmp	r2, r6
    3b44:	d1fc      	bne.n	3b40 <memset+0x6c>
    3b46:	2203      	movs	r2, #3
    3b48:	4397      	bics	r7, r2
    3b4a:	3704      	adds	r7, #4
    3b4c:	19db      	adds	r3, r3, r7
    3b4e:	4014      	ands	r4, r2
    3b50:	2c00      	cmp	r4, #0
    3b52:	d005      	beq.n	3b60 <memset+0x8c>
    3b54:	b2c9      	uxtb	r1, r1
    3b56:	191c      	adds	r4, r3, r4
    3b58:	7019      	strb	r1, [r3, #0]
    3b5a:	3301      	adds	r3, #1
    3b5c:	429c      	cmp	r4, r3
    3b5e:	d1fb      	bne.n	3b58 <memset+0x84>
    3b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b62:	0014      	movs	r4, r2
    3b64:	0003      	movs	r3, r0
    3b66:	e7c6      	b.n	3af6 <memset+0x22>

00003b68 <register_fini>:
    3b68:	4b03      	ldr	r3, [pc, #12]	; (3b78 <register_fini+0x10>)
    3b6a:	b510      	push	{r4, lr}
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d002      	beq.n	3b76 <register_fini+0xe>
    3b70:	4802      	ldr	r0, [pc, #8]	; (3b7c <register_fini+0x14>)
    3b72:	f000 f805 	bl	3b80 <atexit>
    3b76:	bd10      	pop	{r4, pc}
    3b78:	00000000 	.word	0x00000000
    3b7c:	00003b91 	.word	0x00003b91

00003b80 <atexit>:
    3b80:	b510      	push	{r4, lr}
    3b82:	0001      	movs	r1, r0
    3b84:	2300      	movs	r3, #0
    3b86:	2200      	movs	r2, #0
    3b88:	2000      	movs	r0, #0
    3b8a:	f000 f81f 	bl	3bcc <__register_exitproc>
    3b8e:	bd10      	pop	{r4, pc}

00003b90 <__libc_fini_array>:
    3b90:	b570      	push	{r4, r5, r6, lr}
    3b92:	4b09      	ldr	r3, [pc, #36]	; (3bb8 <__libc_fini_array+0x28>)
    3b94:	4c09      	ldr	r4, [pc, #36]	; (3bbc <__libc_fini_array+0x2c>)
    3b96:	1ae4      	subs	r4, r4, r3
    3b98:	10a4      	asrs	r4, r4, #2
    3b9a:	d009      	beq.n	3bb0 <__libc_fini_array+0x20>
    3b9c:	4a08      	ldr	r2, [pc, #32]	; (3bc0 <__libc_fini_array+0x30>)
    3b9e:	18a5      	adds	r5, r4, r2
    3ba0:	00ad      	lsls	r5, r5, #2
    3ba2:	18ed      	adds	r5, r5, r3
    3ba4:	682b      	ldr	r3, [r5, #0]
    3ba6:	3c01      	subs	r4, #1
    3ba8:	4798      	blx	r3
    3baa:	3d04      	subs	r5, #4
    3bac:	2c00      	cmp	r4, #0
    3bae:	d1f9      	bne.n	3ba4 <__libc_fini_array+0x14>
    3bb0:	f000 f8ea 	bl	3d88 <_fini>
    3bb4:	bd70      	pop	{r4, r5, r6, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	00003d94 	.word	0x00003d94
    3bbc:	00003d98 	.word	0x00003d98
    3bc0:	3fffffff 	.word	0x3fffffff

00003bc4 <__retarget_lock_acquire_recursive>:
    3bc4:	4770      	bx	lr
    3bc6:	46c0      	nop			; (mov r8, r8)

00003bc8 <__retarget_lock_release_recursive>:
    3bc8:	4770      	bx	lr
    3bca:	46c0      	nop			; (mov r8, r8)

00003bcc <__register_exitproc>:
    3bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bce:	464e      	mov	r6, r9
    3bd0:	4645      	mov	r5, r8
    3bd2:	46de      	mov	lr, fp
    3bd4:	4657      	mov	r7, sl
    3bd6:	b5e0      	push	{r5, r6, r7, lr}
    3bd8:	4d36      	ldr	r5, [pc, #216]	; (3cb4 <__register_exitproc+0xe8>)
    3bda:	b083      	sub	sp, #12
    3bdc:	0006      	movs	r6, r0
    3bde:	6828      	ldr	r0, [r5, #0]
    3be0:	4698      	mov	r8, r3
    3be2:	000f      	movs	r7, r1
    3be4:	4691      	mov	r9, r2
    3be6:	f7ff ffed 	bl	3bc4 <__retarget_lock_acquire_recursive>
    3bea:	4b33      	ldr	r3, [pc, #204]	; (3cb8 <__register_exitproc+0xec>)
    3bec:	681c      	ldr	r4, [r3, #0]
    3bee:	23a4      	movs	r3, #164	; 0xa4
    3bf0:	005b      	lsls	r3, r3, #1
    3bf2:	58e0      	ldr	r0, [r4, r3]
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d052      	beq.n	3c9e <__register_exitproc+0xd2>
    3bf8:	6843      	ldr	r3, [r0, #4]
    3bfa:	2b1f      	cmp	r3, #31
    3bfc:	dc13      	bgt.n	3c26 <__register_exitproc+0x5a>
    3bfe:	1c5a      	adds	r2, r3, #1
    3c00:	9201      	str	r2, [sp, #4]
    3c02:	2e00      	cmp	r6, #0
    3c04:	d128      	bne.n	3c58 <__register_exitproc+0x8c>
    3c06:	9a01      	ldr	r2, [sp, #4]
    3c08:	3302      	adds	r3, #2
    3c0a:	009b      	lsls	r3, r3, #2
    3c0c:	6042      	str	r2, [r0, #4]
    3c0e:	501f      	str	r7, [r3, r0]
    3c10:	6828      	ldr	r0, [r5, #0]
    3c12:	f7ff ffd9 	bl	3bc8 <__retarget_lock_release_recursive>
    3c16:	2000      	movs	r0, #0
    3c18:	b003      	add	sp, #12
    3c1a:	bc3c      	pop	{r2, r3, r4, r5}
    3c1c:	4690      	mov	r8, r2
    3c1e:	4699      	mov	r9, r3
    3c20:	46a2      	mov	sl, r4
    3c22:	46ab      	mov	fp, r5
    3c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c26:	4b25      	ldr	r3, [pc, #148]	; (3cbc <__register_exitproc+0xf0>)
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d03d      	beq.n	3ca8 <__register_exitproc+0xdc>
    3c2c:	20c8      	movs	r0, #200	; 0xc8
    3c2e:	0040      	lsls	r0, r0, #1
    3c30:	e000      	b.n	3c34 <__register_exitproc+0x68>
    3c32:	bf00      	nop
    3c34:	2800      	cmp	r0, #0
    3c36:	d037      	beq.n	3ca8 <__register_exitproc+0xdc>
    3c38:	22a4      	movs	r2, #164	; 0xa4
    3c3a:	2300      	movs	r3, #0
    3c3c:	0052      	lsls	r2, r2, #1
    3c3e:	58a1      	ldr	r1, [r4, r2]
    3c40:	6043      	str	r3, [r0, #4]
    3c42:	6001      	str	r1, [r0, #0]
    3c44:	50a0      	str	r0, [r4, r2]
    3c46:	3240      	adds	r2, #64	; 0x40
    3c48:	5083      	str	r3, [r0, r2]
    3c4a:	3204      	adds	r2, #4
    3c4c:	5083      	str	r3, [r0, r2]
    3c4e:	3301      	adds	r3, #1
    3c50:	9301      	str	r3, [sp, #4]
    3c52:	2300      	movs	r3, #0
    3c54:	2e00      	cmp	r6, #0
    3c56:	d0d6      	beq.n	3c06 <__register_exitproc+0x3a>
    3c58:	009a      	lsls	r2, r3, #2
    3c5a:	4692      	mov	sl, r2
    3c5c:	4482      	add	sl, r0
    3c5e:	464a      	mov	r2, r9
    3c60:	2188      	movs	r1, #136	; 0x88
    3c62:	4654      	mov	r4, sl
    3c64:	5062      	str	r2, [r4, r1]
    3c66:	22c4      	movs	r2, #196	; 0xc4
    3c68:	0052      	lsls	r2, r2, #1
    3c6a:	4691      	mov	r9, r2
    3c6c:	4481      	add	r9, r0
    3c6e:	464a      	mov	r2, r9
    3c70:	3987      	subs	r1, #135	; 0x87
    3c72:	4099      	lsls	r1, r3
    3c74:	6812      	ldr	r2, [r2, #0]
    3c76:	468b      	mov	fp, r1
    3c78:	430a      	orrs	r2, r1
    3c7a:	4694      	mov	ip, r2
    3c7c:	464a      	mov	r2, r9
    3c7e:	4661      	mov	r1, ip
    3c80:	6011      	str	r1, [r2, #0]
    3c82:	2284      	movs	r2, #132	; 0x84
    3c84:	4641      	mov	r1, r8
    3c86:	0052      	lsls	r2, r2, #1
    3c88:	50a1      	str	r1, [r4, r2]
    3c8a:	2e02      	cmp	r6, #2
    3c8c:	d1bb      	bne.n	3c06 <__register_exitproc+0x3a>
    3c8e:	0002      	movs	r2, r0
    3c90:	465c      	mov	r4, fp
    3c92:	328d      	adds	r2, #141	; 0x8d
    3c94:	32ff      	adds	r2, #255	; 0xff
    3c96:	6811      	ldr	r1, [r2, #0]
    3c98:	430c      	orrs	r4, r1
    3c9a:	6014      	str	r4, [r2, #0]
    3c9c:	e7b3      	b.n	3c06 <__register_exitproc+0x3a>
    3c9e:	0020      	movs	r0, r4
    3ca0:	304d      	adds	r0, #77	; 0x4d
    3ca2:	30ff      	adds	r0, #255	; 0xff
    3ca4:	50e0      	str	r0, [r4, r3]
    3ca6:	e7a7      	b.n	3bf8 <__register_exitproc+0x2c>
    3ca8:	6828      	ldr	r0, [r5, #0]
    3caa:	f7ff ff8d 	bl	3bc8 <__retarget_lock_release_recursive>
    3cae:	2001      	movs	r0, #1
    3cb0:	4240      	negs	r0, r0
    3cb2:	e7b1      	b.n	3c18 <__register_exitproc+0x4c>
    3cb4:	20000430 	.word	0x20000430
    3cb8:	00003d70 	.word	0x00003d70
    3cbc:	00000000 	.word	0x00000000
    3cc0:	00007852 	.word	0x00007852
    3cc4:	00005854 	.word	0x00005854
    3cc8:	454c4449 	.word	0x454c4449
    3ccc:	00000000 	.word	0x00000000
    3cd0:	09632509 	.word	0x09632509
    3cd4:	25097525 	.word	0x25097525
    3cd8:	75250975 	.word	0x75250975
    3cdc:	00000a0d 	.word	0x00000a0d
    3ce0:	09752509 	.word	0x09752509
    3ce4:	25752509 	.word	0x25752509
    3ce8:	000a0d25 	.word	0x000a0d25
    3cec:	09752509 	.word	0x09752509
    3cf0:	25313c09 	.word	0x25313c09
    3cf4:	000a0d25 	.word	0x000a0d25
    3cf8:	20726d54 	.word	0x20726d54
    3cfc:	00637653 	.word	0x00637653
    3d00:	51726d54 	.word	0x51726d54
    3d04:	00000000 	.word	0x00000000
    3d08:	000025b4 	.word	0x000025b4
    3d0c:	000025b4 	.word	0x000025b4
    3d10:	000025b4 	.word	0x000025b4
    3d14:	00002624 	.word	0x00002624
    3d18:	00002638 	.word	0x00002638
    3d1c:	00002674 	.word	0x00002674
    3d20:	000025b4 	.word	0x000025b4
    3d24:	000025b4 	.word	0x000025b4
    3d28:	00002624 	.word	0x00002624
    3d2c:	00002638 	.word	0x00002638
    3d30:	00002e62 	.word	0x00002e62
    3d34:	00002ec0 	.word	0x00002ec0
    3d38:	00002ec0 	.word	0x00002ec0
    3d3c:	00002e80 	.word	0x00002e80
    3d40:	00002e7a 	.word	0x00002e7a
    3d44:	00002e86 	.word	0x00002e86
    3d48:	00002e68 	.word	0x00002e68
    3d4c:	00002e8c 	.word	0x00002e8c
    3d50:	00003034 	.word	0x00003034
    3d54:	0000306e 	.word	0x0000306e
    3d58:	0000306e 	.word	0x0000306e
    3d5c:	0000306a 	.word	0x0000306a
    3d60:	00003026 	.word	0x00003026
    3d64:	00003046 	.word	0x00003046
    3d68:	00003016 	.word	0x00003016
    3d6c:	00003058 	.word	0x00003058

00003d70 <_global_impure_ptr>:
    3d70:	20000008                                ... 

00003d74 <_init>:
    3d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d7a:	bc08      	pop	{r3}
    3d7c:	469e      	mov	lr, r3
    3d7e:	4770      	bx	lr

00003d80 <__init_array_start>:
    3d80:	00003b69 	.word	0x00003b69

00003d84 <__frame_dummy_init_array_entry>:
    3d84:	000000c9                                ....

00003d88 <_fini>:
    3d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d8e:	bc08      	pop	{r3}
    3d90:	469e      	mov	lr, r3
    3d92:	4770      	bx	lr

00003d94 <__fini_array_start>:
    3d94:	000000a1 	.word	0x000000a1
